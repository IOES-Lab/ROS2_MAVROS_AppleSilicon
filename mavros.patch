diff --git a/src/mavros/mavros/include/src/mavros/mavros/mavros_router.hpp b/src/mavros/mavros/include/src/mavros/mavros/mavros_router.hpp
index 7d409f68..9e85c278 100644
--- a/src/mavros/mavros/include/src/mavros/mavros/mavros_router.hpp
+++ b/src/mavros/mavros/include/src/mavros/mavros/mavros_router.hpp
@@ -69,7 +69,11 @@ class Router;
 class Endpoint : public std::enable_shared_from_this<Endpoint>
 {
 public:
-  RCLCPP_SMART_PTR_DEFINITIONS(Endpoint)
+  // RCLCPP_SMART_PTR_DEFINITIONS(Endpoint)
+  using Ptr = std::shared_ptr<Endpoint>;
+  using ConstPtr = std::shared_ptr<const Endpoint>;
+  using UniquePtr = std::unique_ptr<Endpoint>;
+  using ConstUniquePtr = std::unique_ptr<const Endpoint>;
 
   enum class Type
   {
@@ -134,7 +138,11 @@ public:
 class Router : public rclcpp::Node
 {
 public:
-  RCLCPP_SMART_PTR_DEFINITIONS(Router)
+  // RCLCPP_SMART_PTR_DEFINITIONS(Router)
+  using Ptr = std::shared_ptr<Router>;
+  using ConstPtr = std::shared_ptr<const Router>;
+  using UniquePtr = std::unique_ptr<Router>;
+  using ConstUniquePtr = std::unique_ptr<const Router>;
 
   using StrV = std::vector<std::string>;
 
@@ -186,7 +194,7 @@ public:
     RCLCPP_INFO(get_logger(), "MAVROS Router started");
   }
 
-  void route_message(Endpoint::SharedPtr src, const mavlink_message_t * msg, const Framing framing);
+  void route_message(Endpoint::Ptr src, const mavlink_message_t * msg, const Framing framing);
 
 private:
   friend class Endpoint;
@@ -197,7 +205,7 @@ private:
   std::shared_timed_mutex mu;
 
   // map stores all routing endpoints
-  std::unordered_map<id_t, Endpoint::SharedPtr> endpoints;
+  std::unordered_map<id_t, Endpoint::Ptr> endpoints;
 
   std::atomic<size_t> stat_msg_routed;      //!< amount of messages came to route_messages()
   std::atomic<size_t> stat_msg_sent;        //!< amount of messages sent
diff --git a/src/mavros/mavros/include/src/mavros/mavros/mavros_uas.hpp b/src/mavros/mavros/include/src/mavros/mavros/mavros_uas.hpp
index 2aed4b41..b69f4684 100644
--- a/src/mavros/mavros/include/src/mavros/mavros/mavros_uas.hpp
+++ b/src/mavros/mavros/include/src/mavros/mavros/mavros_uas.hpp
@@ -231,7 +231,11 @@ private:
 class UAS : public rclcpp::Node
 {
 public:
-  RCLCPP_SMART_PTR_DEFINITIONS(UAS)
+  // RCLCPP_SMART_PTR_DEFINITIONS(UAS)
+  using Ptr = std::shared_ptr<UAS>;
+  using ConstPtr = std::shared_ptr<const UAS>;
+  using UniquePtr = std::unique_ptr<UAS>;
+  using ConstUniquePtr = std::unique_ptr<const UAS>;
   EIGEN_MAKE_ALIGNED_OPERATOR_NEW
 
   // other UAS aliases
@@ -588,7 +592,7 @@ private:
 
   // plugins
   pluginlib::ClassLoader<plugin::PluginFactory> plugin_factory_loader;
-  std::vector<plugin::Plugin::SharedPtr> loaded_plugins;
+  std::vector<plugin::Plugin::Ptr> loaded_plugins;
 
   //! UAS link -> router -> plugin handler
   std::unordered_map<mavlink::msgid_t, plugin::Plugin::Subscriptions> plugin_subscriptions;
@@ -627,7 +631,7 @@ private:
   bool is_plugin_allowed(const std::string & pl_name);
 
   //! makes an instance of the plugin
-  virtual plugin::Plugin::SharedPtr create_plugin_instance(const std::string & pl_name);
+  virtual plugin::Plugin::Ptr create_plugin_instance(const std::string & pl_name);
 
   //! load plugin
   void add_plugin(const std::string & pl_name);
diff --git a/src/mavros/mavros/include/src/mavros/mavros/plugin.hpp b/src/mavros/mavros/include/src/mavros/mavros/plugin.hpp
index ee4c48bb..9128267a 100644
--- a/src/mavros/mavros/include/src/mavros/mavros/plugin.hpp
+++ b/src/mavros/mavros/include/src/mavros/mavros/plugin.hpp
@@ -65,7 +65,11 @@ private:
   explicit Plugin(const Plugin &) = delete;
 
 public:
-  RCLCPP_SMART_PTR_DEFINITIONS(Plugin)
+  // RCLCPP_SMART_PTR_DEFINITIONS(Plugin)
+  using Ptr = std::shared_ptr<Plugin>;
+  using ConstPtr = std::shared_ptr<const Plugin>;
+  using UniquePtr = std::unique_ptr<Plugin>;
+  using ConstUniquePtr = std::unique_ptr<const Plugin>;
 
   //! generic message handler callback
   using HandlerCb = mavconn::MAVConnInterface::ReceivedCb;
@@ -283,7 +287,7 @@ public:
   PluginFactory() = default;
   virtual ~PluginFactory() = default;
 
-  virtual Plugin::SharedPtr create_plugin_instance(UASPtr uas) = 0;
+  virtual Plugin::Ptr create_plugin_instance(UASPtr uas) = 0;
 };
 
 //! Helper template to make plugin factories
@@ -294,7 +298,7 @@ public:
   PluginFactoryTemplate() = default;
   virtual ~PluginFactoryTemplate() = default;
 
-  Plugin::SharedPtr create_plugin_instance(UASPtr uas) override
+  Plugin::Ptr create_plugin_instance(UASPtr uas) override
   {
     static_assert(
       std::is_base_of<Plugin, _T>::value,
diff --git a/src/mavros/mavros/include/src/mavros/mavros/plugin_filter.hpp b/src/mavros/mavros/include/src/mavros/mavros/plugin_filter.hpp
index 3d3b28a1..b73fe035 100644
--- a/src/mavros/mavros/include/src/mavros/mavros/plugin_filter.hpp
+++ b/src/mavros/mavros/include/src/mavros/mavros/plugin_filter.hpp
@@ -32,7 +32,7 @@ namespace filter
 {
 using mavros::plugin::Filter;
 using mavros::uas::UAS;
-using UASPtr = UAS::SharedPtr;
+using UASPtr = UAS::Ptr;
 using mavconn::Framing;
 
 
diff --git a/src/mavros/mavros/src/lib/mavros_router.cpp b/src/mavros/mavros/src/lib/mavros_router.cpp
index ebb34601..50ab81e8 100644
--- a/src/mavros/mavros/src/lib/mavros_router.cpp
+++ b/src/mavros/mavros/src/lib/mavros_router.cpp
@@ -34,7 +34,7 @@ static inline uint8_t get_msg_byte(const mavlink_message_t * msg, uint8_t offset
 }
 
 void Router::route_message(
-  Endpoint::SharedPtr src, const mavlink_message_t * msg,
+  Endpoint::Ptr src, const mavlink_message_t * msg,
   const Framing framing)
 {
   shared_lock lock(mu);
@@ -118,7 +118,7 @@ void Router::add_endpoint(
 
   id_t id = id_counter.fetch_add(1);
 
-  Endpoint::SharedPtr ep;
+  Endpoint::Ptr ep;
   if (request->type == mavros_msgs::srv::EndpointAdd::Request::TYPE_UAS) {
     ep = std::make_shared<ROSEndpoint>();
   } else {
diff --git a/src/mavros/mavros/src/lib/mavros_uas.cpp b/src/mavros/mavros/src/lib/mavros_uas.cpp
index e185df6a..42f6ec08 100644
--- a/src/mavros/mavros/src/lib/mavros_uas.cpp
+++ b/src/mavros/mavros/src/lib/mavros_uas.cpp
@@ -259,7 +259,7 @@ inline bool is_mavlink_message_t(const size_t rt)
   return h == rt;
 }
 
-plugin::Plugin::SharedPtr UAS::create_plugin_instance(const std::string & pl_name)
+plugin::Plugin::Ptr UAS::create_plugin_instance(const std::string & pl_name)
 {
   auto plugin_factory = plugin_factory_loader.createSharedInstance(pl_name);
 
diff --git a/src/mavros/mavros/test/test_router.cpp b/src/mavros/mavros/test/test_router.cpp
index 1f68c16d..7f13c674 100644
--- a/src/mavros/mavros/test/test_router.cpp
+++ b/src/mavros/mavros/test/test_router.cpp
@@ -87,7 +87,7 @@ public:
     rclcpp::shutdown();
   }
 
-  Router::SharedPtr create_node()
+  Router::Ptr create_node()
   {
     auto router = std::make_shared<Router>("test_mavros_router");
 
@@ -120,13 +120,13 @@ public:
     return router;
   }
 
-  MockEndpoint::SharedPtr getep(Router::SharedPtr router, id_t id)
+  MockEndpoint::SharedPtr getep(Router::Ptr router, id_t id)
   {
     auto ep = router->endpoints[id];
     return std::static_pointer_cast<MockEndpoint>(ep);
   }
 
-  std::unordered_map<id_t, Endpoint::SharedPtr> & get_endpoints(Router::SharedPtr router)
+  std::unordered_map<id_t, Endpoint::Ptr> & get_endpoints(Router::Ptr router)
   {
     return router->endpoints;
   }
@@ -166,17 +166,17 @@ public:
     return hb;
   }
 
-  inline size_t get_stat_msg_routed(Router::SharedPtr router)
+  inline size_t get_stat_msg_routed(Router::Ptr router)
   {
     return router->stat_msg_routed.load();
   }
 
-  inline size_t get_stat_msg_sent(Router::SharedPtr router)
+  inline size_t get_stat_msg_sent(Router::Ptr router)
   {
     return router->stat_msg_sent.load();
   }
 
-  inline size_t get_stat_msg_dropped(Router::SharedPtr router)
+  inline size_t get_stat_msg_dropped(Router::Ptr router)
   {
     return router->stat_msg_dropped.load();
   }
diff --git a/src/mavros/mavros/test/test_uas.cpp b/src/mavros/mavros/test/test_uas.cpp
index f207f5eb..5678a362 100644
--- a/src/mavros/mavros/test/test_uas.cpp
+++ b/src/mavros/mavros/test/test_uas.cpp
@@ -53,7 +53,7 @@ public:
   explicit MockUAS(const std::string name_)
   : UAS(name_) {}
 
-  MOCK_METHOD1(create_plugin_instance, plugin::Plugin::SharedPtr(const std::string & pl_name));
+  MOCK_METHOD1(create_plugin_instance, plugin::Plugin::Ptr(const std::string & pl_name));
 };
 
 class MockPlugin : public plugin::Plugin
@@ -61,12 +61,12 @@ class MockPlugin : public plugin::Plugin
 public:
   using SharedPtr = std::shared_ptr<MockPlugin>;
 
-  explicit MockPlugin(UAS::SharedPtr uas_)
+  explicit MockPlugin(UAS::Ptr uas_)
   : Plugin(uas_) {}
 
   MOCK_METHOD0(get_subscriptions, plugin::Plugin::Subscriptions(void));
 
-  inline plugin::Plugin::SharedPtr getptr()
+  inline plugin::Plugin::Ptr getptr()
   {
     return std::static_pointer_cast<plugin::Plugin>(shared_from_this());
   }
diff --git a/mavros_extras/CHANGELOG.rst b/mavros_extras/CHANGELOG.rst
deleted file mode 100644
index b65333d5..00000000
--- a/mavros_extras/CHANGELOG.rst
+++ /dev/null
@@ -1,1537 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package mavros_extras
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-2.8.0 (2024-06-07)
-------------------
-* gimbal_control: fix build
-* gimbal_control: fix using
-* gimbal_control: connect service on use
-* regenerate all using cogall.sh
-* reformat with jazzy's ament_uncrustify
-* Merge branch 'master' into ros2
-  * master:
-  1.19.0
-  update changelog
-  gps_global_origin: remove LLA to ECEF conversion
-* 1.19.0
-* update changelog
-* removed prefix in enums in messages and changed to use existing functions for string and quaternion convert
-* Adding example service calls
-* Code cleanup
-* Removed exception after testing behavior
-  Replaced with service call failure with MAV_RESULT_DENIED result value (2)
-* Corrected build errors and warnings
-* Final touches
-  Added functionality that was overlooked for camera tracking if supported, added copyright info, added custom exception thrown when mode enumerator is not understood
-* Added gimbal_control plugin
-  Added all functionality to support a plugin to enable compatibility with MAVLink Gimbal Protocol v2
-* Contributors: Frederik Mazur Andersen, Mark-Beaty, Vladimir Ermakov
-
-1.19.0 (2024-06-06)
--------------------
-
-2.7.0 (2024-03-03)
-------------------
-* re-generate with cogall.sh
-* Merge branch 'master' into ros2
-  * master:
-  1.18.0
-  update changelog
-  sys_status.cpp: improve timeout code
-  sys_status.cpp: Add a SYS_STATUS message publisher
-  [camera plugin] Fix image_index and capture_result not properly filled
-  Fix missing semi-colon
-  GPS_STATUS Plugin: Fill in available messages for ROS1 legacy
-* 1.18.0
-* update changelog
-* [camera plugin] Fix image_index and capture_result not properly filled
-* [camera plugin] Fix image_index and capture_result not properly filled
-* Update mavros_plugins.xml
-* Update wheel_odometry.cpp
-  fix typo
-* Fix typo
-  fix typo in odometry frame child id
-* Removed unused variable
-* Use SensorDataQoS for gp_origin subscriber
-* Fix missing semi-colon
-* GPS_STATUS Plugin: Fill in available messages for ROS1 legacy
-  Filled in available fields in GPS_RAW_INT & GPS2_RAW messages
-  p.s. seems GPS2_RAW more complete than original GPS_RAW_INT
-* Define _frd frames in odom plugin based on parent/child frame parametrs
-* Contributors: Beniamino Pozzan, Kristoffer Bergman, Matteo Molinari, Mattia Giurato, Mohamed Abdelkader, Seunghwan Jo, Vladimir Ermakov, hpbrandal
-
-1.18.0 (2024-03-03)
--------------------
-* [camera plugin] Fix image_index and capture_result not properly filled
-* Fix missing semi-colon
-* GPS_STATUS Plugin: Fill in available messages for ROS1 legacy
-  Filled in available fields in GPS_RAW_INT & GPS2_RAW messages
-  p.s. seems GPS2_RAW more complete than original GPS_RAW_INT
-* Contributors: Beniamino Pozzan, Seunghwan Jo
-
-2.6.0 (2023-09-09)
-------------------
-* switch to use tf2_eigen.hpp, but that drops support for EOL distros
-* ament uncrustify
-* cog: regenerate all
-* Merge branch 'master' into ros2
-  * master:
-  1.17.0
-  update changelog
-  cog: regenerate all
-  Bugfix/update map origin with home position (`#1892 <https://github.com/mavlink/src/mavros/mavros/issues/1892>`_)
-  mavros: Remove extra ';'
-  mavros_extras: Fix some init order warnings
-  Suppress warnings from included headers
-  1.16.0
-  update changelog
-  made it such that the gp_origin topic published latched.
-  use hpp instead of deprecated .h pluginlib headers
-* 1.17.0
-* update changelog
-* Merge pull request `#1889 <https://github.com/mavlink/src/mavros/mavros/issues/1889>`_ from MKargus0/feature/fix_landing_target_time_conversion
-  Fixed header.stamp conversion in landing target
-* fixed style
-* fixed header.stamp conversion in landing target
-* Merge pull request `#1871 <https://github.com/mavlink/src/mavros/mavros/issues/1871>`_ from Vladislavert/feature/optical_flow_msg
-  Addition of New OpticalFlow.msg
-* Added geometry_msgs/Vector3 to OpticalFlow.msg
-* Added vectors to the message OpticalFlow.msg
-* Added message optical flow
-* Merge pull request `#1865 <https://github.com/mavlink/src/mavros/mavros/issues/1865>`_ from scoutdi/warnings
-  Fix / suppress some build warnings
-* mavros_extras: Fix some init order warnings
-* Suppress warnings from included headers
-* 1.16.0
-* update changelog
-* Merge pull request `#1817 <https://github.com/mavlink/src/mavros/mavros/issues/1817>`_ from lucasw/pluginlib_hpp
-  use hpp instead of deprecated .h pluginlib headers
-* use hpp instead of deprecated .h pluginlib headers
-* Contributors: Lucas Walter, Mikhail Kolodochka, Morten Fyhn Amundsen, Vladimir Ermakov, Vladislavert
-
-2.5.0 (2023-05-05)
-------------------
-
-2.4.0 (2022-12-30)
-------------------
-* extras: uncrustify
-* extras: fix build, 2
-* extras: fix build
-* extras: fix cog
-* Merge branch 'master' into ros2
-  * master:
-  1.15.0
-  update changelog
-  ci: update actions
-  Implement debug float array handler
-  mavros_extras: Fix a sequence point warning
-  mavros_extras: Fix a comparison that shouldn't be bitwise
-  mavros: Fix some warnings
-  mavros_extras: Fix buggy check for lat/lon ignored
-  libmavconn: fix MAVLink v1.0 output selection
-* 1.15.0
-* update changelog
-* Merge pull request `#1811 <https://github.com/mavlink/src/mavros/mavros/issues/1811>`_ from scoutdi/debug-float-array
-  Implement debug float array handler
-* Implement debug float array handler
-  Co-authored-by: Morten Fyhn Amundsen <morten.f.amundsen@scoutdi.com>
-* Merge pull request `#1807 <https://github.com/mavlink/src/mavros/mavros/issues/1807>`_ from scoutdi/fix-bitwise-comparison
-  mavros_extras: Fix a comparison that shouldn't be bitwise
-* Merge pull request `#1808 <https://github.com/mavlink/src/mavros/mavros/issues/1808>`_ from scoutdi/fix-sequence-point-warning
-  mavros_extras: Fix a sequence point warning
-* mavros_extras: Fix a sequence point warning
-* mavros_extras: Fix a comparison that shouldn't be bitwise
-* Merge pull request `#1805 <https://github.com/mavlink/src/mavros/mavros/issues/1805>`_ from scoutdi/fix-latlon-check
-  mavros_extras: Fix buggy check for lat/lon ignored
-* mavros_extras: Fix buggy check for lat/lon ignored
-* Contributors: Morten Fyhn Amundsen, Sverre Velten Rothmund, Vladimir Ermakov
-
-2.3.0 (2022-09-24)
-------------------
-* extras: fix linter errors
-* extras: fix toMsg
-* extras: fix build
-* extras: port guided_target
-* mavros: remove custom find script, re-generate
-* Merge branch 'master' into ros2
-  * master:
-  1.14.0
-  update changelog
-  scripts: waypoint and param files are text, not binary
-  libmavconn: fix MAVLink v1.0 output selection
-  plugins: add guided_target to accept offboard position targets
-  add cmake module path for geographiclib on debian based systems
-  use already installed FindGeographicLib.cmake
-* 1.14.0
-* update changelog
-* Merge pull request `#1780 <https://github.com/mavlink/src/mavros/mavros/issues/1780>`_ from snktshrma/master
-  guided_target: accept position-target-global-int messages
-* plugins: add guided_target to accept offboard position targets
-  Update guided_target.cpp
-  Update guided_target.cpp
-  Update mavros_plugins.xml
-  Update CMakeLists.txt
-  Added offboard_position.cpp
-  Update apm_config.yaml
-  Update offboard_position.cpp
-  Update offboard_position.cpp
-  Rename offboard_position.cpp to guided_target.cpp
-  Update CMakeLists.txt
-  Update mavros_plugins.xml
-  Update apm_config.yaml
-  Update guided_target.cpp
-* Contributors: Sanket Sharma, Vladimir Ermakov
-
-2.2.0 (2022-06-27)
-------------------
-* extras: fix build
-* extras: fix build
-* Merge branch 'master' into ros2
-  * master:
-  mount_control.cpp: detect MOUNT_ORIENTATION stale messages
-  ESCTelemetryItem.msg: correct RPM units
-  apm_config.yaml: add mount configuration
-  sys_status.cpp fix free memory for values > 64KiB
-  uncrustify cellular_status.cpp
-  Add CellularStatus plugin and message
-  *_config.yaml: document usage of multiple batteries diagnostics
-  sys_status.cpp: fix compilation
-  sys_status.cpp: support diagnostics on up-to 10 batteries
-  sys_status.cpp: do not use harcoded constants
-  sys_status.cpp: Timeout on MEMINFO and HWSTATUS mavlink messages and publish on the diagnostics
-  sys_status.cpp: fix enabling of mem_diag and hwst_diag
-  sys_status.cpp: Do not use battery1 voltage as voltage for all other batteries (bugfix).
-  sys_status.cpp: ignore sys_status mavlink messages from gimbals
-  mount_control.cpp: use mount_nh for params to keep similarities with other plugins set diag settings before add()
-  sys_status.cpp: remove deprecated BATTERY2 mavlink message support
-  Mount control plugin: add configurable diagnostics
-  Bugfix: increment_f had no value asigned when input LaserScan was bigger than obstacle.distances.size()
-  Bugfix: wrong interpolation when the reduction ratio (scale_factor) is not integer.
-  Disable startup_px4_usb_quirk in px4_config.yaml
-* cmake: style fix
-* cmake: downgrade to C++17 as 20 breaks something in rclcpp
-* cmake: hide -std=c++2a
-* Merge pull request `#1744 <https://github.com/mavlink/src/mavros/mavros/issues/1744>`_ from amilcarlucas/pr_gimbal_diagnostics_fixes
-  mount_control.cpp: detect MOUNT_ORIENTATION stale messages
-* extras: fix cog re to extract plugin name
-
-1.17.0 (2023-09-09)
--------------------
-* Merge pull request `#1865 <https://github.com/mavlink/src/mavros/mavros/issues/1865>`_ from scoutdi/warnings
-  Fix / suppress some build warnings
-* mavros_extras: Fix some init order warnings
-* Suppress warnings from included headers
-* Contributors: Morten Fyhn Amundsen, Vladimir Ermakov
-
-1.16.0 (2023-05-05)
--------------------
-* Merge pull request `#1817 <https://github.com/mavlink/src/mavros/mavros/issues/1817>`_ from lucasw/pluginlib_hpp
-  use hpp instead of deprecated .h pluginlib headers
-* use hpp instead of deprecated .h pluginlib headers
-* Contributors: Lucas Walter, Vladimir Ermakov
-
-1.15.0 (2022-12-30)
--------------------
-* Merge pull request `#1811 <https://github.com/mavlink/src/mavros/mavros/issues/1811>`_ from scoutdi/debug-float-array
-  Implement debug float array handler
-* Implement debug float array handler
-  Co-authored-by: Morten Fyhn Amundsen <morten.f.amundsen@scoutdi.com>
-* Merge pull request `#1807 <https://github.com/mavlink/src/mavros/mavros/issues/1807>`_ from scoutdi/fix-bitwise-comparison
-  mavros_extras: Fix a comparison that shouldn't be bitwise
-* Merge pull request `#1808 <https://github.com/mavlink/src/mavros/mavros/issues/1808>`_ from scoutdi/fix-sequence-point-warning
-  mavros_extras: Fix a sequence point warning
-* mavros_extras: Fix a sequence point warning
-* mavros_extras: Fix a comparison that shouldn't be bitwise
-* Merge pull request `#1805 <https://github.com/mavlink/src/mavros/mavros/issues/1805>`_ from scoutdi/fix-latlon-check
-  mavros_extras: Fix buggy check for lat/lon ignored
-* mavros_extras: Fix buggy check for lat/lon ignored
-* Contributors: Morten Fyhn Amundsen, Sverre Velten Rothmund, Vladimir Ermakov
-
-1.14.0 (2022-09-24)
--------------------
-* Merge pull request `#1780 <https://github.com/mavlink/src/mavros/mavros/issues/1780>`_ from snktshrma/master
-  guided_target: accept position-target-global-int messages
-* plugins: add guided_target to accept offboard position targets
-  Update guided_target.cpp
-  Update guided_target.cpp
-  Update mavros_plugins.xml
-  Update CMakeLists.txt
-  Added offboard_position.cpp
-  Update apm_config.yaml
-  Update offboard_position.cpp
-  Update offboard_position.cpp
-  Rename offboard_position.cpp to guided_target.cpp
-  Update CMakeLists.txt
-  Update mavros_plugins.xml
-  Update apm_config.yaml
-  Update guided_target.cpp
-* Merge pull request `#1744 <https://github.com/mavlink/src/mavros/mavros/issues/1744>`_ from amilcarlucas/pr_gimbal_diagnostics_fixes
-  mount_control.cpp: detect MOUNT_ORIENTATION stale messages
-* mount_control.cpp: detect MOUNT_ORIENTATION stale messages
-  correct MountConfigure response success
-  correct constructor initialization order
-  some gimbals send negated/inverted angle measurements, correct that to obey the MAVLink frame convention using run-time parameters
-* Merge pull request `#1735 <https://github.com/mavlink/src/mavros/mavros/issues/1735>`_ from clydemcqueen/fix_1734
-  Fix crash in vision_pose plugin
-* Remove unrelated log message
-* Initialize last_transform_stamp with RCL_ROS_TIME, fixes `#1734 <https://github.com/mavlink/src/mavros/mavros/issues/1734>`_
-* Merge pull request `#1727 <https://github.com/mavlink/src/mavros/mavros/issues/1727>`_ from BV-OpenSource/pr-cellular-status
-  Pr cellular status
-* uncrustify cellular_status.cpp
-* Add CellularStatus plugin and message
-* Merge pull request `#1702 <https://github.com/mavlink/src/mavros/mavros/issues/1702>`_ from amilcarlucas/mount_diagnostics
-  Mount control plugin: add configurable diagnostics
-* mount_control.cpp: use mount_nh for params to keep similarities with other plugins
-  set diag settings before add()
-* Mount control plugin: add configurable diagnostics
-* Merge pull request `#1700 <https://github.com/mavlink/src/mavros/mavros/issues/1700>`_ from oroelipas/fix-obstacle-distance
-  Fix obstacle distance
-* Bugfix: increment_f had no value asigned when input LaserScan was bigger than obstacle.distances.size()
-* Bugfix: wrong interpolation when the reduction ratio (scale_factor) is not integer.
-* Contributors: Clyde McQueen, Dr.-Ing. Amilcar do Carmo Lucas, Rui Mendes, Vladimir Ermakov, oroel
-
-2.1.1 (2022-03-02)
-------------------
-* plugins: Fix misprint
-  Fix `#1709 <https://github.com/mavlink/src/mavros/mavros/issues/1709>`_
-* Contributors: Vladimir Ermakov
-
-2.1.0 (2022-02-02)
-------------------
-* plugins: fix topic names to use  prefix for namespaced ones
-* plugins: fix topic names to use  prefix for namespaced ones
-* ci: fix several lint warnings
-* extras: terrain: fix copy-paste artifact
-* extras: port terrain plugin
-* Merge branch 'master' into ros2
-  * master:
-  1.13.0
-  update changelog
-  py-lib: fix compatibility with py3 for Noetic
-  re-generate all coglets
-  test: add checks for ROTATION_CUSTOM
-  lib: Fix rotation search for CUSTOM
-  Removed CamelCase for class members.  Publish to "report"
-  More explicitly state "TerrainReport" to allow for future extension of the plugin to support other terrain messages
-  Fixed callback name to match `handle\_{MESSAGE_NAME.lower()}` convention
-  Add extra MAV_FRAMES to waypoint message as defined in https://mavlink.io/en/messages/common.html
-  Fixed topic names to match more closely what other plugins use.  Fixed a typo.
-  Add plugin for reporting terrain height estimate from FCU
-  1.12.2
-  update changelog
-  Set time/publish_sim_time to false by default
-  plugin: setpoint_raw: move getParam to initializer
-  extras: trajectory: backport `#1667 <https://github.com/mavlink/src/mavros/mavros/issues/1667>`_
-* 1.13.0
-* update changelog
-* Merge pull request `#1677 <https://github.com/mavlink/src/mavros/mavros/issues/1677>`_ from AndersonRayner/add_terrain
-  Add plugin for reporting terrain height estimate from the FCU
-* Removed CamelCase for class members.  Publish to "report"
-* More explicitly state "TerrainReport" to allow for future extension of the plugin to support other terrain messages
-* Fixed callback name to match `handle\_{MESSAGE_NAME.lower()}` convention
-* Fixed topic names to match more closely what other plugins use.  Fixed a typo.
-* Add plugin for reporting terrain height estimate from FCU
-* 1.12.2
-* update changelog
-* Merge pull request `#1675 <https://github.com/mavlink/src/mavros/mavros/issues/1675>`_ from BOB4Drone/ros2
-  fix bof
-* Update mag_calibration_status.cpp
-* fix code style
-  fix code style
-* Update mag_calibration_status.cpp
-* fix misprint and use size()
-  fix misprint and use size()
-* fix bof
-  fix `#1668 <https://github.com/mavlink/src/mavros/mavros/issues/1668>`_
-* extras: trajectory: backport `#1667 <https://github.com/mavlink/src/mavros/mavros/issues/1667>`_
-* extras: trajectory: make linter happy after `#1667 <https://github.com/mavlink/src/mavros/mavros/issues/1667>`_
-* Merge pull request `#1667 <https://github.com/mavlink/src/mavros/mavros/issues/1667>`_ from BOB4Drone/ros2
-  fix bof
-* fix bof
-* Merge branch 'master' into ros2
-  * master:
-  1.12.1
-  update changelog
-  mavconn: fix connection issue introduced by `#1658 <https://github.com/mavlink/src/mavros/mavros/issues/1658>`_
-  mavros_extras: Fix some warnings
-  mavros: Fix some warnings
-* 1.12.1
-* update changelog
-* Merge pull request `#1660 <https://github.com/mavlink/src/mavros/mavros/issues/1660>`_ from scoutdi/fix-warnings
-  Fix warnings
-* mavros_extras: Fix some warnings
-* extras: fix parameter name
-* extras: fix topic names
-* Contributors: BOB4Drone, Morten Fyhn Amundsen, Vladimir Ermakov, matt
-
-2.0.5 (2021-11-28)
-------------------
-* extras: make cpplint happy
-* extras: fix most of build errors of SSP
-* extras: servo_state_publisher ported. almost...
-* extras: start porting servo_state_publisher
-* extras: make cpplint happy
-* extras: fix some linter errors.
-  Do you know how to make me mad? Just let ament_uncrustify and
-  ament_cpplint require opposite requirements!
-* fix some build warnings; drop old copter vis
-* Merge branch 'master' into ros2
-  * master:
-  1.12.0
-  update changelog
-  Fix multiple bugs
-  lib: fix mission frame debug print
-  extras: distance_sensor: revert back to zero quaternion
-* 1.12.0
-* update changelog
-* extras: fix some more lint warns
-* plugin: fix some compile warnings
-* cmake: require C++20 to build all modules
-* extras: port distance_sensor plugin
-* extras: fix camera plugin
-* extras: port camera plugin
-* lib: ignore MAVPACKED-related warnings from mavlink
-* extras: distance_sensor: revert back to zero quaternion
-  Fix `#1653 <https://github.com/mavlink/src/mavros/mavros/issues/1653>`_
-* msgs: update conversion header
-* Merge branch 'master' into ros2
-  * master:
-  1.11.1
-  update changelog
-  lib: fix build
-* 1.11.1
-* update changelog
-* Merge branch 'master' into ros2
-  * master:
-  1.11.0
-  update changelog
-  lib: fix ftf warnings
-  msgs: use pragmas to ignore unaligned pointer warnings
-  extras: landing_target: fix misprint
-  msgs: fix convert const
-  plugin: setpoint_raw: fix misprint
-  msgs: try to hide 'unaligned pointer' warning
-  plugin: sys: fix compillation error
-  plugin: initialize quaternions with identity
-  plugin: sys: Use wall timers for connection management
-  Use meters for relative altitude
-  distance_sensor: Initialize sensor orientation quaternion to zero
-  Address review comments
-  Add camera plugin for interfacing with mavlink camera protocol
-* 1.11.0
-* update changelog
-* extras: landing_target: fix misprint
-* plugin: initialize quaternions with identity
-  Eigen::Quaternion[d|f] () does not initialize with zeroes or identity.
-  So we must initialize with identity vector objects that can be left
-  unassigned.
-  Related to `#1652 <https://github.com/mavlink/src/mavros/mavros/issues/1652>`_
-* Merge pull request `#1651 <https://github.com/mavlink/src/mavros/mavros/issues/1651>`_ from Jaeyoung-Lim/pr-image-capture-plugin
-  Add camera plugin for interfacing with mavlink camera protocol
-* Merge pull request `#1652 <https://github.com/mavlink/src/mavros/mavros/issues/1652>`_ from scoutdi/avoid-uninit-orientation
-  distance_sensor: Initialize sensor orientation quaternion to zero
-* Use meters for relative altitude
-* distance_sensor: Initialize sensor orientation quaternion to zero
-  Without this, you'll get random garbage data for the quaternion field
-  of the DISTANCE_SENSOR MAVLink messages sent to the autopilot.
-  The quaternion field should be set to zero when unused, according to the
-  MAVLink message's field description.
-* Address review comments
-* Add camera plugin for interfacing with mavlink camera protocol
-  Add camera image captured message for handling camera trigger information
-* extras: port fake_gps
-* extras: port tunnel
-* extras: update metadata
-* extras: port hil
-* extras: fix odom
-* extras: port odom
-* extras: port px4flow
-* extras: fix some linter warnings
-* extras: fix some linter warnings
-* extras: fix some linter warnings
-* extras: fix some linter warnings
-* extras: port wheel_odometry (partially)
-* extras: port vision_speed
-* extras: port vibration
-* extras: port vfr_hud
-* extras: port trajectory
-* extras: port rangefinder
-* extras: port onboard computer status, play_tune
-* extras: fix linter warnings
-* extras: port obstacle_distance
-* extras: update metadata xml
-* extras: port mount_control
-* extras: fix build for Foxy
-* extras: port mocap
-* extras: port mag cal status
-* extras: port log_transfer
-* extras: fix rtcm seq
-* extras: port gps_rtk
-* extras: port gps_input
-* extras: fixing some linter warnings
-* extras: fixing some linter warnings
-* Contributors: Jaeyoung-Lim, Morten Fyhn Amundsen, Vladimir Ermakov
-
-2.0.4 (2021-11-04)
-------------------
-* Merge branch 'master' into ros2
-  * master:
-  1.10.0
-  prepare release
-* 1.10.0
-* prepare release
-* extras: remove safety_area as outdated
-* extras: port esc_telemetry
-* extras: port esc_status plugin
-* extras: porting gps_status
-* Merge branch 'master' into ros2
-  * master: (25 commits)
-  Remove reference
-  Catch std::length_error in send_message
-  Show ENOTCONN error instead of crash
-  Tunnel: Check for invalid payload length
-  Tunnel.msg: Generate enum with cog
-  mavros_extras: Create tunnel plugin
-  mavros_msgs: Add Tunnel message
-  MountControl.msg: fix copy-paste
-  sys_time.cpp: typo
-  sys_time: publish /clock for simulation times
-  1.9.0
-  update changelog
-  Spelling corrections
-  Changed OverrideRCIn to 18 channels
-  This adds functionality to erase all logs on the SD card via mavlink
-  publish BATTERY2 message as /src/mavros/mavros/battery2 topic
-  Mavlink v2.0 specs for RC_CHANNELS_OVERRIDE accepts upto 18 channels. The plugin publishes channels 9 to 18 if the FCU protocol version is 2.0
-  Added NAV_CONTROLLER_OUTPUT Plugin
-  Added GPS_INPUT plugin
-  Update esc_status plugin with datatype change on MAVLink.
-  ...
-* Merge pull request `#1625 <https://github.com/mavlink/src/mavros/mavros/issues/1625>`_ from scoutdi/tunnel-plugin
-  Plugin for TUNNEL messages
-* Tunnel: Check for invalid payload length
-* mavros_extras: Create tunnel plugin
-* Merge pull request `#1605 <https://github.com/mavlink/src/mavros/mavros/issues/1605>`_ from Peter010103/ros2
-  mavros_extras: Ported vision_pose_estimate plugin for ROS2
-* 1.9.0
-* update changelog
-* Merge pull request `#1621 <https://github.com/mavlink/src/mavros/mavros/issues/1621>`_ from amilcarlucas/pr/mount-control-spelling
-  Spelling corrections
-* Spelling corrections
-* Merge pull request `#1615 <https://github.com/mavlink/src/mavros/mavros/issues/1615>`_ from amilcarlucas/pr/erase-logs
-  This adds functionality to erase all logs on the SD card via mavlink
-* Merge pull request `#1618 <https://github.com/mavlink/src/mavros/mavros/issues/1618>`_ from amilcarlucas/pr/GPS_INPUT-plugin
-  Added GPS_INPUT plugin
-* This adds functionality to erase all logs on the SD card via mavlink
-* Added GPS_INPUT plugin
-* Merge pull request `#1606 <https://github.com/mavlink/src/mavros/mavros/issues/1606>`_ from BV-OpenSource/master
-  Add Mount angles message for communications with ardupilotmega.
-* Merge branch 'master' into master
-* Update esc_status plugin with datatype change on MAVLink.
-  ESC_INFO MAVLink message was updated to have negative temperates and also at a different resolution. This commit updates those changes on this side.
-* Convert status data from cdeg to rad.
-* Publish quaternion information with Mount Status mavlink message.
-* Add missing subscription.
-* extras: port cam_imu_sync
-* extras: re-generate cog
-* extras: port debug_value
-* Remove Mount_Status plugin. Add Status data to Mount_Control plugin. Remove Mount_Status message.
-* extras: fix build, add UAS::send_massage(msg, compid)
-* extras: port companion_process_status
-* msgs: re-generate file lists
-* style: apply ament_uncrustify --reformat
-* Merge branch 'master' into ros2
-  * master:
-  extras: esc_telemetry: fix build
-  extras: fix esc_telemetry centi-volt/amp conversion
-  extras: uncrustify all plugins
-  plugins: reformat xml
-  extras: reformat plugins xml
-  extras: fix apm esc_telemetry
-  msgs: fix types for apm's esc telemetry
-  actually allocate memory for the telemetry information
-  fixed some compile errors
-  added esc_telemetry plugin
-  Reset calibration flag when re-calibrating. Prevent wrong data output.
-  Exclude changes to launch files.
-  Delete debug files.
-  Apply uncrustify changes.
-  Set progress array to global to prevent erasing data.
-  Move Compass calibration report to extras. Rewrite code based on instructions.
-  Remove extra message from CMakeLists.
-  Add message and service definition.
-  Add compass calibration feedback status. Add service to call the 'Next' button in calibrations.
-* extras: esc_telemetry: fix build
-* extras: fix esc_telemetry centi-volt/amp conversion
-* extras: uncrustify all plugins
-* extras: reformat plugins xml
-* extras: fix apm esc_telemetry
-* actually allocate memory for the telemetry information
-* fixed some compile errors
-* added esc_telemetry plugin
-* Add Mount angles message for communications with ardupilotmega.
-* Added subscriber callback function for ROS2
-* Added initialise function in vision_pose_estimate
-* Boilerplate vision_pose_estimate plugin
-* extras: landing_target: disable tf listener, it segfaults
-* extras: regenerate plugins xml, ament_uncrustify
-* mavros_extras: improve landing_target logging
-* mavros_extras: ported landing_target plugin to ros2
-* Reset calibration flag when re-calibrating. Prevent wrong data output.
-* Delete debug files.
-* Apply uncrustify changes.
-* Set progress array to global to prevent erasing data.
-* Move Compass calibration report to extras. Rewrite code based on instructions.
-* extras: port 3dr radio
-* extras: add urdf package
-* extras: adsb: begin porting to ros2
-* Contributors: Abhijith Thottumadayil Jagadeesh, André Filipe, David Jablonski, Dr.-Ing. Amilcar do Carmo Lucas, Karthik Desai, Morten Fyhn Amundsen, Peter010103, Ricardo Marques, Russell, Vladimir Ermakov
-
-1.13.0 (2022-01-13)
--------------------
-* Merge pull request `#1677 <https://github.com/mavlink/src/mavros/mavros/issues/1677>`_ from AndersonRayner/add_terrain
-  Add plugin for reporting terrain height estimate from the FCU
-* Removed CamelCase for class members.  Publish to "report"
-* More explicitly state "TerrainReport" to allow for future extension of the plugin to support other terrain messages
-* Fixed callback name to match `handle\_{MESSAGE_NAME.lower()}` convention
-* Fixed topic names to match more closely what other plugins use.  Fixed a typo.
-* Add plugin for reporting terrain height estimate from FCU
-* Contributors: Vladimir Ermakov, matt
-
-1.12.2 (2021-12-12)
--------------------
-* extras: trajectory: backport `#1667 <https://github.com/mavlink/src/mavros/mavros/issues/1667>`_
-* Contributors: Vladimir Ermakov
-
-1.12.1 (2021-11-29)
--------------------
-* Merge pull request `#1660 <https://github.com/mavlink/src/mavros/mavros/issues/1660>`_ from scoutdi/fix-warnings
-  Fix warnings
-* mavros_extras: Fix some warnings
-* Contributors: Morten Fyhn Amundsen, Vladimir Ermakov
-
-1.12.0 (2021-11-27)
--------------------
-* extras: distance_sensor: revert back to zero quaternion
-  Fix `#1653 <https://github.com/mavlink/src/mavros/mavros/issues/1653>`_
-* Contributors: Vladimir Ermakov
-
-1.11.1 (2021-11-24)
--------------------
-
-1.11.0 (2021-11-24)
--------------------
-* extras: landing_target: fix misprint
-* plugin: initialize quaternions with identity
-  Eigen::Quaternion[d|f] () does not initialize with zeroes or identity.
-  So we must initialize with identity vector objects that can be left
-  unassigned.
-  Related to `#1652 <https://github.com/mavlink/src/mavros/mavros/issues/1652>`_
-* Merge pull request `#1651 <https://github.com/mavlink/src/mavros/mavros/issues/1651>`_ from Jaeyoung-Lim/pr-image-capture-plugin
-  Add camera plugin for interfacing with mavlink camera protocol
-* Merge pull request `#1652 <https://github.com/mavlink/src/mavros/mavros/issues/1652>`_ from scoutdi/avoid-uninit-orientation
-  distance_sensor: Initialize sensor orientation quaternion to zero
-* Use meters for relative altitude
-* distance_sensor: Initialize sensor orientation quaternion to zero
-  Without this, you'll get random garbage data for the quaternion field
-  of the DISTANCE_SENSOR MAVLink messages sent to the autopilot.
-  The quaternion field should be set to zero when unused, according to the
-  MAVLink message's field description.
-* Address review comments
-* Add camera plugin for interfacing with mavlink camera protocol
-  Add camera image captured message for handling camera trigger information
-* Contributors: Jaeyoung-Lim, Morten Fyhn Amundsen, Vladimir Ermakov
-
-1.10.0 (2021-11-04)
--------------------
-* Merge pull request `#1625 <https://github.com/mavlink/src/mavros/mavros/issues/1625>`_ from scoutdi/tunnel-plugin
-  Plugin for TUNNEL messages
-* Tunnel: Check for invalid payload length
-* mavros_extras: Create tunnel plugin
-* Contributors: Morten Fyhn Amundsen, Vladimir Ermakov
-
-1.9.0 (2021-09-09)
-------------------
-* Merge pull request `#1621 <https://github.com/mavlink/src/mavros/mavros/issues/1621>`_ from amilcarlucas/pr/mount-control-spelling
-  Spelling corrections
-* Spelling corrections
-* Merge pull request `#1615 <https://github.com/mavlink/src/mavros/mavros/issues/1615>`_ from amilcarlucas/pr/erase-logs
-  This adds functionality to erase all logs on the SD card via mavlink
-* Merge pull request `#1618 <https://github.com/mavlink/src/mavros/mavros/issues/1618>`_ from amilcarlucas/pr/GPS_INPUT-plugin
-  Added GPS_INPUT plugin
-* This adds functionality to erase all logs on the SD card via mavlink
-* Added GPS_INPUT plugin
-* Merge pull request `#1606 <https://github.com/mavlink/src/mavros/mavros/issues/1606>`_ from BV-OpenSource/master
-  Add Mount angles message for communications with ardupilotmega.
-* Merge branch 'master' into master
-* Update esc_status plugin with datatype change on MAVLink.
-  ESC_INFO MAVLink message was updated to have negative temperates and also at a different resolution. This commit updates those changes on this side.
-* Convert status data from cdeg to rad.
-* Publish quaternion information with Mount Status mavlink message.
-* Add missing subscription.
-* Remove Mount_Status plugin. Add Status data to Mount_Control plugin. Remove Mount_Status message.
-* extras: esc_telemetry: fix build
-* extras: fix esc_telemetry centi-volt/amp conversion
-* extras: uncrustify all plugins
-* extras: reformat plugins xml
-* extras: fix apm esc_telemetry
-* actually allocate memory for the telemetry information
-* fixed some compile errors
-* added esc_telemetry plugin
-* Add Mount angles message for communications with ardupilotmega.
-* Reset calibration flag when re-calibrating. Prevent wrong data output.
-* Delete debug files.
-* Apply uncrustify changes.
-* Set progress array to global to prevent erasing data.
-* Move Compass calibration report to extras. Rewrite code based on instructions.
-* Contributors: Abhijith Thottumadayil Jagadeesh, André Filipe, Dr.-Ing. Amilcar do Carmo Lucas, Karthik Desai, Ricardo Marques, Russell, Vladimir Ermakov
-
-1.8.0 (2021-05-05)
-------------------
-* extras: `#1370 <https://github.com/mavlink/src/mavros/mavros/issues/1370>`_: set obstacle aangle offset
-* extras: distance_sensor: rename param for custom orientation, apply uncrustify
-* distance_sensor: Add horizontal_fov_ratio, vertical_fov_ratio, sensor_orientation parameters
-* distance_sensor: Fill horizontal_fov, vertical_fov, quaternion
-* Contributors: Alexey Rogachevskiy, Vladimir Ermakov
-
-1.7.1 (2021-04-05)
-------------------
-
-1.7.0 (2021-04-05)
-------------------
-
-1.6.0 (2021-02-15)
-------------------
-* Fixed a bug in mavros_extras/src/plugins/odom.cpp by switching lines 175 and 180.
-  Rationale: The pose covariance matrix published to the /src/mavros/mavros/odometry/in topic is exclusively zeros. This is because the transformation matrix r_pose is initialised as zeros (line 140), then applied to the covariance matrix cov_pose (line 176) and then populated (line 180). Clearly the latter two steps should be the other way around, and the comments in the code appear to suggest that this was the intention, but that lines 175 and 180 were accidentally written the wrong way around. Having switched them, the pose covariance is now published to /src/mavros/mavros/odometry/in as expected.
-  JohnG897
-* Contributors: John Gifford
-
-1.5.2 (2021-02-02)
-------------------
-* bugfix - add estimator type in odom message
-  Add missing estimator_type field in  Odometry message.
-  Issue `#1524 <https://github.com/mavlink/src/mavros/mavros/issues/1524>`_
-* Contributors: Ashwin Varghese Kuruttukulam
-
-1.5.1 (2021-01-04)
-------------------
-* Initialise message structures
-  Uninitialised Mavlink 2 extension fields were sent if the fields were
-  not later set. Initialising the fields to zero is the default value for
-  extension fields and appears to the receiver as though sender is unaware
-  of Mavlink 2.
-  Instances were found with regex below, more may exist:
-  mavlink::[^:]+::msg::[^:={]+ ?[^:={]*;
-* Contributors: Rob Clarke
-
-1.5.0 (2020-11-11)
-------------------
-* mavros_extras: Fix member initialization order
-* mavros_extras: Add override specifiers
-* mavros_extras: distance_sensor: Don't publish data when orientation configuration does not match incomming data.
-* fake_gps: Fix assignment typo
-  This colon should probably be an equals sign.
-  With the colon, this assignment becomes a label instead,
-  and `_gps_rate` after the colon becomes an unused
-  expression result.
-* Contributors: Kristian Klausen, Morten Fyhn Amundsen
-
-1.4.0 (2020-09-11)
-------------------
-* mavros: use mavlink::minimal:: after incompatible changes in mavlink package
-  Incompatible change: https://github.com/mavlink/mavlink/pull/1463
-  Fix: `#1483 <https://github.com/mavlink/src/mavros/mavros/issues/1483>`_, https://github.com/mavlink/mavlink/issues/1474
-* play_tune: Assign tune format directly
-* play_tune: Uncrustify
-* play_tune: Use msg_set_target and set_string_z
-* play_tune: Write new plugin
-* Contributors: Morten Fyhn Amundsen, Vladimir Ermakov
-
-1.3.0 (2020-08-08)
-------------------
-* Take into account message count for message size
-* Add esc_status plugin.
-* fake_gps.cpp: Implement GPS time data
-* fake_gps.cpp: implement speed accuracy
-* fake_gps.cpp: Added horiz_accuracy and vert_accuracy parameters
-* fake_gps.cpp: Add mocap_withcovariance configuration parameter
-* fake_gps.cpp: add initial support for GPS_INPUT MAVLink message
-* fake_gps.cpp: uncrustify
-* Add gps_status plugin to publish GPS_RAW and GPS_RTK messages from FCU.
-  The timestamps for the gps_status topics take into account the mavlink time and uses the convienence function
-* uncrustify gps_rtk plugin
-* adding support for publishing rtkbaseline msgs over ROS
-* Contributors: CSCE439, Dr.-Ing. Amilcar do Carmo Lucas, Ricardo Marques
-
-1.2.0 (2020-05-22)
-------------------
-* Revert "extras: odom: Hardcode BODY_FRD enum_value to fix compilation"
-  This reverts commit 1a898dea2202ee1af56d698bd40d40994346c5cb.
-* extras: odom: Hardcode BODY_FRD enum_value to fix compilation
-  That PR broke build: https://github.com/mavlink/mavlink/pull/1112
-  TODO: find out what frame should be used
-* Contributors: Vladimir Ermakov
-
-1.1.0 (2020-04-04)
-------------------
-* Setting the same transparency for all elements
-* Visualization of the direction of the device
-* add support for bezier
-* Contributors: Alamoris, Martina Rivizzigno
-
-1.0.0 (2020-01-01)
-------------------
-* Change odometry subscription queue to 1 to avoid buffering.
-* Contributors: James Goppert
-
-0.33.4 (2019-12-12)
--------------------
-* obstacle_distance: Fill both increment and increment_f fields
-* obstacle_distance: Fix wrong angle increment
-  The computation `req->angle_increment * RAD_TO_DEG` correctly computes
-  angle increment in degrees as a float, but the `increment` field of the
-  OBSTACLE_DISTANCE MAVLink message is a uint8, so the float value gets
-  truncated. So if your real increment is 10 degrees, you may a floating
-  point value of something like 9.999999, which results in the integer value
-  9 getting written to the increment field.
-  An improvement would be to round properly, with something like
-  `static_cast<uint8_t>(increment_deg_float)`,
-  but a better solution is to allow non-integer degree values for the
-  increment, which is supported by the `increment_f` field. According
-  to the MAVLink reference, increment_f is used instead of increment
-  whenever increment_f is nonzero.
-* Contributors: Morten Fyhn Amundsen
-
-0.33.3 (2019-11-13)
--------------------
-* package: fix 6fa58e59 - main package depends on trajectory_msgs, not extras
-* Contributors: Vladimir Ermakov
-
-0.33.2 (2019-11-13)
--------------------
-* Add trajectory_msg as dependency
-* Contributors: Jaeyoung-Lim
-
-0.33.1 (2019-11-11)
--------------------
-* Merge pull request `#1297 <https://github.com/mavlink/src/mavros/mavros/issues/1297>`_ from dayjaby/feature/mount_orientation
-  adding mount orientation to mount_control plugin
-* landing_target: Fix cartesian to displacement bug
-  I think these four conditionals are buggy:
-  The first is    (x and y) > 0
-  and should be   (x > 0) and (y > 0)
-  (This one actually works the way it's written.)
-  The second is   (x < 0 and y) > 0
-  and should be   (x < 0) and (y > 0)
-  The third is    (x and y) < 0
-  and should be   (x < 0) and (y < 0)
-  The fourth is   (x < 0 and y) < 0
-  and should be   (x > 0) and (y < 0)
-* obstacle distance plugin: Add ROS param for mavlink frame
-  Makes it possible to specify the 'frame' field in the MAVLink
-  OBSTACLE_DISTANCE message sent by this plugin. Previously the
-  frame was not defined, which means it defaulted to MAV_FRAME_GLOBAL.
-  (See https://mavlink.io/en/messages/common.html#OBSTACLE_DISTANCE)
-  The default frame is therefore still MAV_FRAME_GLOBAL.
-* resolved merge conflict
-* adding mount orientation to mount_control plugin
-* Contributors: David Jablonski, Morten Fyhn Amundsen, Vladimir Ermakov
-
-0.33.0 (2019-10-10)
--------------------
-* CleanUp
-* Odom Plugin, enforcing ROS convetion, less options but clearer to use
-* Fix service namespace with new nodehandle
-* Add mount configure service
-* use header.stamp to fill mavlink msg field time_usec
-* use cog for copy
-* adapt message and plugin after mavlink message merge
-* rename message and adjust fields
-* add component id to mavros message to distinguish ROS msgs from different systems
-* component_status message and plugin draft
-* Contributors: Jaeyoung-Lim, baumanta, kamilritz
-
-0.32.2 (2019-09-09)
--------------------
-* clean up
-* fix obstacle distance plugin
-* Contributors: baumanta
-
-0.32.1 (2019-08-08)
--------------------
-
-0.32.0 (2019-07-06)
--------------------
-* use direclty radians in yaml files
-* add mav_cmd associated with each point in trajectory plugin
-* Fix typo
-* Address comments
-* Send messages from callback
-* Use MountControl Msg
-* Add mount control class template
-* Contributors: Jaeyoung-Lim, Martina Rivizzigno
-
-0.31.0 (2019-06-07)
--------------------
-* landing_target: fix landing target pose input topic naming
-* fix naming for file
-* mavros_plugins: fix landing_target plugin init
-* landing_target: change topic subscription naming
-* extras: mavros_plugins.xml: fix malform on XML file
-* landing_target: use m_uas
-* visualization: set the frame and child frame id back to map and base_link
-* general fixup to update the landing_target codebase
-* extras: landing target: improve usability and flexibility
-* ident correction
-* landing_target: use Eigen::Quaterniond::Identity()
-* visualization: small correction on cb
-* landing_target: ident correct
-* landing_target: ident correction
-* renamed copter_visualization to just visualization
-* landing_target: target orientation: assess it is not possible
-* copter_visualization: add target_size and landing_target subscriber in copter_visualization node, so to publish a marker of the target
-* uas_stringify: changed UAS::idx_frame() to UAS::frame_from_str()
-* landing_target: removed child_frame_id
-* landing_target: minor code tweak/restructure
-* landing_target: small correction on math
-* landing_target: uncrustify code
-* landing_target: updated to TF2 and Eigen math
-* landing_target: adapted to latest master code
-* landing_target: corrected pkt parser order
-* landing_target: added stringify usage on code
-* landing_target: added timestamp and target size fields [!Won't compile unless a new mavlink release!]
-* landing_target: removed PoseWithCovarianceStamped include
-* landing_target: remove the need of local_position subscription
-* landing_target: fixed local_position subscriber topic name
-* landing_target: updated notation and applied correct math to conversions
-* landing_target: first commit
-* Contributors: TSC21
-
-0.30.0 (2019-05-20)
--------------------
-* Fixed an issue when the laser scan topic contains NaN values they where being sent as 0 distances. (`#1218 <https://github.com/mavlink/src/mavros/mavros/issues/1218>`_)
-* extras `#1223 <https://github.com/mavlink/src/mavros/mavros/issues/1223>`_: Add eigen aligned allocators to plugin classes.
-* gps_rtk: fix multi segment messages
-* Update the readme
-* Contributors: Dr.-Ing. Amilcar do Carmo Lucas, Jaime Machuca, Vladimir Ermakov
-
-0.29.2 (2019-03-06)
--------------------
-* extras: odom: update velocity covariance fields from 'twist' to 'velocity_covariance'
-* Contributors: TSC21
-
-0.29.1 (2019-03-03)
--------------------
-* All: catkin lint files
-* cmake: fix `#1174 <https://github.com/mavlink/src/mavros/mavros/issues/1174>`_: add msg deps for package format 2
-* mavros_extras: Convert source files to Unix line endings
-* Contributors: Pierre Kancir, Vladimir Ermakov, sfalexrog
-
-0.29.0 (2019-02-02)
--------------------
-* obstacle_distance: align comments
-* obstacle_distance: fixup items after peer review
-  changes include using size_t instead of int for loop variables
-  scale_factor calculation ensures argument are floating point
-  remove unnecessary n variable
-* obstacle_distance: combine sensor distances to fit within outgoing message
-* gps_rtk: documentation fixes
-* Fix broken documentation URLs
-* added tf2_eigen to dependencies, so that building with catkin tools does not fail anymore
-* Merge branch 'master' into param-timeout
-* mavros_extras: Wheel odometry plugin updated according to the final mavlink WHEEL_DISTANCE message.
-* mavros_extras: mavros_plugins.xml fix after bad merge.
-* mavros_extras: Wheel odometry plugin, twist covariance matrix non-used diagonal elements zeroed.
-* mavros_extras: Wheel odometry plugin, odometry error propagation added respecting kinematics.
-* mavros_extras: Wheel odometry plugin travelled distance fixed.
-* mavros_extras: Wheel odometry plugin y-speed covariance fixed.
-* mavros_extras: Wheel odometry plugin updated to compute accurate speeds from distances using internal timesteps.
-* mavros_extras: Wheel odometry plugin fixes after CR.
-* mavros_msgs: Float32ArrayStamped replaced by WheelOdomStamped.
-* mavros_extras: Wheel odometry plugin added.
-* Contributors: Dr.-Ing. Amilcar do Carmo Lucas, Jan Heitmann, Pavlo Kolomiiets, Randy Mackay, Vladimir Ermakov
-
-0.28.0 (2019-01-03)
--------------------
-* odom: add ODOMETRY handler and publisher
-* remove newlines after doxygen
-* style clean up
-* Use component_id to determine message sender
-* send out companion status as heartbeat
-* change message name from COMPANION_STATUS to COMPANION_PROCESS_STATUS
-* change message to include pid
-* Change from specific avoidance status message to a more generic companion status message
-* add plugin to receive avoidance status message
-* Contributors: TSC21, baumanta
-
-0.27.0 (2018-11-12)
--------------------
-* extras `#1110 <https://github.com/mavlink/src/mavros/mavros/issues/1110>`_ `#1111 <https://github.com/mavlink/src/mavros/mavros/issues/1111>`_: add eigen aligment to plugins with eigen-typed members
-* Fix odom message to use covariance from msg
-* Contributors: Dion Gonano, Vladimir Ermakov
-
-0.26.3 (2018-08-21)
--------------------
-* fixup! b43279058a3029c67ea75b1ecb86442c9dc991d4
-* mavros_extras/log_transfer: Log transfer plugin
-* Contributors: mlvov
-
-0.26.2 (2018-08-08)
--------------------
-* Fix namespace (std->extras)
-* Changing the callback name to rtcm_cb
-  Adding doxygen documentation
-* Sort the plugins by alphabetical order
-* Put back the casting
-* Using size_t instead of int
-  Using the same rtcm_data message
-  Remove int casting
-* Moving gps_rtk to mavros_extras
-* Contributors: Alexis Paques
-
-0.26.1 (2018-07-19)
--------------------
-* trajectory: update plugin to match mavlink change from trajectory msg to
-  trajectory_representation_waypoints
-* Contributors: Martina
-
-0.26.0 (2018-06-06)
--------------------
-* odom: fix mapping for body frame
-* Contributors: TSC21
-
-0.25.1 (2018-05-14)
--------------------
-
-0.25.0 (2018-05-11)
--------------------
-* extras: Refactor Trajectory handle cb
-* extras: Refactor Trajectory subscription callbacks
-* trajectory: use lambda functions
-* trajectory: add time_horizon for trajectory type Bezier
-* trajectory: add time_horizon field
-* trajectory: fix wrap_pi to have constant time execution
-* trajectory: fix email
-* trajectory: when receiving mavlink trajectory msg distinguish between types
-  to fill correctly the mavros message
-* trajectory: add path callback to support nav_msgs Path
-* trajectory: update trajectory_call back so that it distinguish between
-  trajectory types in copy the values
-* rename ObstacleAvoidance plugin to Trajectory
-* obstacle_avoidance: use cog to fill mavlink and ros messages
-* obstacle_avoidance: uncrustify
-* mavros_plugins: add obstacle avoidance plugin
-* add obstacle_avoidance plugin
-* CMakeLists: add obstacle_avoidance plugin
-* extras: odom: explicitly set the lambda expression arg types
-* extras: odom: use lambda expression to set the transform for twist
-* extras: odom: change the way the rotation matrices are init
-* extras: odom: set the frame_id to local frame only
-* extras: odom: respect the Odometry msg frame spec
-* extras: redo odom param processing
-* extras: odom: remove unnecessary eigen_conversions/eigen_msg.h include
-* extras: odom: fix underlying_type assignment
-* extras: odom: update msg spec link
-* extras: odom: move frame parsing to init()
-* extras: odom: change tf exception handler
-* extras: odom: improve way frame naming is handled
-* extras: update odom plugin to send ODOMETRY msgs
-* extras: smal style fix in vision pose est
-* extras: add covariance parsing to vision_speed_estimate (`#996 <https://github.com/mavlink/src/mavros/mavros/issues/996>`_)
-* Contributors: Martina, Nuno Marques, TSC21, Vladimir Ermakov
-
-0.24.0 (2018-04-05)
--------------------
-* extras: update vision_pose_estimate plugin so it can send the covariance matrix also
-* px4flow: sending OPTICAL_FLOW_RAD messages
-* Contributors: Oleg Kalachev, TSC21
-
-0.23.3 (2018-03-09)
--------------------
-
-0.23.2 (2018-03-07)
--------------------
-
-0.23.1 (2018-02-27)
--------------------
-* odom plugin: initialize matrix with zeros
-* extras fix `#950 <https://github.com/mavlink/src/mavros/mavros/issues/950>`_: fix unit conversions
-* Contributors: ChristophTobler, Vladimir Ermakov
-
-0.23.0 (2018-02-03)
--------------------
-* add MAV_DISTANCE_SENSOR enum to_string
-* extras: plugins: obstacle_distance: update to new msg definition and crystalize
-* extras: obstacle_distance: increase number of array elements
-* extras: plugins: add obstacle_distance plugin
-* Fix vision odom.
-* Contributors: James Goppert, TSC21
-
-0.22.0 (2017-12-11)
--------------------
-* scripts: Use non global mavros-ns allow to work __ns parameter
-* move member variable earth initialization
-* Contributors: Shingo Matsuura, Vladimir Ermakov
-
-0.21.5 (2017-11-16)
--------------------
-* extras fix `#858 <https://github.com/mavlink/src/mavros/mavros/issues/858>`_: fix vector copy-paste error
-* Contributors: Vladimir Ermakov
-
-0.21.4 (2017-11-01)
--------------------
-* ENU<->ECEF transforms fix. (`#847 <https://github.com/mavlink/src/mavros/mavros/issues/847>`_)
-  * ENU<->ECEF transforms fix.
-  * Changes after review. Unit tests added.
-* Contributors: pavloblindnology
-
-0.21.3 (2017-10-28)
--------------------
-* mavteleop: Move from iteritems to items for python3 support
-  Items work with python3 and python2.7
-  Signed-off-by: Patrick Jose Pereira <patrickelectric@gmail.com>
-* extras: Configurable base frame id on distance_sensor
-  Fix `#835 <https://github.com/mavlink/src/mavros/mavros/issues/835>`_
-* debug_msgs: fix typo
-* debug_msgs: fix typo
-* extras: Use cog to reduce common msg filler code
-* add debug plugin
-* Contributors: Nuno Marques, Patrick Jose Pereira, TSC21, Vladimir Ermakov
-
-0.21.2 (2017-09-25)
--------------------
-* odom: fix typo
-* odom: general fixes and code tighting
-* Use tf2 for odom plugin and set reasoable defaults for local pos cov.
-* Contributors: James Goppert, TSC21
-
-0.21.1 (2017-09-22)
--------------------
-
-0.21.0 (2017-09-14)
--------------------
-* IMU and attitude: general clean-up
-* Using tabs as the file does
-* Updating comments for PX4Flow
-* Removing copter_visualization from the yaml files.
-  Adding odometry to apm_config
-  Changing frame_id to base_link for vibration
-* Update the apm_config and px4flow_config files
-* Update configuration from mavros_extras
-* Contributors: Alexis Paques, TSC21
-
-0.20.1 (2017-08-28)
--------------------
-
-0.20.0 (2017-08-23)
--------------------
-* Extras: Distance sensors add RADAR and UNKNOWN type
-* Extras: distance sensor don't spam when message are bounce back from FCU
-* Extras: add ardupilot rangefinder plugin
-* [WIP] Plugins: setpoint_attitude: add sync between thrust and attitude (`#700 <https://github.com/mavlink/src/mavros/mavros/issues/700>`_)
-  * plugins: setpoint_attitude: add sync between throttle and attitude topics to be sent together
-  * plugins: typo correction: replace throttle with thrust
-  * plugins: msgs: setpoint_attitude: replaces Float32Stamped for Thrust msg
-  * plugins: setpoint_attitude: add sync between twist and thrust (RPY+Thrust)
-  * setpoint_attitude: update the logic of thrust normalization verification
-  * setpoint_attitude: implement sync between tf listener and thrust subscriber
-  * TF sync listener: generalize topic type that can be syncronized with TF2
-  * TF2ListenerMixin: keep class template, use template for tf sync method only
-  * TF2ListenerMixin: fix and improve sync tf2_start method
-  * general update to yaml config files and parameters
-  * setpoint_attitude: add note on Thrust sub name
-  * setpoint_attitude: TF sync: pass subscriber pointer instead of binding it
-* extras: fake_gps: use another method to throttle incoming msgs
-* extras: fake_gps: compute vector2d.norm()
-* frame tf: move ENU<->ECEF transforms to ftf_frame_conversions.cpp
-* extras: fake_gps: use rate instead of period
-* extras: fake_gps: style fix
-* extras: mocap_fake_gps->fake_gps: generalize plugin and use GeographicLib possibilites
-* extras: odom: Minor fixes
-* extras: Add odom plugin
-* Contributors: James Goppert, Nuno Marques, TSC21, Vladimir Ermakov, khancyr
-
-0.19.0 (2017-05-05)
--------------------
-* extras: fix package link
-* extras: Fix adsb plugin
-* extras: Add ADSB plugin
-* Add frame transform for vibration levels (`#690 <https://github.com/mavlink/src/mavros/mavros/issues/690>`_)
-  * add frame transform for accel vibration levels
-  * use vectorEigenToMsg
-  * unscrustify
-* Contributors: Nuno Marques, Vladimir Ermakov
-
-0.18.7 (2017-02-24)
--------------------
-* vision plugin : Add missing transform
-* Contributors: Kabir Mohammed
-
-0.18.6 (2017-02-07)
--------------------
-
-0.18.5 (2016-12-12)
--------------------
-
-0.18.4 (2016-11-11)
--------------------
-* Code clean-up
-* code style fix
-* markup changes
-* Fake gps plugin
-* Update README for all packages
-* Contributors: Vilhjalmur, Vladimir Ermakov, vilhjalmur89
-
-0.18.3 (2016-07-07)
--------------------
-
-0.18.2 (2016-06-30)
--------------------
-
-0.18.1 (2016-06-24)
--------------------
-
-0.18.0 (2016-06-23)
--------------------
-* extras `#560 <https://github.com/mavlink/src/mavros/mavros/issues/560>`_: remove cv_bridge and image_transport deps
-* extras: Update UAS
-* extras:vision_speed_estimate: Update API
-* extras:vision_pose_estimate: Update API
-* extras:px4flow: Update API
-* extras:mocap_pose_estimate: Update API
-* extras:distance_sensor: Update API
-* extras:cam_imu_sync: Update API
-* extras: Automatic update by sed
-* extras: prepare to update
-* extras `#560 <https://github.com/mavlink/src/mavros/mavros/issues/560>`_: Remove image streaming over mavlink support.
-  Use external RTP streamer, e.g. https://github.com/ProjectArtemis/gst_video_server
-* Contributors: Vladimir Ermakov
-
-0.17.3 (2016-05-20)
--------------------
-
-0.17.2 (2016-04-29)
--------------------
-
-0.17.1 (2016-03-28)
--------------------
-* ran uncrustify
-* fixed typos
-* use CUBE_LIST for faster rendering
-* limit track size
-* use local variable
-* fixed indentation
-* added rc modes
-* moved rc to rc_override_control()
-* replaced tabulations with spaces (4)
-* introducing RC modes
-* fixed
-* quality added
-* added visualization for local setpoints
-* Contributors: Joey Gong, francois
-
-0.17.0 (2016-02-09)
--------------------
-* rebased with master
-* ran uncrustify
-* removed duplicate include
-* use MarkerArray for vehicle model
-* Updated frame transformations and added odom publisher to local position plugin
-* Contributors: Eddy, francois
-
-0.16.6 (2016-02-04)
--------------------
-* extras: uncrustify
-* added tf
-* comments
-* configurable vehicle model
-* Contributors: Vladimir Ermakov, francois
-
-0.16.5 (2016-01-11)
--------------------
-
-0.16.4 (2015-12-14)
--------------------
-
-0.16.3 (2015-11-19)
--------------------
-
-0.16.2 (2015-11-17)
--------------------
-
-0.16.1 (2015-11-13)
--------------------
-
-0.16.0 (2015-11-09)
--------------------
-* gcs_bridge `#394 <https://github.com/mavlink/src/mavros/mavros/issues/394>`_: enable both UDPROS and TCPROS transports
-* extras fix `#392 <https://github.com/mavlink/src/mavros/mavros/issues/392>`_: add additional subscription for PoseWithCovarianceStamped
-* Contributors: Vladimir Ermakov
-
-0.15.0 (2015-09-17)
--------------------
-* extras `#387 <https://github.com/mavlink/src/mavros/mavros/issues/387>`_: fix header stamp in joint_states
-* extras fix `#387 <https://github.com/mavlink/src/mavros/mavros/issues/387>`_: SSP node done.
-* extras `#387 <https://github.com/mavlink/src/mavros/mavros/issues/387>`_: subscriber works, node almost done
-* extras `#387 <https://github.com/mavlink/src/mavros/mavros/issues/387>`_: load URDF
-* extras `#387 <https://github.com/mavlink/src/mavros/mavros/issues/387>`_: initial import of servo_status_publisher
-* Contributors: Vladimir Ermakov
-
-0.14.2 (2015-08-20)
--------------------
-* extras: fix catkin lint warnings
-* Contributors: Vladimir Ermakov
-
-0.14.1 (2015-08-19)
--------------------
-
-0.14.0 (2015-08-17)
--------------------
-* extras: gcs node: replace deprecated copy function
-* extras: scripts: use API from mavros module
-* package: remove not exist dependency
-* extras: vibration: Fix message include
-* extras: px4flow: Fix message include
-* extras: cam_imu_sync: Fix message include
-* extras: update package description
-* msgs: deprecate mavros::Mavlink and copy utils.
-* msgs `#354 <https://github.com/mavlink/src/mavros/mavros/issues/354>`_: move all messages to mavros_msgs package.
-* opencv 3.0/2.4 header compatibility
-* fix orientation empty error
-* Contributors: Vladimir Ermakov, andre-nguyen, v01d
-
-0.13.1 (2015-08-05)
--------------------
-
-0.13.0 (2015-08-01)
--------------------
-* extras: mocap fix `#352 <https://github.com/mavlink/src/mavros/mavros/issues/352>`_: use new helper for quaternion.
-* Merge pull request `#312 <https://github.com/mavlink/src/mavros/mavros/issues/312>`_ from mhkabir/cam_imu_sync
-  Camera IMU synchronisation support added
-* distance_sensor `#342 <https://github.com/mavlink/src/mavros/mavros/issues/342>`_: correct orientation parameter handling.
-* distance_sensor: restructure orientation matching and verification
-* lib `#319 <https://github.com/mavlink/src/mavros/mavros/issues/319>`_: Return quaternion from UAS::sensor_matching()
-* launch fix `#340 <https://github.com/mavlink/src/mavros/mavros/issues/340>`_: update default component id of PX4.
-* extras: distance_sensor `#71 <https://github.com/mavlink/src/mavros/mavros/issues/71>`_: Purt to TF2.
-* plugin: Use UAS::syncronized_header() for reduce LOC.
-* extras: vision_pose `#71 <https://github.com/mavlink/src/mavros/mavros/issues/71>`_: Use TF2 listener.
-  Also `#319 <https://github.com/mavlink/src/mavros/mavros/issues/319>`_.
-* launch: Update configs.
-* extras: viz `#336 <https://github.com/mavlink/src/mavros/mavros/issues/336>`_: convert plugin to node.
-* extras: vision_speed `#319 <https://github.com/mavlink/src/mavros/mavros/issues/319>`_: use eigen based transform
-* extras: vibration: Use UAS::synchronized_header()
-* extras: px4flow `#319 <https://github.com/mavlink/src/mavros/mavros/issues/319>`_: change transform_frame()
-* extras: mocap `#319 <https://github.com/mavlink/src/mavros/mavros/issues/319>`_: use eigen based transform
-* Camera IMU synchronisation support added
-* Contributors: Mohammed Kabir, TSC21, Vladimir Ermakov
-
-0.12.0 (2015-07-01)
--------------------
-* coverity: make them happy
-* frame_conversions: use inline functions to identify direction of conversion
-* changed frame conversion func name; add 3x3 cov matrix frame conversion; general doxygen comment cleanup
-* frame_conversions: added frame_conversion specific lib file; applied correct frame conversion between ENU<->NED
-* vibration_plugin: changed vibration to Vector3
-* vibration_plugin: msg reformulation
-* vibration_plugin: first commit
-* Changes some frames from world to body conversion for NED to ENU.
-* mavros `#302 <https://github.com/vooon/src/mavros/mavros/issues/302>`_: fix style
-* mavros fix `#301 <https://github.com/vooon/src/mavros/mavros/issues/301>`_: move sensor orientation util to UAS
-* distance_sensor: typo; style fixe
-* sensor_orientation: corrected rotation set sequence
-* sensor_orientation: updated orientation enum; updated data type
-* sensor_orientation: removed unecessary sum on setting rotation
-* sensor_orientation: added sensor orientation matching helper func
-* distance_sensor: minor correction
-* distance_sensor: sensor position cond changed
-* distance_sensor: tweak param check; cond routines
-* distance_sensor: removed unnecessary comment line
-* distance_sensor: ctor list update
-* distance_sensor: define sensor position through param config
-* distance_sensor: minor comment identation correction
-* distance_sensor: tf::Transform creation optional
-* distance_sensor: add tf_broadcaster between 'fcu' and the distance sensor
-* distance_sensor: remove commented code
-* distance_sensor: removed dbg msg
-* distance_sensor: cov condition defined
-* distance_sensor: covariance condition changed
-* distance_sensor: conditional state change
-* distance_sensor: covariance condition set - correction
-* distance_sensor: covariance condition set
-* distance_sensor: ctor list update (corrected)
-* distance_sensor: ctor list update
-* distance_sensor: ctor list update
-* distance_sensor: small correction
-* distance_sensor: uncrustify
-* distance_sensor: array limiting; cast correction; other minor correc
-* distance_sensor: travis build correction
-* distance_sensor: uncrustify distance_sensor.cpp
-* distance_sensor: small corrections on variable definitions, method calls
-* distance_sensor: small enhancements
-* distance_sensor `#292 <https://github.com/vooon/src/mavros/mavros/issues/292>`_: uncrustify
-* distance_sensor `#292 <https://github.com/vooon/src/mavros/mavros/issues/292>`_: fix travis build.
-* distance_sensor `#292 <https://github.com/vooon/src/mavros/mavros/issues/292>`_: implement message handling
-* distance_sensor `#292 <https://github.com/vooon/src/mavros/mavros/issues/292>`_: parse mapping configuration.
-* distance_sensor: remove DistanceSensor.msg from CMakeList
-* distance_sensor: removed DistanceSensor.msg
-* distance_sensor:
-  -> use std Range.msg
-  -> published frame_id in topics are dinamic - depend on type and id of the sensor
-* distance_sensor: comment correction
-* distance_sensor: minor correction
-* distance_sensor: minor fixes that include use Range.msg to Laser data
-* distance_sensor: add plugin file
-* distance_sensor plugin: first commit!
-* Contributors: TSC21, Tony Baltovski, Vladimir Ermakov
-
-0.11.2 (2015-04-26)
--------------------
-* gcs bridge fix `#277 <https://github.com/vooon/src/mavros/mavros/issues/277>`_: add link diagnostics
-* Contributors: Vladimir Ermakov
-
-0.11.1 (2015-04-06)
--------------------
-* mavftpfuse `#129 <https://github.com/vooon/src/mavros/mavros/issues/129>`_: done!
-  Fix `#129 <https://github.com/vooon/src/mavros/mavros/issues/129>`_.
-* mavftpfuse `#129 <https://github.com/vooon/src/mavros/mavros/issues/129>`_: cache file attrs
-* mavftpfuse `#129 <https://github.com/vooon/src/mavros/mavros/issues/129>`_: initial import
-* Contributors: Vladimir Ermakov
-
-0.11.0 (2015-03-24)
--------------------
-* extras: vision_pose `#247 <https://github.com/vooon/src/mavros/mavros/issues/247>`_: rename topic
-* extras: launch `#257 <https://github.com/vooon/src/mavros/mavros/issues/257>`_: use white list for px4flow.
-  Also updates config `#211 <https://github.com/vooon/src/mavros/mavros/issues/211>`_.
-* uncrustify and fix `#207 <https://github.com/vooon/src/mavros/mavros/issues/207>`_
-* uncrustify extras
-* package: update lic
-* license `#242 <https://github.com/vooon/src/mavros/mavros/issues/242>`_: update mavros_extras headers
-* plugin api `#241 <https://github.com/vooon/src/mavros/mavros/issues/241>`_: move diag updater to UAS.
-* plugin api `#241 <https://github.com/vooon/src/mavros/mavros/issues/241>`_: remove global private node handle.
-  Now all plugins should define their local node handle (see dummy.cpp).
-  Also partially does `#233 <https://github.com/vooon/src/mavros/mavros/issues/233>`_ (unmerge setpoint topic namespace).
-* plugin api `#241 <https://github.com/vooon/src/mavros/mavros/issues/241>`_: remove `get_name()`
-* Add BSD license option `#220 <https://github.com/vooon/src/mavros/mavros/issues/220>`_
-* uncrustify: mocap plugin
-* Switched from mavlink VICON_POSITION_ESTIMATE to ATT_POS_MOCAP.
-* Contributors: Tony Baltovski, Vladimir Ermakov
-
-0.10.2 (2015-02-25)
--------------------
-* launch: Fix vim modelines `#213 <https://github.com/vooon/src/mavros/mavros/issues/213>`_
-* Contributors: Vladimir Ermakov
-
-0.10.1 (2015-02-02)
--------------------
-* Fix @mhkabir name in contributors.
-* Updated mavros_extra README to explain the vision_estimate plugin should be used for the mocap data currently.
-* Update px4flow.cpp
-* plguin: px4flow: Remove all ref to old message
-* Merge remote-tracking branch 'upstream/master' into optflow_rad
-  Conflicts:
-  mavros_extras/CMakeLists.txt
-* Update
-* Clean up
-* New interface commit
-* Add new interface. Raw message only for now. Removed the tx functionality as it doesn't make much sense.
-* Contributors: Mohammed Kabir, Tony Baltovski, Vladimir Ermakov
-
-0.10.0 (2015-01-24)
--------------------
-* mocap_pose_estimate: Switched from pose to poseStamped.
-* Contributors: Tony Baltovski
-
-0.9.4 (2015-01-06)
-------------------
-
-0.9.3 (2014-12-30)
-------------------
-* Initiliser fix
-* plugin: visualisation - Fixes CI build
-* plugin: visualisation
-* plugin: visualization minor patch
-* plugin: visualization finshed
-* Contributors: Mohammed Kabir
-
-0.9.2 (2014-11-04)
-------------------
-
-0.9.1 (2014-11-03)
-------------------
-
-0.9.0 (2014-11-03)
-------------------
-
-0.8.2 (2014-11-03)
-------------------
-* REP140: update package.xml format.
-  Hydro don't accept this format correctly,
-  but after split i can update.
-* Contributors: Vladimir Ermakov
-
-0.8.1 (2014-11-02)
-------------------
-* mavconn `#161 <https://github.com/vooon/src/mavros/mavros/issues/161>`_: Fix headers used in mavros. Add readme.
-* Update repo links.
-  Package moved to mavlink organization.
-* Contributors: Vladimir Ermakov
-
-0.8.0 (2014-09-22)
-------------------
-* Revert "Update package.xml format to REP140 (2)."
-  This reverts commit 81286eb84090a95759591cfab89dd9718ff35b7e.
-  ROS Hydro don't fully support REP140: rospack can't find plugin
-  descriptions.
-  Fix `#151 <https://github.com/vooon/src/mavros/mavros/issues/151>`_.
-* Added arming/disarming for att mode.
-* Added arming and disarming via mavteleop.
-* extras: mocap: Fix param/topic namespace.
-  Fix `#150 <https://github.com/vooon/src/mavros/mavros/issues/150>`_.
-* extras: launch: Use includes.
-  Fix `#144 <https://github.com/vooon/src/mavros/mavros/issues/144>`_.
-* Update package.xml format to REP140 (2).
-  Fix `#104 <https://github.com/vooon/src/mavros/mavros/issues/104>`_.
-* extras: launch: Fix typos.
-* extras: launch: Add teleop launch script.
-* extras: mavteleop: Dirty implementation of position control mode.
-  Issue `#133 <https://github.com/vooon/src/mavros/mavros/issues/133>`_.
-* extras: mavteleop: Implement velocity setpoint control.
-  Issue `#133 <https://github.com/vooon/src/mavros/mavros/issues/133>`_.
-* extras: mavteleop: Implement attitude control mode.
-  Issue `#133 <https://github.com/vooon/src/mavros/mavros/issues/133>`_.
-* extras: Use cmake modules.
-  Issue `#139 <https://github.com/vooon/src/mavros/mavros/issues/139>`_.
-* Update doxygen documentation.
-  Add split lines in UAS, and make UAS.connection atomic.
-  Add rosdoc configuration for mavros_extras.
-* scripts: mavsetp: corrected msg API; mavteleop: added prefix to rc override
-* scripts: Initial import mavteleop
-  Now it's just proof of concept.
-  Implemented only RC override of RPYT channels.
-  Issue `#133 <https://github.com/vooon/src/mavros/mavros/issues/133>`_.
-* node: Catch URL open exception.
-  Also update connection pointer type.
-* Contributors: Nuno Marques, Tony Baltovski, Vladimir Ermakov
-
-0.7.1 (2014-08-25)
-------------------
-* plugins: Change UAS FCU link name.
-  Reduce smart pointer count, that hold fcu link object.
-* Plugins: finish moving plugins
-* Closes `#122 <https://github.com/vooon/src/mavros/mavros/issues/122>`_, closes `#123 <https://github.com/vooon/src/mavros/mavros/issues/123>`_; plugins: move mocap & vision plugins to extras, change vision plugins name
-* launch: Add example launch for `#103 <https://github.com/vooon/src/mavros/mavros/issues/103>`_.
-* extras: image_pub: Update plugin API.
-* extras: px4flow: Update plugin API.
-* plugins: disable most of plugins
-* extras: init ctor
-* extras: Fix package URLs
-* test: temporary travis hack (manually download latest mavlink deb)
-* Update readme
-* Contributors: Nuno Marques, Vladimir Ermakov
-
-0.7.0 (2014-08-12)
-------------------
-* move exras to subdirectory, `#101 <https://github.com/vooon/src/mavros/mavros/issues/101>`_
-* Contributors: Vladimir Ermakov, Mohammed Kabir
diff --git a/mavros_extras/CMakeLists.txt b/mavros_extras/CMakeLists.txt
deleted file mode 100644
index dc0fd0cb..00000000
--- a/mavros_extras/CMakeLists.txt
+++ /dev/null
@@ -1,214 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-project(mavros_extras)
-
-# Default to C++20
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 17)
-  #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++2a")
-endif()
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  # we dont use add_compile_options with pedantic in message packages
-  # because the Python C extensions dont comply with it
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
-endif()
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcomment")
-
-# Allow GNU extensions (-std=gnu++20)
-set(CMAKE_C_EXTENSIONS ON)
-set(CMAKE_CXX_EXTENSIONS ON)
-
-find_package(ament_cmake REQUIRED)
-
-# find mavros dependencies
-find_package(rclcpp REQUIRED)
-find_package(rclcpp_components REQUIRED)
-find_package(pluginlib REQUIRED)
-find_package(rcpputils REQUIRED)
-find_package(message_filters REQUIRED)
-
-find_package(mavlink REQUIRED)
-find_package(mavros REQUIRED)
-find_package(libmavconn REQUIRED)
-
-find_package(eigen3_cmake_module REQUIRED)
-find_package(Eigen3 REQUIRED)
-# find_package(yaml_cpp REQUIRED)
-find_package(yaml_cpp_vendor REQUIRED)
-
-## Find GeographicLib
-# Append to CMAKE_MODULE_PATH since debian/ubuntu installs
-# FindGeographicLib.cmake in a nonstand location
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};/usr/share/cmake/geographiclib")
-find_package(GeographicLib REQUIRED)
-
-find_package(angles REQUIRED)
-find_package(eigen_stl_containers REQUIRED)
-find_package(tf2_eigen REQUIRED)
-find_package(tf2_ros REQUIRED)
-find_package(urdf REQUIRED)
-
-find_package(diagnostic_msgs REQUIRED)
-find_package(diagnostic_updater REQUIRED)
-
-find_package(geographic_msgs REQUIRED)
-find_package(geometry_msgs REQUIRED)
-find_package(mavros_msgs REQUIRED)
-find_package(nav_msgs REQUIRED)
-find_package(sensor_msgs REQUIRED)
-find_package(std_msgs REQUIRED)
-find_package(std_srvs REQUIRED)
-find_package(trajectory_msgs REQUIRED)
-find_package(visualization_msgs REQUIRED)
-
-include_directories(
-  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-  $<INSTALL_INTERFACE:include>
-)
-
-include_directories(
-  ${mavlink_INCLUDE_DIRS}
-  ${EIGEN3_INCLUDE_DIRS}
-  ${GeographicLib_INCLUDE_DIRS}
-)
-
-if(rclcpp_VERSION VERSION_LESS 9.0.0)
-  add_definitions(
-    -DUSE_OLD_DECLARE_PARAMETER
-  )
-endif()
-
-if(rclcpp_VERSION VERSION_LESS 17.0.0)
-  # Humble and older
-  add_definitions(
-    -DUSE_OLD_RMW_QOS
-  )
-endif()
-
-# [[[cog:
-# import mavros_cog
-# ]]]
-# [[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)
-
-add_library(mavros_extras_plugins SHARED
-  # [[[cog:
-  # mavros_cog.outl_glob_files('src/plugins')
-  # ]]]
-  src/plugins/3dr_radio.cpp
-  src/plugins/adsb.cpp
-  src/plugins/cam_imu_sync.cpp
-  src/plugins/camera.cpp
-  src/plugins/cellular_status.cpp
-  src/plugins/companion_process_status.cpp
-  src/plugins/debug_value.cpp
-  src/plugins/distance_sensor.cpp
-  src/plugins/esc_status.cpp
-  src/plugins/esc_telemetry.cpp
-  src/plugins/fake_gps.cpp
-  src/plugins/gimbal_control.cpp
-  src/plugins/gps_input.cpp
-  src/plugins/gps_rtk.cpp
-  src/plugins/gps_status.cpp
-  src/plugins/guided_target.cpp
-  src/plugins/hil.cpp
-  src/plugins/landing_target.cpp
-  src/plugins/log_transfer.cpp
-  src/plugins/mag_calibration_status.cpp
-  src/plugins/mocap_pose_estimate.cpp
-  src/plugins/mount_control.cpp
-  src/plugins/obstacle_distance.cpp
-  src/plugins/odom.cpp
-  src/plugins/onboard_computer_status.cpp
-  src/plugins/optical_flow.cpp
-  src/plugins/play_tune.cpp
-  src/plugins/px4flow.cpp
-  src/plugins/rangefinder.cpp
-  src/plugins/terrain.cpp
-  src/plugins/trajectory.cpp
-  src/plugins/tunnel.cpp
-  src/plugins/vfr_hud.cpp
-  src/plugins/vibration.cpp
-  src/plugins/vision_pose_estimate.cpp
-  src/plugins/vision_speed_estimate.cpp
-  src/plugins/wheel_odometry.cpp
-  # [[[end]]] (checksum: 1f8cd51fa90b89b27ee35d276b5f8c83)
-)
-ament_target_dependencies(mavros_extras_plugins
-  angles
-  geometry_msgs
-  geographic_msgs
-  mavros
-  mavros_msgs
-  std_msgs
-  std_srvs
-  sensor_msgs
-  pluginlib
-  nav_msgs
-  trajectory_msgs
-  rclcpp
-  rclcpp_components
-  rcpputils
-  libmavconn
-  diagnostic_updater
-  tf2_ros
-  tf2_eigen
-  message_filters
-  Eigen3
-  yaml_cpp_vendor
-)
-pluginlib_export_plugin_description_file(mavros mavros_plugins.xml)
-
-add_library(mavros_extras SHARED
-  # [[[cog:
-  # mavros_cog.outl_glob_files('src/lib')
-  # ]]]
-  src/lib/servo_state_publisher.cpp
-  # [[[end]]] (checksum: a3ce43c71c567f697861bcbcd0f25aa3)
-)
-ament_target_dependencies(mavros_extras
-  rclcpp
-  rclcpp_components
-  std_msgs
-  sensor_msgs
-  mavros_msgs
-  #console_bridge
-  yaml_cpp_vendor
-  urdf
-)
-rclcpp_components_register_node(mavros_extras PLUGIN "mavros::extras::ServoStatePublisher" EXECUTABLE servo_state_publisher)
-
-install(TARGETS mavros_extras mavros_extras_plugins
-  EXPORT export_${PROJECT_NAME}
-  ARCHIVE DESTINATION lib
-  LIBRARY DESTINATION lib
-  RUNTIME DESTINATION lib/${PROJECT_NAME}
-)
-
-install(DIRECTORY include/
-  DESTINATION include
-)
-
-install(DIRECTORY launch
-  DESTINATION share/${PROJECT_NAME}
-)
-
-if(BUILD_TESTING)
-  find_package(ament_cmake_gtest REQUIRED)
-  find_package(ament_cmake_gmock REQUIRED)
-
-  find_package(ament_lint_auto REQUIRED)
-
-  # NOTE(vooon): Does not support our custom triple-license, tiered to make it to work.
-  list(APPEND AMENT_LINT_AUTO_EXCLUDE ament_cmake_copyright)
-
-  ament_lint_auto_find_test_dependencies()
-endif()
-
-#ament_export_dependencies(console_bridge)
-ament_export_include_directories(include)
-ament_export_libraries(mavros_extras)
-ament_export_dependencies(eigen3_cmake_module)
-ament_export_dependencies(Eigen3)
-#ament_export_targets(mavros_node)
-ament_package()
-
-# vim: ts=2 sw=2 et:
diff --git a/mavros_extras/README.md b/mavros_extras/README.md
deleted file mode 100644
index bbcc86ff..00000000
--- a/mavros_extras/README.md
+++ /dev/null
@@ -1,163 +0,0 @@
-mavros extras
-=============
-
-Some extra plugins and nodes for [mavros][mr].
-
-
-ADSB
-----
-
-Publish/subscribe to the location and information of an ADS-B vehicle.
-
-
-cam\_imu\_sync
---------------
-
-Publish camera trigger data for synchronisation of IMU and camera frames.
-
-
-debug\_value
-------------
-
-Subs/Pubs debug msgs from and to the FCU.
-
-
-distance\_sensor
-----------------
-
-Publish DISTANCE\_SENSOR message data from FCU or connected sensors in companion computer.
-
-
-fake\_gps
----------
-
-Sends fake GPS from local position estimation source data (motion capture, vision) to FCU.
-
-
-gimbal\_control
-----
-
-Adds support for Mavlink Gimbal Protocol v2.  To publish to tf, set parameter 
-tf_send=True.  The implementation of this plugin has been tested with a 
-Freefly Astro with the mapping payload as well as with Auterion Sim.  The
-plugin was built following the specifications available at 
-https://mavlink.io/en/services/gimbal_v2.html with some adaptation to better
-suit ROS2 and support tf publishing with child frame labels specified by the 
-gimbal_device_id field of gimbal_attitude_msg.  This should enable support for
-multiple gimbal devices on the target platform publishing to different leaves
-of the tf tree.  The assumed frame for each gimbal device is base_link_frd.  
-When taking control of the gimbal with the GimbalManagerConfigure, sysid_primary 
-can be set to -2, and default gimbal_device_id is 154, though 0 can be used for all
-gimbal devices.  After taking control of the gimbal, you can set RoI's or manually
-set the gimbal's orientation using the service calls provided.  The topic publishers
-for gimbal control have not been successfully validated, though this is possibly due
-to the implimentation on the Freefly Astro or with Auterion's simulator.  Feel
-free to reach out to mark.beaty@adinkratech.com with any questions or feedback on
-this plugin!
-
-
-gps\_input
------------
-
-Send GPS\_INPUT messages to the FCU.
-
-
-gps\_status
------------
-
-Publish GPS\_RAW and GPS\_RTK messages from FCU.
-
-
-gps\_rtk
---------
-
-Sends the RTCM messages to the FCU for the RTK Fix.
-
-
-log\_transfer
--------------
-
-Expose firmware functionality, that is related to log transfer
-
-
-mocap\_pose\_estimate
----------------------
-
-Send motion capture pose estimate to FCU.  Currently, not used by the FCU.
-Data can be send via `vision_position` plugin.
-
-
-obstacle\_distance
-------------------
-
-Send obstacle distance report to the FCU.
-
-
-odom
-----
-
-Send odometry to FCU from another estimator.
-
-
-px4flow
--------
-
-Publish `OPTICAL_FLOW_RAD` data from FCU or PX4Flow module.
-
-
-rangefinder
------------
-
-Publish RANGEFINDER message data from FCU sensors in companion computer.
-
-
-trajectory
-----------
-
-Receive planned path from the FCU and send back corrected path (collision free, smoothed) to the FCU.
-
-
-wheel\_odometry
----------------
-
-Compute and publish wheel odometry coming from FCU sensors.
-
-
-vibration
----------
-
-Publish VIBRATION message data from FCU.
-
-
-vision\_pose\_estimate
-----------------------
-
-Send vision pose estimate to FCU.
-
-
-vision\_speed\_estimate
------------------------
-
-Send vision speed estimate to FCU.
-
-
-companion\_process\_status
---------------------------
-
-Send companion process status report to the FCU.
-
-
-servo\_state\_publisher
------------------------
-
-Convert `mavros_msgs/RCOut` to `sensor_msgs/JointState` messages.
-It is required to bind URDF model and real servos.
-
-
-px-ros-pkg replacement
-----------------------
-
-Use `roslaunch mavros_extras px4flow.launch` for that.
-
-
-[mr]: https://github.com/mavlink/mavros
diff --git a/mavros_extras/include/mavros_extras/servo_state_publisher.hpp b/mavros_extras/include/mavros_extras/servo_state_publisher.hpp
deleted file mode 100644
index 9c62db1d..00000000
--- a/mavros_extras/include/mavros_extras/servo_state_publisher.hpp
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright 2021 Vladimir Ermakov.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Publish servo states as JointState message
- * @file
- * @author Vladimir Ermakov <vooon341@gmail.com>
- */
-
-#pragma once
-
-#ifndef MAVROS_EXTRAS__SERVO_STATE_PUBLISHER_HPP_
-#define MAVROS_EXTRAS__SERVO_STATE_PUBLISHER_HPP_
-
-#include <yaml-cpp/yaml.h>
-#include <urdf/model.h>
-
-#include <algorithm>
-#include <memory>
-#include <string>
-#include <list>
-#include <shared_mutex>  // NOLINT
-
-#include "rclcpp/macros.hpp"
-#include "rclcpp/rclcpp.hpp"
-
-#include "std_msgs/msg/string.hpp"
-#include "mavros_msgs/msg/rc_out.hpp"
-#include "sensor_msgs/msg/joint_state.hpp"
-
-namespace mavros
-{
-namespace extras
-{
-
-/**
- * ServoDescription captures configuration for one joint.
- */
-class ServoDescription
-{
-public:
-  std::string joint_name;
-  float joint_lower;
-  float joint_upper;
-
-  size_t rc_channel;
-
-  uint16_t rc_min;
-  uint16_t rc_max;
-  uint16_t rc_trim;
-  uint16_t rc_dz;
-  bool rc_rev;
-
-  explicit ServoDescription(std::string joint_name_ = {})
-  : joint_name(joint_name_),
-    joint_lower(-M_PI / 4),
-    joint_upper(M_PI / 4),
-    rc_channel(0),
-    rc_min(1000),
-    rc_max(2000),
-    rc_trim(1500),
-    rc_dz(0),
-    rc_rev(false)
-  {}
-
-  ServoDescription(urdf::Model & model, std::string joint_name_, YAML::Node config);
-
-  /**
-   * Normalization code taken from PX4 Firmware
-   * src/modules/sensors/sensors.cpp Sensors::rc_poll() line 1966
-   */
-  inline float normalize(uint16_t pwm)
-  {
-    // 1) fix bounds
-    pwm = std::max(pwm, rc_min);
-    pwm = std::min(pwm, rc_max);
-
-    // 2) scale around mid point
-    float chan;
-    if (pwm > (rc_trim + rc_dz)) {
-      chan = (pwm - rc_trim - rc_dz) / static_cast<float>(rc_max - rc_trim - rc_dz);
-    } else if (pwm < (rc_trim - rc_dz)) {
-      chan = (pwm - rc_trim + rc_dz) / static_cast<float>(rc_trim - rc_min - rc_dz);
-    } else {
-      chan = 0.0;
-    }
-
-    if (rc_rev) {
-      chan *= -1;
-    }
-
-    if (!std::isfinite(chan)) {
-      chan = 0.0;
-    }
-
-    return chan;
-  }
-
-  inline float calculate_position(uint16_t pwm)
-  {
-    float channel = normalize(pwm);
-
-    // not sure should i differently map -1..0 and 0..1
-    // for now there arduino map() (explicit)
-    float position = (channel + 1.0) * (joint_upper - joint_lower) / (1.0 + 1.0) + joint_lower;
-
-    return position;
-  }
-};
-
-/**
- * ServoStatePublisher class implements servo_state_publisher node
- *
- * That node translates RC Servo outputs to URDF Joint states
- */
-class ServoStatePublisher : public rclcpp::Node
-{
-public:
-  explicit ServoStatePublisher(const std::string & node_name = "servo_state_publisher")
-  : ServoStatePublisher(rclcpp::NodeOptions(), node_name) {}
-
-  explicit ServoStatePublisher(
-    const rclcpp::NodeOptions & options,
-    const std::string & node_name = "servo_state_publisher");
-
-private:
-  rclcpp::Subscription<std_msgs::msg::String>::SharedPtr robot_description_sub;
-  rclcpp::Subscription<mavros_msgs::msg::RCOut>::SharedPtr rc_out_sub;
-  rclcpp::Publisher<sensor_msgs::msg::JointState>::SharedPtr joint_states_pub;
-
-  std::shared_mutex mutex;
-  std::list<ServoDescription> servos;
-
-  void robot_description_cb(const std_msgs::msg::String::SharedPtr msg);
-  void rc_out_cb(const mavros_msgs::msg::RCOut::SharedPtr msg);
-};
-
-}   // namespace extras
-}   // namespace mavros
-
-#endif  // MAVROS_EXTRAS__SERVO_STATE_PUBLISHER_HPP_
diff --git a/mavros_extras/launch/px4flow.launch b/mavros_extras/launch/px4flow.launch
deleted file mode 100644
index c8ee9295..00000000
--- a/mavros_extras/launch/px4flow.launch
+++ /dev/null
@@ -1,25 +0,0 @@
-<launch>
-	<!-- vim: set ft=xml noet : -->
-	<!-- Based on mavros/node.launch -->
-	<!-- Launch script for PX4Flow -->
-
-	<arg name="fcu_url" default="serial:///dev/ttyACM0:921600" />
-	<arg name="gcs_url" default="" />
-	<arg name="tgt_system" default="81" />
-	<arg name="tgt_component" default="50" />
-
-	<node pkg="mavros" type="mavros_node" name="px4flow" required="true" clear_params="true" output="screen">
-		<param name="fcu_url" value="$(arg fcu_url)" />
-		<param name="gcs_url" value="$(arg gcs_url)" />
-		<param name="target_system_id" value="$(arg tgt_system)" />
-		<param name="target_component_id" value="$(arg tgt_component)" />
-
-		<!-- remap mavlink bridge topics -->
-		<remap from="/mavlink/to" to="/px4flow/mavlink_to" />
-		<remap from="/mavlink/from" to="/px4flow/mavlink_from" />
-
-		<!-- load blacklist, config -->
-		<rosparam command="load" file="$(find mavros_extras)/launch/px4flow_pluginlists.yaml" />
-		<rosparam command="load" file="$(find mavros_extras)/launch/px4flow_config.yaml" />
-	</node>
-</launch>
diff --git a/mavros_extras/launch/px4flow_config.yaml b/mavros_extras/launch/px4flow_config.yaml
deleted file mode 100644
index acc1e923..00000000
--- a/mavros_extras/launch/px4flow_config.yaml
+++ /dev/null
@@ -1,32 +0,0 @@
-# Common configuration for PX4Flow module
-#
-# node:
-startup_px4_usb_quirk: false
-
-# --- system plugins ---
-
-# sys_status & sys_time connection options
-conn:
-  heartbeat_rate: 1.0    # send hertbeat rate in Hertz
-  timeout: 10.0          # hertbeat timeout in seconds
-  timesync_rate: 0.0     # TIMESYNC rate in Hertz (feature disabled if 0.0)
-  system_time_rate: 1.0  # send system time to FCU rate in Hertz (disabled if 0.0)
-
-# sys_status
-sys:
-  min_voltage: 4.5   # diagnostics min voltage
-  disable_diag: true  # disable all sys_status diagnostics, except heartbeat
-
-# --- mavros extras plugins (same order) ---
-
-# image_pub
-image:
-  frame_id: "px4flow"
-
-px4flow:
-  frame_id: "px4flow"
-  ranger_fov: 0.118682      # 6.8 degree at 5 meters, 31 degrees at 1 meter
-  ranger_min_range: 0.3     # meters
-  ranger_max_range: 5.0     # meters
-
-# vim:set ts=2 sw=2 et:
diff --git a/mavros_extras/launch/px4flow_pluginlists.yaml b/mavros_extras/launch/px4flow_pluginlists.yaml
deleted file mode 100644
index e9142825..00000000
--- a/mavros_extras/launch/px4flow_pluginlists.yaml
+++ /dev/null
@@ -1,9 +0,0 @@
-plugin_blacklist:
-- '*'
-
-plugin_whitelist:
-- 'sys_*'
-- command
-- param
-- image_pub
-- px4flow
diff --git a/mavros_extras/launch/servo_state_publisher.yaml b/mavros_extras/launch/servo_state_publisher.yaml
deleted file mode 100644
index c7a21e73..00000000
--- a/mavros_extras/launch/servo_state_publisher.yaml
+++ /dev/null
@@ -1,22 +0,0 @@
-# Example config for servo_state_publisher
-# vim:set ts=2 sw=2 et:
-#
-aileron: &default
-  rc_channel: 1
-  rc_min: 1000  # for APM this values can be copied from RCx_MIN/MAX/TRIM
-  rc_max: 2000
-  rc_trim: 1500
-
-elevator:
-  <<: *default
-  rc_channel: 2
-
-# error if URDF don't define that <joint>
-throttle:
-  rc_channel: 3
-
-rudder:
-  rc_channel: 4
-  rc_min: 1100
-  rc_max: 1950  # rc_trim should calculate to 1525
-  rc_rev: true  # reverse
diff --git a/mavros_extras/mavros_plugins.xml b/mavros_extras/mavros_plugins.xml
deleted file mode 100644
index 8e2e2a50..00000000
--- a/mavros_extras/mavros_plugins.xml
+++ /dev/null
@@ -1,243 +0,0 @@
-<?xml version="1.0"?>
-<!-- [[[cog:
-import mavros_cog
-
-mavros_cog.outl_plugins_xml('src/plugins', 'mavros_extras_plugins')
-]]] -->
-<library path="mavros_extras_plugins">
-  <class name="adsb" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::ADSBPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief ADS-B Vehicle plugin
-@plugin adsb
-
-Publish/subscribe Automatic dependent surveillance-broadcast data to/from a vehicle.</description>
-  </class>
-  <class name="cam_imu_sync" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::CamIMUSyncPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Camera IMU synchronisation plugin
-@plugin cam_imu_sync
-
-This plugin publishes a timestamp for when a external camera system was
-triggered by the FCU. Sequence ID from the message and the image sequence from
-camera can be corellated to get the exact shutter trigger time.</description>
-  </class>
-  <class name="camera" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::CameraPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Camera plugin plugin
-@plugin camera
-
-Plugin for interfacing on the mavlink camera protocol
-@see command_cb()</description>
-  </class>
-  <class name="cellular_status" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::CellularStatusPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Cellular status plugin.
-@plugin cellular_status
-
-Users must publish to the topic the CellularStatus message and it
-will be relayed to the mavlink components.</description>
-  </class>
-  <class name="companion_process_status" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::CompanionProcessStatusPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Obstacle companion process status plugin
-@plugin companion_process_status
-
-Publishes the status of components running on the companion computer
-@see status_cb()</description>
-  </class>
-  <class name="debug_value" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::DebugValuePlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Plugin for Debug msgs from MAVLink API
-@plugin debug_value</description>
-  </class>
-  <class name="distance_sensor" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::DistanceSensorPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Distance sensor plugin
-@plugin distance_sensor
-
-This plugin allows publishing distance sensor data, which is connected to
-an offboard/companion computer through USB/Serial, to the FCU or vice-versa.</description>
-  </class>
-  <class name="esc_status" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::ESCStatusPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief ESC status plugin
-@plugin esc_status</description>
-  </class>
-  <class name="esc_telemetry" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::ESCTelemetryPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief ESC telemetry plugin
-@plugin esc_telemetry
-
-APM specific plugin.</description>
-  </class>
-  <class name="fake_gps" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::FakeGPSPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Fake GPS plugin.
-@plugin fake_gps
-
-Sends fake GPS from local position estimation source data (motion capture,
-vision) to FCU - processed in HIL mode or out of it if parameter MAV_USEHILGPS
-is set on PX4 Pro Autopilot Firmware; Ardupilot Firmware already supports it
-without a flag set.</description>
-  </class>
-  <class name="gimbal_control" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::GimbalControlPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Gimbal Control Plugin
-@plugin gimbal_control
-
-Adds support for Mavlink Gimbal Protocol v2.
-Also publishes gimbal pose to TF when parameter tf_send==true</description>
-  </class>
-  <class name="gps_input" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::GpsInputPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief GPS_INPUT GPS plugin.
-@plugin gps_input
-
-Sends &lt;a href=&quot;https://mavlink.io/en/messages/common.html#GPS_INPUT&quot;&gt;GPS_INPUT MAVLink messages&lt;/a&gt;</description>
-  </class>
-  <class name="gps_rtk" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::GpsRtkPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief GPS RTK plugin
-@plugin gps_rtk
-
-1. Publish the RTCM messages from ROS to the FCU
-2. Publish RTK baseline data from the FCU to ROS</description>
-  </class>
-  <class name="gps_status" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::GpsStatusPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Mavlink GPS status plugin.
-@plugin gps_status
-
-This plugin publishes GPS sensor data from a Mavlink compatible FCU to ROS.</description>
-  </class>
-  <class name="guided_target" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::GuidedTargetPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief guided target plugin
-@plugin guided_target
-
-Send and receive setpoint positions from FCU controller.</description>
-  </class>
-  <class name="hil" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::HilPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Hil plugin
-@plugin hil</description>
-  </class>
-  <class name="landing_target" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::LandingTargetPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Landing Target plugin
-@plugin landing_target
-
-This plugin is intended to publish the location of a landing area captured from a downward facing camera
-to the FCU and/or receive landing target tracking data coming from the FCU.</description>
-  </class>
-  <class name="log_transfer" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::LogTransferPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Log Transfer plugin
-@plugin log_transfer</description>
-  </class>
-  <class name="mag_calibration_status" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::MagCalStatusPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief MagCalStatus plugin.
-@plugin mag_calibration_status
-
-Example and &quot;how to&quot; for users.</description>
-  </class>
-  <class name="mocap_pose_estimate" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::MocapPoseEstimatePlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief MocapPoseEstimate plugin
-@plugin mocap_pose_estimate
-
-Sends motion capture data to FCU.</description>
-  </class>
-  <class name="mount_control" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::MountControlPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Mount Control plugin
-@plugin mount_control
-
-Publishes Mission commands to control the camera or antenna mount.
-@see command_cb()</description>
-  </class>
-  <class name="obstacle_distance" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::ObstacleDistancePlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Obstacle distance plugin
-@plugin obstacle_distance
-
-Publishes obstacle distance array to the FCU, in order to assist in an obstacle
-avoidance flight.
-@see obstacle_cb()</description>
-  </class>
-  <class name="odometry" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::OdometryPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Odometry plugin
-@plugin odometry
-
-Sends odometry data to the FCU estimator and
-publishes odometry data that comes from FCU.
-
-This plugin is following ROS REP 147. Pose is expressed in parent frame.
-(Quaternion rotates from child to parent)
-The twist is expressed in the child frame.
-
-@see odom_cb()	transforming and sending odometry to fcu
-@see handle_odom()	receiving and transforming odometry from fcu</description>
-  </class>
-  <class name="onboard_computer_status" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::OnboardComputerStatusPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Onboard Computer Status plugin
-@plugin onboard_computer_status
-
-Publishes the status of the onboard computer
-@see status_cb()</description>
-  </class>
-  <class name="optical_flow" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::OpticalFlowPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Optical Flow custom plugin
-@plugin optical_flow
-
-This plugin can publish data from OpticalFlow camera to ROS</description>
-  </class>
-  <class name="play_tune" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::PlayTunePlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Play Tune service
-@plugin play_tune</description>
-  </class>
-  <class name="px4flow" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::PX4FlowPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief PX4 Optical Flow plugin
-@plugin px4flow
-
-This plugin can publish data from PX4Flow camera to ROS</description>
-  </class>
-  <class name="rangefinder" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::RangefinderPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Ardupilot Rangefinder plugin.
-@plugin rangefinder
-
-This plugin allows publishing rangefinder sensor data from Ardupilot FCU to ROS.</description>
-  </class>
-  <class name="tdr_radio" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::TDRRadioPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief 3DR Radio plugin.
-@plugin tdr_radio</description>
-  </class>
-  <class name="terrain" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::TerrainPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Terrain height plugin.
-@plugin terrain
-
-This plugin allows publishing of terrain height estimate from FCU to ROS.</description>
-  </class>
-  <class name="trajectory" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::TrajectoryPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Trajectory plugin to receive planned path from the FCU and
-send back to the FCU a corrected path (collision free, smoothed)
-@plugin trajectory
-
-@see trajectory_cb()</description>
-  </class>
-  <class name="tunnel" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::TunnelPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Tunnel plugin
-@plugin tunnel</description>
-  </class>
-  <class name="vfr_hud" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::VfrHudPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief VFR HUD plugin.
-@plugin vfr_hud</description>
-  </class>
-  <class name="vibration" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::VibrationPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Vibration plugin
-@plugin vibration
-
-This plugin is intended to publish MAV vibration levels and accelerometer clipping from FCU.</description>
-  </class>
-  <class name="vision_pose" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::VisionPoseEstimatePlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Vision pose estimate plugin
-@plugin vision_pose
-
-Send pose estimation from various vision estimators
-to FCU position and attitude estimators.</description>
-  </class>
-  <class name="vision_speed" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::VisionSpeedEstimatePlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Vision speed estimate plugin
-@plugin vision_speed
-
-Send velocity estimation from various vision estimators
-to FCU position and attitude estimators.</description>
-  </class>
-  <class name="wheel_odometry" type="mavros::plugin::PluginFactoryTemplate&lt;mavros::extra_plugins::WheelOdometryPlugin&gt;" base_class_type="mavros::plugin::PluginFactory">
-    <description>@brief Wheel odometry plugin.
-@plugin wheel_odometry
-
-This plugin allows computing and publishing wheel odometry coming from FCU wheel encoders.
-Can use either wheel's RPM or WHEEL_DISTANCE messages (the latter gives better accuracy).</description>
-  </class>
-</library>
-<!-- [[[end]]] (checksum: b45714611896c0f7cf634dc7aaf2cbd6) -->
diff --git a/mavros_extras/package.xml b/mavros_extras/package.xml
deleted file mode 100644
index eeb0d29f..00000000
--- a/mavros_extras/package.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0"?>
-<package format="2">
-  <name>mavros_extras</name>
-  <version>2.8.0</version>
-  <description>
-    Extra nodes and plugins for <a href="http://wiki.ros.org/mavros">MAVROS</a>.
-  </description>
-
-  <maintainer email="vooon341@gmail.com">Vladimir Ermakov</maintainer>
-
-  <license>GPLv3</license>
-  <license>LGPLv3</license>
-  <license>BSD</license>
-
-  <url type="website">http://wiki.ros.org/mavros_extras</url>
-  <url type="repository">https://github.com/mavlink/mavros.git</url>
-  <url type="bugtracker">https://github.com/mavlink/src/mavros/mavros/issues</url>
-
-  <author email="vooon341@gmail.com">Vladimir Ermakov</author>
-  <author email="amilcar.lucas@iav.de">Amilcar Lucas</author>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <buildtool_depend>ament_cmake_python</buildtool_depend>
-  <buildtool_depend>eigen3_cmake_module</buildtool_depend>
-  <buildtool_export_depend>eigen3_cmake_module</buildtool_export_depend>
-
-  <!-- system dependencies -->
-  <build_depend>eigen</build_depend>
-  <build_export_depend>eigen</build_export_depend>
-  <build_depend>mavlink</build_depend>
-  <build_export_depend>mavlink</build_export_depend>
-  <build_depend>geographiclib</build_depend>
-  <build_export_depend>geographiclib</build_export_depend>
-  <build_depend>geographiclib-tools</build_depend>
-  <build_export_depend>geographiclib-tools</build_export_depend>
-
-  <!-- packages -->
-  <build_depend>angles</build_depend>
-  <depend>diagnostic_updater</depend>
-  <depend>message_filters</depend>
-  <depend>eigen_stl_containers</depend>
-  <depend>mavros</depend>
-  <depend>libmavconn</depend>
-  <depend>pluginlib</depend>
-  <depend>tf2_ros</depend>
-  <depend>tf2_eigen</depend>
-  <depend>rclcpp</depend>
-  <depend>rclcpp_components</depend>
-  <depend>rcpputils</depend>
-  <depend>urdf</depend>
-  <depend>yaml-cpp</depend>
-  <depend>yaml_cpp_vendor</depend>
-
-  <!-- message packages -->
-  <depend>diagnostic_msgs</depend>
-  <depend>geometry_msgs</depend>
-  <depend>mavros_msgs</depend>
-  <depend>nav_msgs</depend>
-  <depend>sensor_msgs</depend>
-  <depend>geographic_msgs</depend>
-  <depend>trajectory_msgs</depend>
-  <depend>std_msgs</depend>
-  <depend>std_srvs</depend>
-  <depend>visualization_msgs</depend>
-
-  <exec_depend>rosidl_default_runtime</exec_depend>
-
-  <test_depend>ament_cmake_gtest</test_depend>
-  <test_depend>ament_cmake_gmock</test_depend>
-  <test_depend>ament_lint_auto</test_depend>
-  <test_depend>ament_lint_common</test_depend>
-  <test_depend>gtest</test_depend>
-  <test_depend>google-mock</test_depend>
-
-  <export>
-    <build_type>ament_cmake</build_type>
-
-    <mavros plugin="${prefix}/mavros_plugins.xml" />
-    <rosdoc config="rosdoc.yaml" />
-    <rosindex>
-      <!-- ROSIndex metadata. Wait until <include> will work -->
-      <tags>
-        <tag>uav</tag>
-        <tag>mav</tag>
-        <tag>mavlink</tag>
-        <tag>plugin</tag>
-        <tag>apm</tag>
-        <tag>px4</tag>
-      </tags>
-    </rosindex>
-  </export>
-</package>
diff --git a/mavros_extras/rosdoc.yaml b/mavros_extras/rosdoc.yaml
deleted file mode 100644
index 8c81302e..00000000
--- a/mavros_extras/rosdoc.yaml
+++ /dev/null
@@ -1,2 +0,0 @@
-- builder: doxygen
-  exclude_patterns: '*/.git/*'
diff --git a/mavros_extras/src/lib/servo_state_publisher.cpp b/mavros_extras/src/lib/servo_state_publisher.cpp
deleted file mode 100644
index 2cb4ca46..00000000
--- a/mavros_extras/src/lib/servo_state_publisher.cpp
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright 2015,2021 Vladimir Ermakov
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Publish servo states as JointState message
- * @file
- * @author Vladimir Ermakov <vooon341@gmail.com>
- */
-
-#include <string>
-
-#include "mavros_extras/servo_state_publisher.hpp"
-
-using namespace mavros::extras;     // NOLINT
-using namespace std::placeholders;  // NOLINT
-using rclcpp::QoS;
-
-ServoDescription::ServoDescription(urdf::Model & model, std::string joint_name_, YAML::Node config)
-: ServoDescription(joint_name_)
-{
-  if (!config["rc_channel"]) {
-    throw std::invalid_argument("`rc_channel` field required");
-  }
-
-  rc_channel = config["rc_channel"].as<int>();
-  rc_min = config["rc_min"].as<int>(1000);
-  rc_max = config["rc_max"].as<int>(2000);
-
-  if (auto rc_trim_n = config["rc_trim"]; !rc_trim_n) {
-    rc_trim = rc_min + (rc_max - rc_min) / 2;
-  } else {
-    rc_trim = rc_trim_n.as<int>();
-  }
-
-  rc_dz = config["rc_dz"].as<int>(0);
-  rc_rev = config["rc_rev"].as<bool>(false);
-
-  auto joint = model.getJoint(joint_name);
-  if (!joint) {
-    throw std::runtime_error("Joint " + joint_name + " is not found in URDF");
-  }
-  if (!joint->limits) {
-    throw std::runtime_error("URDF for joint " + joint_name + " must provide <limit>");
-  }
-
-  joint_lower = joint->limits->lower;
-  joint_upper = joint->limits->upper;
-}
-
-ServoStatePublisher::ServoStatePublisher(
-  const rclcpp::NodeOptions & options,
-  const std::string & node_name)
-: rclcpp::Node(node_name, options)
-{
-  // Declare configuration parameter
-  this->declare_parameter("config", "");
-
-  auto sensor_qos = rclcpp::SensorDataQoS();
-  auto description_qos = QoS(1).transient_local();
-
-  // robot_state_publisher sends URDF in that topic
-  robot_description_sub = this->create_subscription<std_msgs::msg::String>(
-    "robot_description",
-    description_qos, std::bind(
-      &ServoStatePublisher::robot_description_cb, this,
-      _1));
-
-  // Create topics
-  rc_out_sub =
-    this->create_subscription<mavros_msgs::msg::RCOut>(
-    "rc_out", sensor_qos,
-    std::bind(&ServoStatePublisher::rc_out_cb, this, _1));
-  joint_states_pub =
-    this->create_publisher<sensor_msgs::msg::JointState>("joint_states", sensor_qos);
-}
-
-void ServoStatePublisher::robot_description_cb(const std_msgs::msg::String::SharedPtr msg)
-{
-  std::unique_lock lock(mutex);
-
-  servos.clear();
-
-  // 1. Load model
-  urdf::Model model;
-  if (!model.initString(msg->data)) {
-    throw std::runtime_error("Unable to initialize urdf::Model from robot description");
-  }
-
-  // 2. Load mapping config
-  YAML::Node root_node;
-  {
-    std::string configYaml; this->get_parameter("config", configYaml);
-    root_node = YAML::Load(configYaml);
-  }
-  if (!root_node.IsMap()) {
-    throw std::runtime_error("Mapping config must be a map");
-  }
-
-  // 3. Load servos
-  RCLCPP_INFO(get_logger(), "SSP: URDF robot: %s", model.getName().c_str());
-  for (auto it = root_node.begin(); it != root_node.end(); ++it) {
-    auto joint_name = it->first.as<std::string>();
-    RCLCPP_INFO_STREAM(get_logger(), "SSP: " << joint_name << ": Loading joint: " << it->second);
-
-    try {
-      auto joint = servos.emplace_back(model, joint_name, it->second);
-      RCLCPP_INFO(
-        get_logger(), "SSP: joint '%s' (RC%zu) loaded",
-        joint_name.c_str(), joint.rc_channel);
-    } catch (const std::exception & ex) {
-      RCLCPP_ERROR_STREAM(
-        get_logger(), "SSP: " << joint_name << ": Failed to load mapping: " << ex.what());
-    }
-  }
-}
-
-void ServoStatePublisher::rc_out_cb(const mavros_msgs::msg::RCOut::SharedPtr msg)
-{
-  std::shared_lock lock(mutex);
-
-  if (msg->channels.empty()) {
-    return;         // nothing to do
-  }
-
-  auto states = sensor_msgs::msg::JointState();
-  states.header.stamp = msg->header.stamp;
-
-  for (auto & desc : servos) {
-    if (!(desc.rc_channel != 0 && desc.rc_channel <= msg->channels.size())) {
-      continue;     // prevent crash on servos not in that message
-    }
-    uint16_t pwm = msg->channels[desc.rc_channel - 1];
-    if (pwm == 0 || pwm == UINT16_MAX) {
-      continue;     // exclude unset channels
-    }
-    states.name.emplace_back(desc.joint_name);
-    states.position.emplace_back(desc.calculate_position(pwm));
-  }
-
-  joint_states_pub->publish(states);
-}
-
-#include <rclcpp_components/register_node_macro.hpp>  // NOLINT
-RCLCPP_COMPONENTS_REGISTER_NODE(mavros::extras::ServoStatePublisher)
diff --git a/mavros_extras/src/plugins/3dr_radio.cpp b/mavros_extras/src/plugins/3dr_radio.cpp
deleted file mode 100644
index 3b8b2613..00000000
--- a/mavros_extras/src/plugins/3dr_radio.cpp
+++ /dev/null
@@ -1,192 +0,0 @@
-/*
- * Copyright 2014,2015,2016,2021 Vladimir Ermakov.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief 3DR Radio status plugin
- * @file 3dr_radio.cpp
- * @author Vladimir Ermakov <vooon341@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <memory>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/radio_status.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-
-class TDRFilter : public plugin::filter::Filter
-{
-public:
-  inline bool operator()(
-    plugin::filter::UASPtr uas, const mavlink::mavlink_message_t * cmsg,
-    const plugin::filter::Framing framing) override
-  {
-    if (cmsg->sysid != '3' || cmsg->compid != 'D') {
-      RCLCPP_WARN_THROTTLE(
-        uas->get_logger(),
-        *uas->get_clock(), 30, "RADIO_STATUS not from 3DR modem?");
-    }
-
-    return framing == plugin::filter::Framing::ok;
-  }
-};
-
-/**
- * @brief 3DR Radio plugin.
- * @plugin tdr_radio
- */
-class TDRRadioPlugin : public plugin::Plugin
-{
-public:
-  explicit TDRRadioPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "tdr_radio"),
-    has_radio_status(false),
-    diag_added(false),
-    low_rssi(0)
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "low_rssi", 40, [&](const rclcpp::Parameter & p) {
-        low_rssi = p.as_int();
-      });
-
-    auto sensor_qos = rclcpp::SensorDataQoS();
-
-    status_pub = node->create_publisher<mavros_msgs::msg::RadioStatus>("radio_status", sensor_qos);
-
-    enable_connection_cb();
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&TDRRadioPlugin::handle_radio_status),
-      make_handler(&TDRRadioPlugin::handle_radio),
-    };
-  }
-
-private:
-  bool has_radio_status;
-  bool diag_added;
-  int low_rssi;
-
-  rclcpp::Publisher<mavros_msgs::msg::RadioStatus>::SharedPtr status_pub;
-
-  std::mutex diag_mutex;
-  mavros_msgs::msg::RadioStatus::SharedPtr last_status;
-
-  /* -*- message handlers -*- */
-
-  void handle_radio_status(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::RADIO_STATUS & rst,
-    TDRFilter filter [[maybe_unused]]
-  )
-  {
-    has_radio_status = true;
-    handle_message(msg, rst);
-  }
-
-  void handle_radio(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::RADIO & rst,
-    TDRFilter filter [[maybe_unused]]
-  )
-  {
-    if (has_radio_status) {
-      return;
-    }
-
-    // actually the same data, but from earlier modems
-    handle_message(msg, rst);
-  }
-
-  template<typename msgT>
-  void handle_message(const mavlink::mavlink_message_t * mmsg [[maybe_unused]], msgT & rst)
-  {
-    auto msg = std::make_shared<mavros_msgs::msg::RadioStatus>();
-
-    msg->header.stamp = node->now();
-
-#define RST_COPY(field) msg->field = rst.field
-    RST_COPY(rssi);
-    RST_COPY(remrssi);
-    RST_COPY(txbuf);
-    RST_COPY(noise);
-    RST_COPY(remnoise);
-    RST_COPY(rxerrors);
-    RST_COPY(fixed);
-#undef RST_COPY
-
-    // valid for 3DR modem
-    msg->rssi_dbm = (rst.rssi / 1.9) - 127;
-    msg->remrssi_dbm = (rst.remrssi / 1.9) - 127;
-
-    // add diag at first event
-    if (!diag_added) {
-      uas->diagnostic_updater.add("3DR Radio", this, &TDRRadioPlugin::diag_run);
-      diag_added = true;
-    }
-
-    // store last status for diag
-    {
-      std::lock_guard<std::mutex> lock(diag_mutex);
-      last_status = msg;
-    }
-
-    status_pub->publish(*msg);
-  }
-
-
-  void diag_run(diagnostic_updater::DiagnosticStatusWrapper & stat)
-  {
-    std::lock_guard<std::mutex> lock(diag_mutex);
-
-    if (!last_status) {
-      stat.summary(2, "No data");
-      return;
-    } else if (last_status->rssi < low_rssi) {
-      stat.summary(1, "Low RSSI");
-    } else if (last_status->remrssi < low_rssi) {
-      stat.summary(1, "Low remote RSSI");
-    } else {
-      stat.summary(0, "Normal");
-    }
-
-    stat.addf("RSSI", "%u", last_status->rssi);
-    stat.addf("RSSI (dBm)", "%.1f", last_status->rssi_dbm);
-    stat.addf("Remote RSSI", "%u", last_status->remrssi);
-    stat.addf("Remote RSSI (dBm)", "%.1f", last_status->remrssi_dbm);
-    stat.addf("Tx buffer (%)", "%u", last_status->txbuf);
-    stat.addf("Noice level", "%u", last_status->noise);
-    stat.addf("Remote noice level", "%u", last_status->remnoise);
-    stat.addf("Rx errors", "%u", last_status->rxerrors);
-    stat.addf("Fixed", "%u", last_status->fixed);
-  }
-
-  void connection_cb(bool connected [[maybe_unused]]) override
-  {
-    uas->diagnostic_updater.removeByName("3DR Radio");
-    diag_added = false;
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::TDRRadioPlugin)
diff --git a/mavros_extras/src/plugins/adsb.cpp b/mavros_extras/src/plugins/adsb.cpp
deleted file mode 100644
index 92ffd20c..00000000
--- a/mavros_extras/src/plugins/adsb.cpp
+++ /dev/null
@@ -1,171 +0,0 @@
-/*
- * Copyright 2017 Nuno Marques.
- * Copyright 2021 Vladimir Ermakov.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Automatic dependent surveillance-broadcast Vehicle plugin
- * @file adsb.cpp
- * @author Nuno Marques <n.marques21@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/rc_in.hpp"
-#include "mavros_msgs/msg/rc_out.hpp"
-#include "mavros_msgs/msg/adsb_vehicle.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using mavlink::common::ADSB_EMITTER_TYPE;
-using mavlink::common::ADSB_ALTITUDE_TYPE;
-
-/**
- * @brief ADS-B Vehicle plugin
- * @plugin adsb
- *
- * Publish/subscribe Automatic dependent surveillance-broadcast data to/from a vehicle.
- */
-class ADSBPlugin : public plugin::Plugin
-{
-public:
-  explicit ADSBPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "adsb")
-  {
-    adsb_pub = node->create_publisher<mavros_msgs::msg::ADSBVehicle>("~/vehicle", 10);
-    adsb_sub =
-      node->create_subscription<mavros_msgs::msg::ADSBVehicle>(
-      "~/send", 10,
-      std::bind(&ADSBPlugin::adsb_cb, this, std::placeholders::_1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&ADSBPlugin::handle_adsb)
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::ADSBVehicle>::SharedPtr adsb_pub;
-  rclcpp::Subscription<mavros_msgs::msg::ADSBVehicle>::SharedPtr adsb_sub;
-
-  void handle_adsb(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::ADSB_VEHICLE & adsb,
-    plugin::filter::SystemAndOk filter [[maybe_unused]]
-  )
-  {
-    auto adsb_msg = mavros_msgs::msg::ADSBVehicle();
-
-    // TODO(vooon): request add time_boot_ms to msg definition
-    adsb_msg.header.stamp = node->now();
-
-    // [[[cog:
-    // def ent(ros, mav=None, scale=None, to_ros=None, to_mav=None):
-    //     return (ros, mav or ros, scale, to_ros, to_mav)
-    //
-    // TR_TAB = (
-    // ent('icao_address', 'ICAO_address'),
-    // ent('callsign', to_ros='mavlink::to_string({mm}.{mav})',
-    //   to_mav='mavlink::set_string_z({mm}.{mav}, {rmp}->{ros})'),
-    // ent('latitude', 'lat', '1e7'),
-    // ent('longitude', 'lon', '1e7'),
-    // ent('altitude', 'altitude', '1e3'),
-    // ent('altitude_type', ),
-    // ent('heading', scale='1e2'),
-    // ent('hor_velocity', scale='1e2'),
-    // ent('ver_velocity', scale='1e2'),
-    // ent('altitude_type'),
-    // ent('emitter_type'),
-    // ent('tslc', to_ros='rclcpp::Duration({mm}.{mav}, 0)',
-    //   to_mav='{mm}.{mav} = {rmp}->{ros}.sec'),
-    // ent('flags'),
-    // ent('squawk'),
-    // )
-    //
-    // for ros, mav, scale, to_ros, _ in TR_TAB:
-    //     if to_ros is None:
-    //         scale_ex = '' if scale is None else ' / ' + scale
-    //         cog.outl(f"""adsb_msg.{ros} = adsb.{mav}{scale_ex};""")
-    //     else:
-    //         cog.outl(f"""adsb_msg.{ros} = {to_ros.format(mm='adsb', **locals())};""")
-    // ]]]
-    adsb_msg.icao_address = adsb.ICAO_address;
-    adsb_msg.callsign = mavlink::to_string(adsb.callsign);
-    adsb_msg.latitude = adsb.lat / 1e7;
-    adsb_msg.longitude = adsb.lon / 1e7;
-    adsb_msg.altitude = adsb.altitude / 1e3;
-    adsb_msg.altitude_type = adsb.altitude_type;
-    adsb_msg.heading = adsb.heading / 1e2;
-    adsb_msg.hor_velocity = adsb.hor_velocity / 1e2;
-    adsb_msg.ver_velocity = adsb.ver_velocity / 1e2;
-    adsb_msg.altitude_type = adsb.altitude_type;
-    adsb_msg.emitter_type = adsb.emitter_type;
-    adsb_msg.tslc = rclcpp::Duration(adsb.tslc, 0);
-    adsb_msg.flags = adsb.flags;
-    adsb_msg.squawk = adsb.squawk;
-    // [[[end]]] (checksum: ae8f818682cc2c23db50504f5af97127)
-
-    RCLCPP_DEBUG_STREAM(
-      get_logger(),
-      "ADSB: recv type: " << utils::to_string_enum<ADSB_ALTITUDE_TYPE>(adsb.altitude_type) <<
-        " emitter: " << utils::to_string_enum<ADSB_EMITTER_TYPE>(adsb.emitter_type) <<
-        " flags: 0x" << std::hex << adsb.flags);
-
-    adsb_pub->publish(adsb_msg);
-  }
-
-  void adsb_cb(const mavros_msgs::msg::ADSBVehicle::SharedPtr req)
-  {
-    mavlink::common::msg::ADSB_VEHICLE adsb{};
-
-    // [[[cog:
-    // for ros, mav, scale, _, to_mav in TR_TAB:
-    //     if to_mav is None:
-    //         scale_ex = '' if scale is None else ' * ' + scale
-    //         cog.outl(f"""adsb.{mav} = req->{ros}{scale_ex};""")
-    //     else:
-    //         cog.outl(to_mav.format(mm='adsb', rmp='req', **locals()) + ';')
-    // ]]]
-    adsb.ICAO_address = req->icao_address;
-    mavlink::set_string_z(adsb.callsign, req->callsign);
-    adsb.lat = req->latitude * 1e7;
-    adsb.lon = req->longitude * 1e7;
-    adsb.altitude = req->altitude * 1e3;
-    adsb.altitude_type = req->altitude_type;
-    adsb.heading = req->heading * 1e2;
-    adsb.hor_velocity = req->hor_velocity * 1e2;
-    adsb.ver_velocity = req->ver_velocity * 1e2;
-    adsb.altitude_type = req->altitude_type;
-    adsb.emitter_type = req->emitter_type;
-    adsb.tslc = req->tslc.sec;
-    adsb.flags = req->flags;
-    adsb.squawk = req->squawk;
-    // [[[end]]] (checksum: e586b680a3d86ec594e5b7f4a59bbe6c)
-
-    RCLCPP_DEBUG_STREAM(
-      get_logger(),
-      "ADSB: send type: " << utils::to_string_enum<ADSB_ALTITUDE_TYPE>(adsb.altitude_type) <<
-        " emitter: " << utils::to_string_enum<ADSB_EMITTER_TYPE>(adsb.emitter_type) <<
-        " flags: 0x" << std::hex << adsb.flags);
-
-    uas->send_message(adsb);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::ADSBPlugin)
diff --git a/mavros_extras/src/plugins/cam_imu_sync.cpp b/mavros_extras/src/plugins/cam_imu_sync.cpp
deleted file mode 100644
index 5c45d0f0..00000000
--- a/mavros_extras/src/plugins/cam_imu_sync.cpp
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright 2015 Mohammed Kabir.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Camera IMU synchronisation plugin
- * @file cam_imu_sync.cpp
- * @author Mohammed Kabir < mhkabir98@gmail.com >
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/cam_imu_stamp.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-/**
- * @brief Camera IMU synchronisation plugin
- * @plugin cam_imu_sync
- *
- * This plugin publishes a timestamp for when a external camera system was
- * triggered by the FCU. Sequence ID from the message and the image sequence from
- * camera can be corellated to get the exact shutter trigger time.
- */
-class CamIMUSyncPlugin : public plugin::Plugin
-{
-public:
-  explicit CamIMUSyncPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "cam_imu_sync")
-  {
-    cam_imu_pub = node->create_publisher<mavros_msgs::msg::CamIMUStamp>("~/cam_imu_stamp", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&CamIMUSyncPlugin::handle_cam_trig)
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::CamIMUStamp>::SharedPtr cam_imu_pub;
-
-  void handle_cam_trig(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::CAMERA_TRIGGER & ctrig,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto sync_msg = mavros_msgs::msg::CamIMUStamp();
-
-    sync_msg.frame_stamp = uas->synchronise_stamp(ctrig.time_usec);
-    sync_msg.frame_seq_id = ctrig.seq;
-
-    cam_imu_pub->publish(sync_msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::CamIMUSyncPlugin)
diff --git a/mavros_extras/src/plugins/camera.cpp b/mavros_extras/src/plugins/camera.cpp
deleted file mode 100644
index 5a78af87..00000000
--- a/mavros_extras/src/plugins/camera.cpp
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright 2021 Jaeyoung Lim.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Camera plugin
- * @file camera.cpp
- * @author Jaeyoung Lim <jalim@ethz.ch>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/camera_image_captured.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-
-//! Mavlink enumerations
-using mavlink::common::MAV_CMD;
-using utils::enum_value;
-
-/**
- * @brief Camera plugin plugin
- * @plugin camera
- *
- * Plugin for interfacing on the mavlink camera protocol
- * @see command_cb()
- */
-class CameraPlugin : public plugin::Plugin
-{
-public:
-  explicit CameraPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "camera")
-  {
-    camera_image_captured_pub = node->create_publisher<mavros_msgs::msg::CameraImageCaptured>(
-      "~/image_captured", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&CameraPlugin::handle_camera_image_captured)
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::CameraImageCaptured>::SharedPtr camera_image_captured_pub;
-
-  /**
-   * @brief Publish camera image capture information
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#CAMERA_IMAGE_CAPTURED
-   * @param msg   the mavlink message
-   * @param mo	received CAMERA_IMAGE_CAPTURED msg
-   */
-  void handle_camera_image_captured(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::CAMERA_IMAGE_CAPTURED & mo,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto ic = mavros_msgs::msg::CameraImageCaptured();
-
-    ic.header.stamp = uas->synchronise_stamp(mo.time_boot_ms);
-    ic.geo.latitude = mo.lat / 1E7;
-    ic.geo.longitude = mo.lon / 1E7;    // deg
-    ic.geo.altitude = mo.alt / 1E3 + uas->data.geoid_to_ellipsoid_height(&ic.geo);  // in meters
-    ic.relative_alt = mo.relative_alt / 1E3;
-    ic.orientation = tf2::toMsg(ftf::mavlink_to_quaternion(mo.q));
-    ic.image_index = mo.image_index;
-    ic.capture_result = mo.capture_result;
-    ic.file_url = mavlink::to_string(mo.file_url);
-
-    camera_image_captured_pub->publish(ic);
-  }
-};
-
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::CameraPlugin)
diff --git a/mavros_extras/src/plugins/cellular_status.cpp b/mavros_extras/src/plugins/cellular_status.cpp
deleted file mode 100644
index 82fef560..00000000
--- a/mavros_extras/src/plugins/cellular_status.cpp
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Copyright 2021 Jaeyoung Lim.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Cellular status plugin
- * @file cellular_status.cpp
- * @author Rui Mendes <rui.mendes@beyond-vision.pt>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/cellular_status.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Cellular status plugin.
- * @plugin cellular_status
- *
- * Users must publish to the topic the CellularStatus message and it
- * will be relayed to the mavlink components.
- */
-class CellularStatusPlugin : public plugin::Plugin
-{
-public:
-  explicit CellularStatusPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "cellular_status")
-  {
-    sub_status = node->create_subscription<mavros_msgs::msg::CellularStatus>(
-      "~/status", 1, std::bind(
-        &CellularStatusPlugin::status_cb, this,
-        _1));
-  }
-
-  Subscriptions get_subscriptions()
-  {
-    return {};
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::CellularStatus>::SharedPtr sub_status;
-
-  /**
-   * @brief Send Cellular Status messages to mavlink system
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#CELLULAR_STATUS
-   * @param msg	received CellularStatus msg
-   */
-  void status_cb(const mavros_msgs::msg::CellularStatus::SharedPtr msg)
-  {
-    mavlink::common::msg::CELLULAR_STATUS cs{};
-
-    cs.status = msg->status;
-    cs.failure_reason = msg->failure_reason;
-    cs.type = msg->type;
-    cs.quality = msg->quality;
-    cs.mcc = msg->mcc;
-    cs.mnc = msg->mnc;
-    cs.lac = msg->lac;
-
-    uas->send_message(cs);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::CellularStatusPlugin)
diff --git a/mavros_extras/src/plugins/companion_process_status.cpp b/mavros_extras/src/plugins/companion_process_status.cpp
deleted file mode 100644
index acd3adf6..00000000
--- a/mavros_extras/src/plugins/companion_process_status.cpp
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright 2018 Tanja Baumann.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Companion Status plugin
- * @file companion_status.cpp
- * @author Tanja Baumann <tanja@auterion.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/companion_process_status.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-
-//! Mavlink enumerations
-using mavlink::minimal::MAV_TYPE;
-using mavlink::minimal::MAV_STATE;
-using mavlink::minimal::MAV_COMPONENT;
-using mavlink::minimal::MAV_AUTOPILOT;
-using mavlink::minimal::MAV_MODE_FLAG;
-using utils::enum_value;
-
-/**
- * @brief Obstacle companion process status plugin
- * @plugin companion_process_status
- *
- * Publishes the status of components running on the companion computer
- * @see status_cb()
- */
-class CompanionProcessStatusPlugin : public plugin::Plugin
-{
-public:
-  explicit CompanionProcessStatusPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "companion_process")
-  {
-    status_sub = node->create_subscription<mavros_msgs::msg::CompanionProcessStatus>(
-      "~/status", 10, std::bind(
-        &CompanionProcessStatusPlugin::status_cb, this,
-        std::
-        placeholders::_1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::CompanionProcessStatus>::SharedPtr status_sub;
-
-  /**
-   * @brief Send companion process status to FCU over a heartbeat message
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#HEARTBEAT
-   * @param req	received CompanionProcessStatus msg
-   */
-  void status_cb(const mavros_msgs::msg::CompanionProcessStatus::SharedPtr req)
-  {
-    mavlink::minimal::msg::HEARTBEAT heartbeat {};
-
-    heartbeat.type = enum_value(MAV_TYPE::ONBOARD_CONTROLLER);
-    heartbeat.autopilot = enum_value(MAV_AUTOPILOT::PX4);
-    heartbeat.base_mode = enum_value(MAV_MODE_FLAG::CUSTOM_MODE_ENABLED);
-    heartbeat.system_status = req->state;               // enum="MAV_STATE" System status flag
-
-    RCLCPP_DEBUG_STREAM(
-      get_logger(),
-      "companion process component id: " << utils::to_string_enum<MAV_COMPONENT>(req->component) <<
-        " companion process status: " << utils::to_string_enum<MAV_STATE>(
-        heartbeat.system_status) << std::endl << heartbeat.to_yaml());
-
-    uas->send_message(heartbeat, req->component);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::CompanionProcessStatusPlugin)
diff --git a/mavros_extras/src/plugins/debug_value.cpp b/mavros_extras/src/plugins/debug_value.cpp
deleted file mode 100644
index 06642908..00000000
--- a/mavros_extras/src/plugins/debug_value.cpp
+++ /dev/null
@@ -1,365 +0,0 @@
-/*
- * Copyright 2017 Nuno Marques.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Debug messages plugin
- * @file debug_value.cpp
- * @author Nuno Marques <n.marques21@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-#include <string>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/debug_value.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;  // NOLINT
-
-/**
- * @brief Plugin for Debug msgs from MAVLink API
- * @plugin debug_value
- */
-class DebugValuePlugin : public plugin::Plugin
-{
-public:
-  explicit DebugValuePlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "debug_value")
-  {
-    // subscribers
-    debug_sub =
-      node->create_subscription<DV>(
-      "~/send", 10,
-      std::bind(&DebugValuePlugin::debug_cb, this, _1));
-
-    // publishers
-    debug_pub = node->create_publisher<DV>("~/debug", 10);
-    debug_vector_pub = node->create_publisher<DV>("~/debug_vector", 10);
-    debug_float_array_pub = node->create_publisher<DV>("~/debug_float_array", 10);
-    named_value_float_pub = node->create_publisher<DV>("~/named_value_float", 10);
-    named_value_int_pub = node->create_publisher<DV>("~/named_value_int", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&DebugValuePlugin::handle_debug),
-      make_handler(&DebugValuePlugin::handle_debug_vector),
-      make_handler(&DebugValuePlugin::handle_debug_float_array),
-      make_handler(&DebugValuePlugin::handle_named_value_float),
-      make_handler(&DebugValuePlugin::handle_named_value_int)
-    };
-  }
-
-private:
-  using DV = mavros_msgs::msg::DebugValue;
-
-  rclcpp::Subscription<DV>::SharedPtr debug_sub;
-
-  rclcpp::Publisher<DV>::SharedPtr debug_pub;
-  rclcpp::Publisher<DV>::SharedPtr debug_vector_pub;
-  rclcpp::Publisher<DV>::SharedPtr debug_float_array_pub;
-  rclcpp::Publisher<DV>::SharedPtr named_value_float_pub;
-  rclcpp::Publisher<DV>::SharedPtr named_value_int_pub;
-
-  /* -*- helpers -*- */
-
-  /**
-   * @brief Helper function to log debug messages
-   * @param type    Type of debug message
-   * @param dv      Data value
-   */
-  void debug_logger(const std::string & type, const DV & dv)
-  {
-    std::string name = (dv.name == "") ? "UNK" : dv.name;
-
-    std::ostringstream ss;
-    if (dv.type == DV::TYPE_NAMED_VALUE_INT) {
-      ss << dv.value_int;
-    } else if (dv.type == DV::TYPE_DEBUG_VECT) {
-      ss << "[";
-      bool is_first = true;
-      for (auto v : dv.data) {
-        if (!is_first) {
-          ss << ", ";
-        }
-
-        ss << v;
-        is_first = false;
-      }
-
-      ss << "]";
-    } else {
-      ss << dv.value_float;
-    }
-
-    RCLCPP_DEBUG_STREAM(
-      get_logger(),
-      type << "\t" <<
-        dv.header.stamp.sec << "." << dv.header.stamp.nanosec << "\t" <<
-        name << "\t[" <<
-        dv.index << "]\tvalue:" <<
-        ss.str());
-  }
-
-  /* -*- message handlers -*- */
-
-  /**
-   * @brief Handle DEBUG message.
-   * Message specification: https://mavlink.io/en/messages/common.html#DEBUG
-   * @param msg     Received Mavlink msg
-   * @param debug   DEBUG msg
-   */
-  void handle_debug(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::DEBUG & debug,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // [[[cog:
-    // p = "dv_msg"
-    // val = "debug"
-    //
-    // def common_filler(type_, time_f, index, name, disable_array_id = True):
-    //     if isinstance(index, str):
-    //         index = val + "." + index
-    //
-    //     cog.outl(f"""DV {p};""")
-    //     cog.outl(f"""{p}.header.stamp = uas->synchronise_stamp({val}.{time_f});""")
-    //     cog.outl(f"""{p}.type = DV::{type_};""")
-    //     cog.outl(f"""{p}.index = {index};""")
-    //     if disable_array_id:
-    //         cog.outl(f"""{p}.array_id = -1;""")
-    //     if name:
-    //         cog.outl(f"""{p}.name = mavlink::to_string({val}.{name});""")
-    //
-    // common_filler("TYPE_DEBUG", "time_boot_ms", "ind", None)
-    // cog.outl(f"""{p}.value_float = {val}.value;""")
-    // ]]]
-    DV dv_msg;
-    dv_msg.header.stamp = uas->synchronise_stamp(debug.time_boot_ms);
-    dv_msg.type = DV::TYPE_DEBUG;
-    dv_msg.index = debug.ind;
-    dv_msg.array_id = -1;
-    dv_msg.value_float = debug.value;
-    // [[[end]]] (checksum: ef695729241176edd2e06592ed20549b)
-
-    debug_logger(debug.get_name(), dv_msg);
-    debug_pub->publish(dv_msg);
-  }
-
-  /**
-   * @brief Handle DEBUG_VECT message.
-   * Message specification: https://mavlink.io/en/messages/common.html#DEBUG_VECT
-   * @param msg     Received Mavlink msg
-   * @param debug   DEBUG_VECT msg
-   */
-  void handle_debug_vector(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::DEBUG_VECT & debug,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // [[[cog:
-    // common_filler("TYPE_DEBUG_VECT", "time_usec", -1, "name")
-    //
-    // fields = "xyz"
-    // pd = p + ".data"
-    // cog.outl(f"""{pd}.resize({len(fields)});""")
-    // for i, f in enumerate(fields):
-    //     cog.outl(f"""{pd}[{i}] = {val}.{f};""")
-    // ]]]
-    DV dv_msg;
-    dv_msg.header.stamp = uas->synchronise_stamp(debug.time_usec);
-    dv_msg.type = DV::TYPE_DEBUG_VECT;
-    dv_msg.index = -1;
-    dv_msg.array_id = -1;
-    dv_msg.name = mavlink::to_string(debug.name);
-    dv_msg.data.resize(3);
-    dv_msg.data[0] = debug.x;
-    dv_msg.data[1] = debug.y;
-    dv_msg.data[2] = debug.z;
-    // [[[end]]] (checksum: 8abb1284bdb29874a87fee9808570f05)
-
-    debug_logger(debug.get_name(), dv_msg);
-    debug_vector_pub->publish(dv_msg);
-  }
-
-  /**
-   * @brief Handle DEBUG_FLOAT_ARRAY message.
-   * Message specification: https://mavlink.io/en/messages/common.html#DEBUG_FLOAT_ARRAY
-   * @param msg	Received Mavlink msg
-   * @param debug	DEBUG_FLOAT_ARRAY msg
-   */
-  void handle_debug_float_array(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::DEBUG_FLOAT_ARRAY & debug,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // [[[cog:
-    // common_filler("TYPE_DEBUG_FLOAT_ARRAY", "time_usec", -1, "name", False)
-    //
-    // cog.outl("{p}.array_id = {val}.array_id;".format(**locals()))
-    // cog.outl("{p}.data.assign({val}.data.begin(), {val}.data.end());".format(**locals()))
-    // ]]]
-    DV dv_msg;
-    dv_msg.header.stamp = uas->synchronise_stamp(debug.time_usec);
-    dv_msg.type = DV::TYPE_DEBUG_FLOAT_ARRAY;
-    dv_msg.index = -1;
-    dv_msg.name = mavlink::to_string(debug.name);
-    dv_msg.array_id = debug.array_id;
-    dv_msg.data.assign(debug.data.begin(), debug.data.end());
-    // [[[end]]] (checksum: e13bbba22bff5b74db32092d8787c6b4)
-
-    debug_logger(debug.get_name(), dv_msg);
-    debug_float_array_pub->publish(dv_msg);
-  }
-
-  /**
-   * @brief Handle NAMED_VALUE_FLOAT message.
-   * Message specification: https://mavlink.io/en/messages/common.html#NAMED_VALUE_FLOAT
-   * @param msg     Received Mavlink msg
-   * @param value   NAMED_VALUE_FLOAT msg
-   */
-  void handle_named_value_float(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::NAMED_VALUE_FLOAT & value,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // [[[cog:
-    // val="value"
-    // common_filler("TYPE_NAMED_VALUE_FLOAT", "time_boot_ms", -1, "name")
-    // cog.outl(f"""{p}.value_float = {val}.value;""")
-    // ]]]
-    DV dv_msg;
-    dv_msg.header.stamp = uas->synchronise_stamp(value.time_boot_ms);
-    dv_msg.type = DV::TYPE_NAMED_VALUE_FLOAT;
-    dv_msg.index = -1;
-    dv_msg.array_id = -1;
-    dv_msg.name = mavlink::to_string(value.name);
-    dv_msg.value_float = value.value;
-    // [[[end]]] (checksum: 8c243c3e607db7bf0758cd4ac3aca976)
-
-    debug_logger(value.get_name(), dv_msg);
-    named_value_float_pub->publish(dv_msg);
-  }
-
-  /**
-   * @brief Handle NAMED_VALUE_INT message.
-   * Message specification: https://mavlink.io/en/messages/common.html#NAMED_VALUE_INT
-   * @param msg     Received Mavlink msg
-   * @param value   NAMED_VALUE_INT msg
-   */
-  void handle_named_value_int(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::NAMED_VALUE_INT & value,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // [[[cog:
-    // common_filler("TYPE_NAMED_VALUE_INT", "time_boot_ms", -1, "name")
-    // cog.outl(f"""{p}.value_int = {val}.value;""")
-    // ]]]
-    DV dv_msg;
-    dv_msg.header.stamp = uas->synchronise_stamp(value.time_boot_ms);
-    dv_msg.type = DV::TYPE_NAMED_VALUE_INT;
-    dv_msg.index = -1;
-    dv_msg.array_id = -1;
-    dv_msg.name = mavlink::to_string(value.name);
-    dv_msg.value_int = value.value;
-    // [[[end]]] (checksum: 32cb48d5dad85c622997aeb6d34c255e)
-
-    debug_logger(value.get_name(), dv_msg);
-    named_value_int_pub->publish(dv_msg);
-  }
-
-  /* -*- callbacks -*- */
-
-  /**
-   * @brief Debug callbacks
-   * @param req     pointer to mavros_msgs/Debug.msg being published
-   */
-  void debug_cb(const mavros_msgs::msg::DebugValue::SharedPtr req)
-  {
-    switch (req->type) {
-      case DV::TYPE_DEBUG: {
-          mavlink::common::msg::DEBUG debug {};
-
-          debug.time_boot_ms = get_time_boot_ms(req->header.stamp);
-          debug.ind = req->index;
-          debug.value = req->value_float;
-
-          uas->send_message(debug);
-          break;
-        }
-      case DV::TYPE_DEBUG_VECT: {
-          mavlink::common::msg::DEBUG_VECT debug {};
-
-          debug.time_usec = get_time_usec(req->header.stamp);
-          mavlink::set_string(debug.name, req->name);
-          // [[[cog:
-          // for i, f in enumerate("xyz"):
-          //     cog.outl(f"debug.{f} = req->data[{i}];")
-          // ]]]
-          debug.x = req->data[0];
-          debug.y = req->data[1];
-          debug.z = req->data[2];
-          // [[[end]]] (checksum: e3359b14c75adf35f430840dcf01ef18)
-
-          uas->send_message(debug);
-          break;
-        }
-      case DV::TYPE_DEBUG_FLOAT_ARRAY: {
-          mavlink::common::msg::DEBUG_FLOAT_ARRAY debug {};
-
-          debug.time_usec = get_time_usec(req->header.stamp);
-          mavlink::set_string(debug.name, req->name);
-          std::copy_n(
-            req->data.begin(), std::min(req->data.size(), debug.data.size()),
-            std::begin(debug.data));
-
-          uas->send_message(debug);
-          break;
-        }
-      case DV::TYPE_NAMED_VALUE_FLOAT: {
-          mavlink::common::msg::NAMED_VALUE_FLOAT value {};
-
-          value.time_boot_ms = get_time_boot_ms(req->header.stamp);
-          mavlink::set_string(value.name, req->name);
-          value.value = req->value_float;
-
-          uas->send_message(value);
-          break;
-        }
-      case DV::TYPE_NAMED_VALUE_INT: {
-          mavlink::common::msg::NAMED_VALUE_INT value {};
-
-          value.time_boot_ms = get_time_boot_ms(req->header.stamp);
-          mavlink::set_string(value.name, req->name);
-          value.value = req->value_int;
-
-          uas->send_message(value);
-          break;
-        }
-      default:
-        RCLCPP_ERROR(get_logger(), "Wrong debug type (%d). Droping!...", req->type);
-        return;
-    }
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::DebugValuePlugin)
diff --git a/mavros_extras/src/plugins/distance_sensor.cpp b/mavros_extras/src/plugins/distance_sensor.cpp
deleted file mode 100644
index 21b6d236..00000000
--- a/mavros_extras/src/plugins/distance_sensor.cpp
+++ /dev/null
@@ -1,501 +0,0 @@
-/*
- * Copyright 2015 Nuno Marques.
- * Copyright 2021 Vladimir Ermakov
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Distance Sensor plugin
- * @file distance_sensor.cpp
- * @author Nuno Marques <n.marques21@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <yaml-cpp/yaml.h>
-
-#include <unordered_map>
-#include <string>
-#include <memory>
-#include <vector>
-#include <shared_mutex>     // NOLINT cpplint, that is almost 4 years since standard release!
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "sensor_msgs/msg/range.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-using utils::enum_value;
-using sensor_msgs::msg::Range;
-
-class DistanceSensorPlugin;
-
-/**
- * @brief Distance sensor mapping storage item
- */
-class DistanceSensorItem : public std::enable_shared_from_this<DistanceSensorItem>
-{
-public:
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-  explicit DistanceSensorItem(
-    DistanceSensorPlugin * owner_, std::string topic_name_,
-    YAML::Node config);
-
-private:
-  friend class DistanceSensorPlugin;
-
-  // params
-  bool is_subscriber;           //!< this item is a subscriber, else is a publisher
-  bool send_tf;                 //!< defines if a transform is sent or not
-  uint8_t sensor_id;            //!< id of the sensor
-  double field_of_view;         //!< FOV of the sensor
-  Eigen::Vector3d position;     //!< sensor position
-  int orientation;              //!< check orientation of sensor if != -1
-  int covariance;               //!< in centimeters, current specification
-  std::string frame_id;         //!< frame id for send
-  double horizontal_fov_ratio;      //!< horizontal fov ratio for ROS messages
-  double vertical_fov_ratio;        //!< vertical fov ratio for ROS messages
-  Eigen::Quaternionf quaternion;    //!< Orientation in vehicle body frame for ROTATION_CUSTOM
-
-  // topic handle
-  rclcpp::Publisher<Range>::SharedPtr pub;
-  rclcpp::Subscription<Range>::SharedPtr sub;
-  std::string topic_name;
-
-  DistanceSensorPlugin * owner;
-
-  std::vector<float> data;              //!< array allocation for measurements
-  size_t data_index;                    //!< array index
-
-  static constexpr size_t ACC_SIZE = 50;
-
-  /**
-   * Calculate measurements variance to send to the FCU.
-   */
-  float calculate_variance(float range)
-  {
-    if (data.size() < ACC_SIZE) {
-      // limits the size of the array to 50 elements
-      data.reserve(ACC_SIZE);
-      data.push_back(range);
-    } else {
-      // it starts rewriting the values from 1st element
-      data[data_index] = range;
-      if (++data_index > ACC_SIZE - 1) {
-        // restarts the index when achieves the last element
-        data_index = 0;
-      }
-    }
-
-    float average, variance, sum = 0, sum_ = 0;
-
-    /*  Compute the sum of all elements */
-    for (auto d : data) {
-      sum += d;
-    }
-
-    average = sum / data.size();
-
-    /*  Compute the variance */
-    for (auto d : data) {
-      sum_ += (d - average) * (d - average);
-    }
-
-    variance = sum_ / data.size();
-
-    return variance;
-  }
-
-  //! Copy of Plugin::get_time_boot_ms() because it is private.
-  inline uint32_t get_time_boot_ms(const builtin_interfaces::msg::Time & t)
-  {
-    return rclcpp::Time(t).nanoseconds() / 1000000;
-  }
-
-  //! sensor_msgs/Range subscription callback
-  void range_cb(const Range::SharedPtr msg);
-};
-
-
-/**
- * @brief Distance sensor plugin
- * @plugin distance_sensor
- *
- * This plugin allows publishing distance sensor data, which is connected to
- * an offboard/companion computer through USB/Serial, to the FCU or vice-versa.
- */
-class DistanceSensorPlugin : public plugin::Plugin
-{
-public:
-  explicit DistanceSensorPlugin(plugin::UASPtr uas_)
-  : plugin::Plugin(uas_, "distance_sensor")
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "base_frame_id", "base_link", [&](const rclcpp::Parameter & p) {
-        base_frame_id = p.as_string();
-      });
-    node_declare_and_watch_parameter(
-      "config", "", [&](const rclcpp::Parameter & p) {
-        std::unique_lock lock(mutex);
-
-        sensor_map.clear();
-
-        auto lg = get_logger();
-        YAML::Node root_node;
-
-        try {
-          root_node = YAML::Load(p.as_string());
-        } catch (const YAML::ParserException & ex) {
-          RCLCPP_ERROR_STREAM(lg, "DS: Failed to parse config: " << ex.what());
-          return;
-        }
-
-        if (root_node.IsNull()) {
-          RCLCPP_INFO(lg, "DS: Plugin not configured!");
-          return;
-        } else if (!root_node.IsMap()) {
-          RCLCPP_ERROR(lg, "DS: Config must be a map.");
-          return;
-        }
-
-        for (auto it = root_node.begin(); it != root_node.end(); ++it) {
-          auto key_s = it->first.as<std::string>();
-          RCLCPP_INFO_STREAM(lg, "DS: " << key_s << ": Loading config: " << it->second);
-
-          try {
-            auto item = std::make_shared<DistanceSensorItem>(this, key_s, it->second);
-            sensor_map[item->sensor_id] = item;
-          } catch (const std::exception & ex) {
-            RCLCPP_ERROR_STREAM(lg, "DS: " << key_s << ": Failed to load mapping: " << ex.what());
-          }
-        }
-      });
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&DistanceSensorPlugin::handle_distance_sensor),
-    };
-  }
-
-private:
-  friend class DistanceSensorItem;
-  using ItemPtr = std::shared_ptr<DistanceSensorItem>;
-
-  std::string base_frame_id;
-
-  std::shared_mutex mutex;
-  std::unordered_map<uint8_t, ItemPtr> sensor_map;
-
-  /* -*- low-level send -*- */
-  void distance_sensor(
-    uint32_t time_boot_ms,
-    uint32_t min_distance,
-    uint32_t max_distance,
-    uint32_t current_distance,
-    uint8_t type, uint8_t id,
-    uint8_t orientation, uint8_t covariance,
-    float horizontal_fov, float vertical_fov,
-    std::array<float, 4> quaternion, uint8_t signal_quality)
-  {
-    mavlink::common::msg::DISTANCE_SENSOR ds = {};
-
-    // [[[cog:
-    // for f in ('time_boot_ms',
-    //     'min_distance',
-    //     'max_distance',
-    //     'current_distance',
-    //     'type',
-    //     'id',
-    //     'orientation',
-    //     'covariance',
-    //     'horizontal_fov',
-    //     'vertical_fov',
-    //     'quaternion',
-    //     'signal_quality'):
-    //     cog.outl(f"ds.{f} = {f};")
-    // ]]]
-    ds.time_boot_ms = time_boot_ms;
-    ds.min_distance = min_distance;
-    ds.max_distance = max_distance;
-    ds.current_distance = current_distance;
-    ds.type = type;
-    ds.id = id;
-    ds.orientation = orientation;
-    ds.covariance = covariance;
-    ds.horizontal_fov = horizontal_fov;
-    ds.vertical_fov = vertical_fov;
-    ds.quaternion = quaternion;
-    ds.signal_quality = signal_quality;
-    // [[[end]]] (checksum: b268a118afee5e2c6cb3e1094a578fff)
-
-    uas->send_message(ds);
-  }
-
-  /* -*- mid-level helpers -*- */
-
-  /**
-   * Receive distance sensor data from FCU.
-   */
-  void handle_distance_sensor(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::DISTANCE_SENSOR & dist_sen,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    using mavlink::common::MAV_SENSOR_ORIENTATION;
-    using mavlink::common::MAV_DISTANCE_SENSOR;
-
-    std::shared_lock lock(mutex);
-
-    auto lg = get_logger();
-
-    auto it = sensor_map.find(dist_sen.id);
-    if (it == sensor_map.end()) {
-      RCLCPP_ERROR(
-        lg,
-        "DS: no mapping for sensor id: %d, type: %d, orientation: %d",
-        dist_sen.id, dist_sen.type, dist_sen.orientation);
-      return;
-    }
-
-    auto sensor = it->second;
-    if (sensor->is_subscriber) {
-      RCLCPP_ERROR(
-        lg,
-        "DS: %s (id %d) is subscriber, but i got sensor data for that id from FCU",
-        sensor->topic_name.c_str(), sensor->sensor_id);
-
-      return;
-    }
-
-    if (sensor->orientation >= 0 && dist_sen.orientation != sensor->orientation) {
-      RCLCPP_ERROR(
-        lg,
-        "DS: %s: received sensor data has different orientation (%s) than in config (%s)!",
-        sensor->topic_name.c_str(),
-        utils::to_string_enum<MAV_SENSOR_ORIENTATION>(dist_sen.orientation).c_str(),
-        utils::to_string_enum<MAV_SENSOR_ORIENTATION>(sensor->orientation).c_str());
-      return;
-    }
-
-    auto range = Range();
-
-    range.header = uas->synchronized_header(sensor->frame_id, dist_sen.time_boot_ms);
-
-    range.min_range = dist_sen.min_distance * 1E-2;     // in meters
-    range.max_range = dist_sen.max_distance * 1E-2;
-    range.field_of_view = sensor->field_of_view;
-
-    switch (dist_sen.type) {
-      case enum_value(MAV_DISTANCE_SENSOR::LASER):
-      case enum_value(MAV_DISTANCE_SENSOR::RADAR):
-      case enum_value(MAV_DISTANCE_SENSOR::UNKNOWN):
-        range.radiation_type = Range::INFRARED;
-        break;
-      case enum_value(MAV_DISTANCE_SENSOR::ULTRASOUND):
-        range.radiation_type = Range::ULTRASOUND;
-        break;
-      default:
-        RCLCPP_ERROR(
-          lg,
-          "DS: %s: Wrong/undefined type of sensor (type: %d). Dropping!...",
-          sensor->topic_name.c_str(), dist_sen.type);
-        return;
-    }
-
-    range.range = dist_sen.current_distance * 1E-2;     // in meters
-
-    if (sensor->send_tf) {
-      /* variables init */
-      Eigen::Quaterniond q;
-      if (dist_sen.orientation == enum_value(MAV_SENSOR_ORIENTATION::ROTATION_CUSTOM)) {
-        q = ftf::mavlink_to_quaternion(dist_sen.quaternion);
-      } else {
-        q =
-          utils::sensor_orientation_matching(
-          static_cast<MAV_SENSOR_ORIENTATION>(dist_sen.orientation));
-      }
-
-      geometry_msgs::msg::TransformStamped transform;
-
-      transform.header = uas->synchronized_header(base_frame_id, dist_sen.time_boot_ms);
-      transform.child_frame_id = sensor->frame_id;
-
-      /* rotation and position set */
-      transform.transform.rotation = tf2::toMsg(q);
-      tf2::toMsg(sensor->position, transform.transform.translation);
-
-      /* transform broadcast */
-      uas->tf2_broadcaster.sendTransform(transform);
-    }
-
-    sensor->pub->publish(range);
-  }
-};
-
-DistanceSensorItem::DistanceSensorItem(
-  DistanceSensorPlugin * owner_, std::string topic_name_,
-  YAML::Node config)
-: is_subscriber(false),
-  send_tf(false),
-  sensor_id(0),
-  field_of_view(0),
-  position(0.0, 0.0, 0.0),
-  orientation(-1),
-  covariance(0),
-  horizontal_fov_ratio(1.0),
-  vertical_fov_ratio(1.0),
-  quaternion(0.f, 0.f, 0.f, 0.f),
-  topic_name(topic_name_),
-  owner(owner_),
-  data{},
-  data_index(0)
-{
-  using MSO = mavlink::common::MAV_SENSOR_ORIENTATION;
-  std::string orientation_str{};
-
-  // load and parse paras
-  // first decide the type of topic (sub or pub)
-  is_subscriber = config["subscriber"].as<bool>(false);
-
-  // sensor id
-  if (auto idn = config["id"]; idn) {
-    sensor_id = idn.as<int>();
-  } else {
-    throw std::invalid_argument("`id` field required");
-  }
-
-  // orientation, checks later
-  if (auto qn = config["orientation"]; qn) {
-    // lookup for numeric value
-    orientation_str = qn.as<std::string>();
-    orientation = utils::sensor_orientation_from_str(orientation_str);
-  } else {
-    orientation = -1;                // not set
-  }
-
-  if (!is_subscriber) {
-    // publisher params
-    // frame_id and FOV is required
-    frame_id = config["frame_id"].as<std::string>();
-    field_of_view = config["field_of_view"].as<double>();
-
-    // unset allowed, setted wrong - not
-    if (orientation == -1 && !orientation_str.empty()) {
-      throw std::invalid_argument("defined orientation is not valid!");
-    }
-
-    // optional
-    send_tf = config["send_tf"].as<bool>(false);
-    if (auto spn = config["sensor_position"]; spn && send_tf) {
-      // sensor position defined if 'send_tf' set to TRUE
-      position.x() = spn["x"].as<double>(0.0);
-      position.y() = spn["y"].as<double>(0.0);
-      position.z() = spn["z"].as<double>(0.0);
-    }
-  } else {
-    // subscriber params
-    // orientation is required
-    if (orientation_str.empty()) {
-      throw std::invalid_argument("`orientation` field required");
-    }
-
-    if (orientation == -1) {
-      throw std::invalid_argument("defined orientation is not valid!");
-    }
-
-    if (orientation == enum_value(MSO::ROTATION_CUSTOM) &&
-      !config["custom_orientation"])
-    {
-      throw std::invalid_argument("`custom_orientation` required for orientation=CUSTOM");
-    }
-
-
-    // optional
-    covariance = config["covariance"].as<int>(0);
-    horizontal_fov_ratio = config["horizontal_fov_ratio"].as<double>(0.0);
-    vertical_fov_ratio = config["vertical_fov_ratio"].as<double>(0.0);
-    if (auto con = config["custom_orientation"];
-      con && orientation == enum_value(MSO::ROTATION_CUSTOM))
-    {
-      Eigen::Vector3d rpy;
-
-      rpy.x() = con["roll"].as<double>(0);
-      rpy.y() = con["pitch"].as<double>(0);
-      rpy.z() = con["yaw"].as<double>(0);
-
-      constexpr auto DEG_TO_RAD = (M_PI / 180.0);
-      quaternion = Eigen::Quaternionf(ftf::quaternion_from_rpy(rpy * DEG_TO_RAD));
-    }
-  }
-
-  // create topic handles
-  auto sensor_qos = rclcpp::SensorDataQoS();
-  if (!is_subscriber) {
-    pub = owner->node->create_publisher<Range>(topic_name, sensor_qos);
-  } else {
-    sub =
-      owner->node->create_subscription<Range>(
-      topic_name, sensor_qos,
-      std::bind(&DistanceSensorItem::range_cb, this, _1));
-  }
-}
-
-void DistanceSensorItem::range_cb(const Range::SharedPtr msg)
-{
-  using mavlink::common::MAV_DISTANCE_SENSOR;
-
-  uint8_t type = 0;
-  uint8_t covariance_ = 0;
-
-  if (covariance > 0) {
-    covariance_ = covariance;
-  } else {
-    covariance_ = uint8_t(calculate_variance(msg->range) * 1E2);    // in cm
-  }
-
-  // current mapping, may change later
-  if (msg->radiation_type == Range::INFRARED) {
-    type = enum_value(MAV_DISTANCE_SENSOR::LASER);
-  } else if (msg->radiation_type == Range::ULTRASOUND) {
-    type = enum_value(MAV_DISTANCE_SENSOR::ULTRASOUND);
-  }
-
-  std::array<float, 4> q;
-  ftf::quaternion_to_mavlink(quaternion, q);
-
-  owner->distance_sensor(
-    get_time_boot_ms(msg->header.stamp),
-    msg->min_range / 1E-2,
-    msg->max_range / 1E-2,
-    msg->range / 1E-2,
-    type,
-    sensor_id,
-    orientation,
-    covariance_,
-    msg->field_of_view * horizontal_fov_ratio,
-    msg->field_of_view * vertical_fov_ratio,
-    q,
-    0);
-}
-
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::DistanceSensorPlugin)
diff --git a/mavros_extras/src/plugins/esc_status.cpp b/mavros_extras/src/plugins/esc_status.cpp
deleted file mode 100644
index c23516c5..00000000
--- a/mavros_extras/src/plugins/esc_status.cpp
+++ /dev/null
@@ -1,156 +0,0 @@
-/*
- * Copyright 2020 Ricardo Marques <marques.ricardo17@gmail.com>.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief ESC status plugin
- * @file esc_status.cpp
- * @author Ricardo Marques <marques.ricardo17@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/esc_info.hpp"
-#include "mavros_msgs/msg/esc_status.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief ESC status plugin
- * @plugin esc_status
- */
-class ESCStatusPlugin : public plugin::Plugin
-{
-public:
-  explicit ESCStatusPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "esc_status"),
-    _max_esc_count(0),
-    _max_esc_info_index(0),
-    _max_esc_status_index(0)
-  {
-    esc_info_pub = node->create_publisher<mavros_msgs::msg::ESCInfo>("~/info", 10);
-    esc_status_pub = node->create_publisher<mavros_msgs::msg::ESCStatus>("~/status", 10);
-
-    enable_connection_cb();
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&ESCStatusPlugin::handle_esc_info),
-      make_handler(&ESCStatusPlugin::handle_esc_status),
-    };
-  }
-
-private:
-  using lock_guard = std::lock_guard<std::mutex>;
-
-  rclcpp::Publisher<mavros_msgs::msg::ESCInfo>::SharedPtr esc_info_pub;
-  rclcpp::Publisher<mavros_msgs::msg::ESCStatus>::SharedPtr esc_status_pub;
-
-  std::mutex mutex;
-  mavros_msgs::msg::ESCInfo _esc_info;
-  mavros_msgs::msg::ESCStatus _esc_status;
-  uint8_t _max_esc_count;
-  uint8_t _max_esc_info_index;
-  uint8_t _max_esc_status_index;
-  const uint8_t batch_size = 4;
-
-  void handle_esc_info(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::ESC_INFO & esc_info,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    lock_guard lock(mutex);
-
-    _esc_info.header.stamp = uas->synchronise_stamp(esc_info.time_usec);
-
-    uint8_t esc_index = esc_info.index;
-
-    _esc_info.counter = esc_info.counter;
-    _esc_info.count = esc_info.count;
-    _esc_info.connection_type = esc_info.connection_type;
-    _esc_info.info = esc_info.info;
-
-    if (_esc_info.count > _max_esc_count) {
-      _max_esc_count = _esc_info.count;
-    }
-
-    if (_esc_info.esc_info.size() < _max_esc_count) {
-      _esc_info.esc_info.resize(_max_esc_count);
-    }
-
-    for (int i = 0; i < std::min<ssize_t>(batch_size, ssize_t(_max_esc_count) - esc_index); i++) {
-      _esc_info.esc_info[esc_index + i].header = _esc_info.header;
-      _esc_info.esc_info[esc_index + i].failure_flags = esc_info.failure_flags[i];
-      _esc_info.esc_info[esc_index + i].error_count = esc_info.error_count[i];
-      _esc_info.esc_info[esc_index + i].temperature = esc_info.temperature[i] * 1E2;  //!< [degC]
-    }
-
-    _max_esc_info_index = std::max(_max_esc_info_index, esc_info.index);
-
-    if (_max_esc_info_index == esc_info.index) {
-      esc_info_pub->publish(_esc_info);
-    }
-  }
-
-  void handle_esc_status(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::ESC_STATUS & esc_status,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    lock_guard lock(mutex);
-
-    uint8_t esc_index = esc_status.index;
-
-    if (_esc_status.esc_status.size() < _max_esc_count) {
-      _esc_status.esc_status.resize(_max_esc_count);
-    }
-
-    _esc_status.header.stamp = uas->synchronise_stamp(esc_status.time_usec);
-
-    for (int i = 0; i < std::min<ssize_t>(batch_size, ssize_t(_max_esc_count) - esc_index); i++) {
-      _esc_status.esc_status[esc_index + i].header = _esc_status.header;
-      _esc_status.esc_status[esc_index + i].rpm = esc_status.rpm[i];
-      _esc_status.esc_status[esc_index + i].voltage = esc_status.voltage[i];
-      _esc_status.esc_status[esc_index + i].current = esc_status.current[i];
-    }
-
-    _max_esc_status_index = std::max(_max_esc_status_index, esc_status.index);
-
-    if (_max_esc_status_index == esc_status.index) {
-      esc_status_pub->publish(_esc_status);
-    }
-  }
-
-  void connection_cb(bool connected [[maybe_unused]]) override
-  {
-    lock_guard lock(mutex);
-
-    _max_esc_count = 0;
-    _max_esc_status_index = 0;
-    _max_esc_info_index = 0;
-    _esc_info.esc_info.resize(0);
-    _esc_status.esc_status.resize(0);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::ESCStatusPlugin)
diff --git a/mavros_extras/src/plugins/esc_telemetry.cpp b/mavros_extras/src/plugins/esc_telemetry.cpp
deleted file mode 100644
index 05dd8926..00000000
--- a/mavros_extras/src/plugins/esc_telemetry.cpp
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Copyright 2020 Braedon O'Meara <braedon@rizse.io>.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief APM ESC Telemetry plugin
- * @file esc_telemetry.cpp
- * @author Braedon O'Meara <braedon@rizse.io>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/esc_telemetry.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief ESC telemetry plugin
- * @plugin esc_telemetry
- *
- * APM specific plugin.
- */
-class ESCTelemetryPlugin : public plugin::Plugin
-{
-public:
-  explicit ESCTelemetryPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "esc_telemetry")
-  {
-    esc_telemetry_pub = node->create_publisher<mavros_msgs::msg::ESCTelemetry>("~/telemetry", 10);
-
-    enable_connection_cb();
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&ESCTelemetryPlugin::handle_esc_telemetry_1_to_4),
-      make_handler(&ESCTelemetryPlugin::handle_esc_telemetry_5_to_8),
-      make_handler(&ESCTelemetryPlugin::handle_esc_telemetry_9_to_12),
-    };
-  }
-
-private:
-  using lock_guard = std::lock_guard<std::mutex>;
-  std::mutex mutex;
-
-  rclcpp::Publisher<mavros_msgs::msg::ESCTelemetry>::SharedPtr esc_telemetry_pub;
-  mavros_msgs::msg::ESCTelemetry _esc_telemetry;
-
-  template<typename msgT>
-  void handle_esc_telemetry(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]], msgT & et,
-    size_t offset = 0)
-  {
-    lock_guard lock(mutex);
-
-    size_t requred_size = offset + et.temperature.size();
-    if (_esc_telemetry.esc_telemetry.size() < requred_size) {
-      _esc_telemetry.esc_telemetry.resize(requred_size);
-    }
-
-    auto stamp = node->now();
-
-    _esc_telemetry.header.stamp = stamp;
-    for (size_t i = 0; i < et.temperature.size(); i++) {
-      auto & p = _esc_telemetry.esc_telemetry.at(offset + i);
-
-      p.header.stamp = stamp;
-      p.temperature = et.temperature[i];
-      p.voltage = et.voltage[i] / 100.0f;                                       // centiV -> V
-      p.current = et.current[i] / 100.0f;                                       // centiA -> A
-      p.totalcurrent = et.totalcurrent[i] / 1000.0f;                            // mAh -> Ah
-      p.rpm = et.rpm[i];
-      p.count = et.count[i];
-    }
-
-    esc_telemetry_pub->publish(_esc_telemetry);
-  }
-
-  void handle_esc_telemetry_1_to_4(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::ESC_TELEMETRY_1_TO_4 & esc_telemetry,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    handle_esc_telemetry(msg, esc_telemetry, 0);
-  }
-
-  void handle_esc_telemetry_5_to_8(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::ESC_TELEMETRY_5_TO_8 & esc_telemetry,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    handle_esc_telemetry(msg, esc_telemetry, 4);
-  }
-
-  void handle_esc_telemetry_9_to_12(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::ESC_TELEMETRY_9_TO_12 & esc_telemetry,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    handle_esc_telemetry(msg, esc_telemetry, 8);
-  }
-
-  void connection_cb(bool connected [[maybe_unused]]) override
-  {
-    lock_guard lock(mutex);
-
-    _esc_telemetry.esc_telemetry.clear();
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::ESCTelemetryPlugin)
diff --git a/mavros_extras/src/plugins/fake_gps.cpp b/mavros_extras/src/plugins/fake_gps.cpp
deleted file mode 100644
index 2a5b99fb..00000000
--- a/mavros_extras/src/plugins/fake_gps.cpp
+++ /dev/null
@@ -1,453 +0,0 @@
-/*
- * Copyright 2015 Christoph Tobler.
- * Copyright 2017 Nuno Marques.
- * Copyright 2019 Amilcar Lucas.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Fake GPS with local position source plugin
- * @file fake_gps.cpp
- * @author Christoph Tobler <toblech@ethz.ch>
- * @author Nuno Marques <n.marques21@hotmail.com>
- * @author Amilcar Lucas <amilcar.lucas@iav.de>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <string>
-
-#include <tf2_eigen/tf2_eigen.hpp>
-#include <GeographicLib/Geocentric.hpp>
-#include <GeographicLib/Geoid.hpp>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-#include "mavros/setpoint_mixin.hpp"
-
-#include "geometry_msgs/msg/pose_stamped.hpp"
-#include "geometry_msgs/msg/pose_with_covariance_stamped.hpp"
-#include "geometry_msgs/msg/transform_stamped.hpp"
-
-// the number of GPS leap seconds
-#define GPS_LEAPSECONDS_MILLIS 18000ULL
-
-#define MSEC_PER_WEEK (7ULL * 86400ULL * 1000ULL)
-#define UNIX_OFFSET_MSEC (17000ULL * 86400ULL + 52ULL * 10ULL * MSEC_PER_WEEK - \
-  GPS_LEAPSECONDS_MILLIS)
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-using mavlink::common::GPS_FIX_TYPE;
-using mavlink::common::GPS_INPUT_IGNORE_FLAGS;
-
-/**
- * @brief Fake GPS plugin.
- * @plugin fake_gps
- *
- * Sends fake GPS from local position estimation source data (motion capture,
- * vision) to FCU - processed in HIL mode or out of it if parameter MAV_USEHILGPS
- * is set on PX4 Pro Autopilot Firmware; Ardupilot Firmware already supports it
- * without a flag set.
- */
-class FakeGPSPlugin : public plugin::Plugin,
-  private plugin::TF2ListenerMixin<FakeGPSPlugin>
-{
-public:
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-  explicit FakeGPSPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "fake_gps"),
-    // WGS-84 ellipsoid (a - equatorial radius, f - flattening of ellipsoid)
-    earth(GeographicLib::Constants::WGS84_a(), GeographicLib::Constants::WGS84_f()),
-    use_mocap(true),
-    use_vision(false),
-    use_hil_gps(true),
-    mocap_transform(true),
-    mocap_withcovariance(false),
-    tf_listen(false),
-    eph(2.0),
-    epv(2.0),
-    horiz_accuracy(0.0f),
-    vert_accuracy(0.0f),
-    speed_accuracy(0.0f),
-    gps_id(0),
-    satellites_visible(5),
-    fix_type(GPS_FIX_TYPE::NO_GPS),
-    tf_rate(10.0),
-    map_origin(0.0, 0.0, 0.0)
-  {
-    enable_node_watch_parameters();
-
-    last_pos_time = rclcpp::Time(0.0);
-
-    // general params
-    node_declare_and_watch_parameter(
-      "gps_id", 0, [&](const rclcpp::Parameter & p) {
-        gps_id = p.as_int();
-      });
-    node_declare_and_watch_parameter(
-      "fix_type", utils::enum_value(GPS_FIX_TYPE::NO_GPS), [&](const rclcpp::Parameter & p) {
-        fix_type = static_cast<GPS_FIX_TYPE>( p.as_int());
-      });
-    node_declare_and_watch_parameter(
-      "gps_rate", 5.0, [&](const rclcpp::Parameter & p) {
-        rclcpp::Rate rate(p.as_double());
-
-        gps_rate_period = rate.period();
-      });
-    node_declare_and_watch_parameter(
-      "eph", 2.0, [&](const rclcpp::Parameter & p) {
-        eph = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "epv", 2.0, [&](const rclcpp::Parameter & p) {
-        epv = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "horiz_accuracy", 0.0, [&](const rclcpp::Parameter & p) {
-        horiz_accuracy = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "vert_accuracy", 0.0, [&](const rclcpp::Parameter & p) {
-        vert_accuracy = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "speed_accuracy", 0.0, [&](const rclcpp::Parameter & p) {
-        speed_accuracy = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "satellites_visible", 5, [&](const rclcpp::Parameter & p) {
-        satellites_visible = p.as_int();
-      });
-
-    // default origin/starting point: Zürich geodetic coordinates
-    node_declare_and_watch_parameter(
-      "geo_origin.lat", 47.3667, [&](const rclcpp::Parameter & p) {
-        map_origin.x() = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "geo_origin.lon", 8.5500, [&](const rclcpp::Parameter & p) {
-        map_origin.y() = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "geo_origin.alt", 408.0, [&](const rclcpp::Parameter & p) {
-        map_origin.z() = p.as_double();
-      });
-
-    try {
-      /**
-       * @brief Conversion of the origin from geodetic coordinates (LLA)
-       * to ECEF (Earth-Centered, Earth-Fixed)
-       */
-      earth.Forward(
-        map_origin.x(), map_origin.y(), map_origin.z(),
-        ecef_origin.x(), ecef_origin.y(), ecef_origin.z());
-    } catch (const std::exception & e) {
-      RCLCPP_ERROR_STREAM(get_logger(), "FGPS: Caught exception: " << e.what());
-    }
-
-    // source set params
-    node_declare_and_watch_parameter(
-      // listen to MoCap source
-      "use_mocap", true, [&](const rclcpp::Parameter & p) {
-        use_mocap = p.as_bool();
-      });
-    node_declare_and_watch_parameter(
-      // listen to MoCap source (TransformStamped if true; PoseStamped if false)
-      "mocap_transform", true, [&](const rclcpp::Parameter & p) {
-        mocap_transform = p.as_bool();
-      });
-    node_declare_and_watch_parameter(
-      // ~mocap/pose uses PoseWithCovarianceStamped Message
-      "mocap_withcovariance", false, [&](const rclcpp::Parameter & p) {
-        mocap_withcovariance = p.as_bool();
-      });
-
-    node_declare_and_watch_parameter(
-      // listen to Vision source
-      "use_vision", false, [&](const rclcpp::Parameter & p) {
-        use_vision = p.as_bool();
-      });
-    node_declare_and_watch_parameter(
-      "use_hil_gps", false, [&](const rclcpp::Parameter & p) {
-        // send HIL_GPS MAVLink messages if true,
-        // send GPS_INPUT mavlink messages if false
-        use_hil_gps = p.as_bool();
-      });
-
-    // tf params
-    node_declare_and_watch_parameter(
-      "tf.frame_id", "map", [&](const rclcpp::Parameter & p) {
-        tf_frame_id = p.as_string();
-      });
-    node_declare_and_watch_parameter(
-      "tf.child_frame_id", "base_link", [&](const rclcpp::Parameter & p) {
-        tf_child_frame_id = p.as_string();
-      });
-    node_declare_and_watch_parameter(
-      "tf.rate_limit", 10.0, [&](const rclcpp::Parameter & p) {
-        tf_rate = p.as_double();
-      });
-    node_declare_and_watch_parameter(
-      "tf.listen", false, [&](const rclcpp::Parameter & p) {
-        tf_listen = p.as_bool();
-      });
-
-
-    if (use_mocap) {
-      if (mocap_transform) {                // MoCap data in TransformStamped msg
-        mocap_tf_sub =
-          node->create_subscription<geometry_msgs::msg::TransformStamped>(
-          "~/mocap/tf", 10,
-          std::bind(&FakeGPSPlugin::mocap_tf_cb, this, _1));
-      } else if (mocap_withcovariance) {    // MoCap data in PoseWithCovarianceStamped msg
-        mocap_pose_cov_sub =
-          node->create_subscription<geometry_msgs::msg::PoseWithCovarianceStamped>(
-          "~/mocap/pose_cov", 10, std::bind(&FakeGPSPlugin::mocap_pose_cov_cb, this, _1));
-      } else {                              // MoCap data in PoseStamped msg
-        mocap_pose_sub =
-          node->create_subscription<geometry_msgs::msg::PoseStamped>(
-          "~/mocap/pose", 10,
-          std::bind(&FakeGPSPlugin::mocap_pose_cb, this, _1));
-      }
-    } else if (use_vision) {                // Vision data in PoseStamped msg
-      vision_pose_sub =
-        node->create_subscription<geometry_msgs::msg::PoseStamped>(
-        "~/vision", 10,
-        std::bind(&FakeGPSPlugin::vision_cb, this, _1));
-    } else if (tf_listen) {                 // Pose acquired from TF Listener
-      RCLCPP_INFO_STREAM(
-        get_logger(), "Listen to transform " << tf_frame_id <<
-          " -> " << tf_child_frame_id);
-      tf2_start("FakeGPSVisionTF", &FakeGPSPlugin::transform_cb);
-    } else {
-      RCLCPP_ERROR(get_logger(), "No pose source!");
-    }
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  friend class TF2ListenerMixin;
-
-  std::chrono::nanoseconds gps_rate_period;
-  rclcpp::Time last_pos_time;
-
-  // Constructor for a ellipsoid
-  GeographicLib::Geocentric earth;
-
-  rclcpp::Subscription<geometry_msgs::msg::TransformStamped>::SharedPtr mocap_tf_sub;
-  rclcpp::Subscription<geometry_msgs::msg::PoseWithCovarianceStamped>::SharedPtr mocap_pose_cov_sub;
-  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr mocap_pose_sub;
-  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr vision_pose_sub;
-
-  bool use_mocap;                       //!< set use of mocap data (PoseStamped msg)
-  bool use_vision;                      //!< set use of vision data
-  bool use_hil_gps;                     //!< set use of use_hil_gps MAVLink messages
-  bool mocap_transform;                 //!< set use of mocap data (TransformStamped msg)
-  bool mocap_withcovariance;            //!< ~mocap/pose uses PoseWithCovarianceStamped Message
-  bool tf_listen;                       //!< set use of TF Listener data
-
-  double eph, epv;
-  float horiz_accuracy;
-  float vert_accuracy;
-  float speed_accuracy;
-  int gps_id;
-  int satellites_visible;
-  GPS_FIX_TYPE fix_type;
-
-  double tf_rate;
-  std::string tf_frame_id;
-  std::string tf_child_frame_id;
-  rclcpp::Time last_transform_stamp;
-
-  Eigen::Vector3d map_origin;           //!< geodetic origin [lla]
-  Eigen::Vector3d ecef_origin;          //!< geocentric origin [m]
-  Eigen::Vector3d old_ecef;             //!< previous geocentric position [m]
-  double old_stamp;                     //!< previous stamp [s]
-
-  /* -*- mid-level helpers and low-level send -*- */
-
-  /**
-   * @brief Send fake GPS coordinates through HIL_GPS or GPS_INPUT Mavlink msg
-   */
-  void send_fake_gps(const rclcpp::Time & stamp, const Eigen::Vector3d & ecef_offset)
-  {
-    auto now_ = node->now();
-
-    // Throttle incoming messages
-    if ((now_ - last_pos_time).to_chrono<std::chrono::nanoseconds>() < gps_rate_period) {
-      return;
-    }
-    last_pos_time = now_;
-
-    Eigen::Vector3d geodetic;
-    Eigen::Vector3d current_ecef(ecef_origin.x() + ecef_offset.x(),
-      ecef_origin.y() + ecef_offset.y(),
-      ecef_origin.z() + ecef_offset.z());
-
-    try {
-      earth.Reverse(
-        current_ecef.x(), current_ecef.y(), current_ecef.z(),
-        geodetic.x(), geodetic.y(), geodetic.z());
-    } catch (const std::exception & e) {
-      RCLCPP_INFO_STREAM(get_logger(), "FGPS: Caught exception: " << e.what());
-    }
-
-    Eigen::Vector3d vel = (old_ecef - current_ecef) / (stamp.seconds() - old_stamp);    // [m/s]
-
-    // store old values
-    old_stamp = stamp.seconds();
-    old_ecef = current_ecef;
-
-    if (use_hil_gps) {
-      /**
-       * @note: <a href="https://mavlink.io/en/messages/common.html#HIL_GPS">HIL_GPS MAVLink message</a>
-       * is supported by both Ardupilot and PX4 Firmware.
-       * But on PX4 Firmware are only acceped out of HIL mode
-       * if use_hil_gps flag is set (param MAV_USEHILGPS = 1).
-       */
-      mavlink::common::msg::HIL_GPS hil_gps {};
-
-      vel *= 1e2;                   // [cm/s]
-
-      // compute course over ground
-      double cog;
-      if (vel.x() == 0 && vel.y() == 0) {
-        cog = 0;
-      } else if (vel.x() >= 0 && vel.y() < 0) {
-        cog = M_PI * 5 / 2 - atan2(vel.x(), vel.y());
-      } else {
-        cog = M_PI / 2 - atan2(vel.x(), vel.y());
-      }
-
-      // Fill in and send message
-      hil_gps.time_usec = get_time_usec(stamp);                 // [useconds]
-      hil_gps.lat = geodetic.x() * 1e7;                         // [degrees * 1e7]
-      hil_gps.lon = geodetic.y() * 1e7;                         // [degrees * 1e7]
-      hil_gps.alt = (geodetic.z() + GeographicLib::Geoid::ELLIPSOIDTOGEOID *
-        (*uas->data.egm96_5)(geodetic.x(), geodetic.y())) * 1e3;    // [meters * 1e3]
-      hil_gps.vel = vel.block<2, 1>(0, 0).norm();               // [cm/s]
-      hil_gps.vn = vel.x();                                     // [cm/s]
-      hil_gps.ve = vel.y();                                     // [cm/s]
-      hil_gps.vd = vel.z();                                     // [cm/s]
-      hil_gps.cog = cog * 1e2;                                  // [degrees * 1e2]
-      hil_gps.eph = eph * 1e2;                                  // [cm]
-      hil_gps.epv = epv * 1e2;                                  // [cm]
-      hil_gps.fix_type = utils::enum_value(fix_type);
-      hil_gps.satellites_visible = satellites_visible;
-
-      uas->send_message(hil_gps);
-    } else {
-      /**
-       * @note: <a href="https://mavlink.io/en/messages/common.html#GPS_INPUT">GPS_INPUT MAVLink message</a>
-       * is currently only supported by Ardupilot firmware
-       */
-      mavlink::common::msg::GPS_INPUT gps_input {};
-
-      // Fill in and send message
-      gps_input.time_usec = get_time_usec(stamp);                      // [useconds]
-      gps_input.gps_id = gps_id;                                //
-      gps_input.ignore_flags = 0;
-      if (speed_accuracy == 0.0f) {
-        gps_input.ignore_flags |= utils::enum_value(GPS_INPUT_IGNORE_FLAGS::FLAG_SPEED_ACCURACY);
-      }
-      if (eph == 0.0f) {
-        gps_input.ignore_flags |= utils::enum_value(GPS_INPUT_IGNORE_FLAGS::FLAG_HDOP);
-      }
-      if (epv == 0.0f) {
-        gps_input.ignore_flags |= utils::enum_value(GPS_INPUT_IGNORE_FLAGS::FLAG_VDOP);
-      }
-      if (fabs(vel.x()) <= 0.01f && fabs(vel.y()) <= 0.01f) {
-        gps_input.ignore_flags |= utils::enum_value(GPS_INPUT_IGNORE_FLAGS::FLAG_VEL_HORIZ);
-      }
-      if (fabs(vel.z()) <= 0.01f) {
-        gps_input.ignore_flags |= utils::enum_value(GPS_INPUT_IGNORE_FLAGS::FLAG_VEL_VERT);
-      }
-      int64_t tdiff = (gps_input.time_usec / 1000) - UNIX_OFFSET_MSEC;
-      gps_input.time_week = tdiff / MSEC_PER_WEEK;
-      gps_input.time_week_ms = tdiff - (gps_input.time_week * MSEC_PER_WEEK);
-      gps_input.speed_accuracy = speed_accuracy;        // [m/s] TODO how can this be dynamicaly calculated ???   // NOLINT
-      gps_input.horiz_accuracy = horiz_accuracy;        // [m] will either use the static parameter value, or the dynamic covariance from function mocap_pose_cov_cb() bellow  // NOLINT
-      gps_input.vert_accuracy = vert_accuracy;          // [m] will either use the static parameter value, or the dynamic covariance from function mocap_pose_cov_cb() bellow  // NOLINT
-      gps_input.lat = geodetic.x() * 1e7;               // [degrees * 1e7]
-      gps_input.lon = geodetic.y() * 1e7;               // [degrees * 1e7]
-      gps_input.alt = (geodetic.z() + GeographicLib::Geoid::ELLIPSOIDTOGEOID *
-        (*uas->data.egm96_5)(geodetic.x(), geodetic.y()));  // [meters]
-      gps_input.vn = vel.x();                               // [m/s]
-      gps_input.ve = vel.y();                               // [m/s]
-      gps_input.vd = vel.z();                               // [m/s]
-      gps_input.hdop = eph;                                 // [m]
-      gps_input.vdop = epv;                                 // [m]
-      gps_input.fix_type = utils::enum_value(fix_type);
-      gps_input.satellites_visible = satellites_visible;
-
-      uas->send_message(gps_input);
-    }
-  }
-
-  /* -*- callbacks -*- */
-  void mocap_tf_cb(const geometry_msgs::msg::TransformStamped::SharedPtr trans)
-  {
-    Eigen::Affine3d pos_enu; tf2::fromMsg(trans->transform, pos_enu);
-
-    send_fake_gps(
-      trans->header.stamp,
-      ftf::transform_frame_enu_ecef(Eigen::Vector3d(pos_enu.translation()), map_origin));
-  }
-
-  void mocap_pose_cov_cb(const geometry_msgs::msg::PoseWithCovarianceStamped::SharedPtr req)
-  {
-    Eigen::Affine3d pos_enu; tf2::fromMsg(req->pose.pose, pos_enu);
-    horiz_accuracy = (req->pose.covariance[0] + req->pose.covariance[7]) / 2.0f;
-    vert_accuracy = req->pose.covariance[14];
-
-    send_fake_gps(
-      req->header.stamp,
-      ftf::transform_frame_enu_ecef(Eigen::Vector3d(pos_enu.translation()), map_origin));
-  }
-
-  void mocap_pose_cb(const geometry_msgs::msg::PoseStamped::SharedPtr req)
-  {
-    Eigen::Affine3d pos_enu; tf2::fromMsg(req->pose, pos_enu);
-
-    send_fake_gps(
-      req->header.stamp,
-      ftf::transform_frame_enu_ecef(Eigen::Vector3d(pos_enu.translation()), map_origin));
-  }
-
-  void vision_cb(const geometry_msgs::msg::PoseStamped::SharedPtr req)
-  {
-    Eigen::Affine3d pos_enu; tf2::fromMsg(req->pose, pos_enu);
-
-    send_fake_gps(
-      req->header.stamp,
-      ftf::transform_frame_enu_ecef(Eigen::Vector3d(pos_enu.translation()), map_origin));
-  }
-
-  void transform_cb(const geometry_msgs::msg::TransformStamped & trans)
-  {
-    Eigen::Affine3d pos_enu; tf2::fromMsg(trans.transform, pos_enu);
-
-    send_fake_gps(
-      trans.header.stamp,
-      ftf::transform_frame_enu_ecef(Eigen::Vector3d(pos_enu.translation()), map_origin));
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::FakeGPSPlugin)
diff --git a/mavros_extras/src/plugins/gimbal_control.cpp b/mavros_extras/src/plugins/gimbal_control.cpp
deleted file mode 100644
index 3f6c9ca8..00000000
--- a/mavros_extras/src/plugins/gimbal_control.cpp
+++ /dev/null
@@ -1,717 +0,0 @@
-/*
- * Copyright 2023 Adinkra Inc.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Gimbal Control Plugin
- * @file gimbal_control.cpp
- * @author Mark Beaty <mark.beaty@adinkratech.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <tf2_eigen/tf2_eigen.hpp>
-
-#include <memory>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/srv/command_long.hpp"
-#include "geometry_msgs/msg/quaternion.hpp"
-#include "geometry_msgs/msg/vector3_stamped.hpp"
-
-#include "mavros_msgs/msg/gimbal_device_attitude_status.hpp"
-#include "mavros_msgs/msg/gimbal_device_set_attitude.hpp"
-#include "mavros_msgs/msg/gimbal_device_information.hpp"
-#include "mavros_msgs/msg/gimbal_manager_set_attitude.hpp"
-#include "mavros_msgs/msg/gimbal_manager_set_pitchyaw.hpp"
-#include "mavros_msgs/msg/gimbal_manager_status.hpp"
-#include "mavros_msgs/msg/gimbal_manager_information.hpp"
-
-#include "mavros_msgs/srv/gimbal_get_information.hpp"
-#include "mavros_msgs/srv/gimbal_manager_configure.hpp"
-#include "mavros_msgs/srv/gimbal_manager_pitchyaw.hpp"
-#include "mavros_msgs/srv/gimbal_manager_set_roi.hpp"
-#include "mavros_msgs/srv/gimbal_manager_camera_track.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-// Mavlink enumerations
-using mavlink::common::GIMBAL_MANAGER_FLAGS;
-using mavlink::common::GIMBAL_MANAGER_CAP_FLAGS;
-using mavlink::common::GIMBAL_DEVICE_CAP_FLAGS;
-using mavlink::common::GIMBAL_DEVICE_FLAGS;
-using mavlink::common::GIMBAL_DEVICE_ERROR_FLAGS;
-using mavlink::common::MAV_CMD;
-using utils::enum_value;
-using uas::s_shared_lock;
-
-/**
- * @brief Gimbal Control Plugin
- * @plugin gimbal_control
- *
- * Adds support for Mavlink Gimbal Protocol v2.
- * Also publishes gimbal pose to TF when parameter tf_send==true
- */
-class GimbalControlPlugin : public plugin::Plugin
-{
-public:
-  explicit GimbalControlPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "gimbal_control"),
-    tf_send(false)
-  {
-    /**
-     * Sample service calls for interfacing with a Gimbal Protocol v2 gimbal:
-     * This service must be called first to take control of the gimbal:
-     * ros2 service call /src/mavros/mavros/gimbal_control/manager/configure mavros_msgs/srv/GimbalManagerConfigure "{sysid_primary: -2, compid_primary: 191, sysid_secondary: -1, compid_secondary: -1, gimbal_device_id: 0}"
-     * Set pitch and yaw:
-     * ros2 service call /src/mavros/mavros/gimbal_control/manager/pitchyaw mavros_msgs/srv/GimbalManagerPitchyaw "{pitch: -45, yaw: 90, pitch_rate: -0.2, yaw_rate: -0.2, flags: 0, gimbal_device_id: 0}"
-     * Set region of intrest for tracking:
-     * ros2 service call /src/mavros/mavros/gimbal_control/manager/set_roi mavros_msgs/srv/GimbalManagerSetRoi "{mode: 0, gimbal_device_id: 0, latitude: x, longitude: y, altitude: z}"
-    */
-    // Callback group for supporting nested service calls
-    cb_group = node->create_callback_group(rclcpp::CallbackGroupType::Reentrant);
-
-    // Parameter for msg header frame
-    enable_node_watch_parameters();
-    node_declare_and_watch_parameter(
-      "frame_id", "base_link_frd", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    // Important tf subsection
-    // Report the transform from base_link to gimbal here.
-    node_declare_and_watch_parameter(
-      "tf.send", false, [&](const rclcpp::Parameter & p) {
-        tf_send = p.as_bool();
-      });
-    node_declare_and_watch_parameter(
-      "tf.frame_id", "base_link_frd", [&](const rclcpp::Parameter & p) {
-        tf_frame_id = p.as_string();
-      });
-
-    // Subscribers
-    // --Not successfully validated--
-    set_device_attitude_sub = node->create_subscription<mavros_msgs::msg::GimbalDeviceSetAttitude>(
-      "~/device/set_attitude", 10, std::bind(
-        &GimbalControlPlugin::device_set_attitude_cb, this,
-        _1));
-
-    // --Not successfully validated--
-    set_manager_attitude_sub =
-      node->create_subscription<mavros_msgs::msg::GimbalManagerSetAttitude>(
-      "~/manager/set_attitude", 10, std::bind(
-        &GimbalControlPlugin::manager_set_attitude_cb, this,
-        _1));
-
-    // --Not successfully validated--
-    set_manager_pitchyaw_sub =
-      node->create_subscription<mavros_msgs::msg::GimbalManagerSetPitchyaw>(
-      "~/manager/set_pitchyaw", 10, std::bind(
-        &GimbalControlPlugin::manager_set_pitchyaw_cb, this,
-        _1));
-
-    // --Not successfully validated-- also note that the message is the same as pitchyaw and will likely change
-    set_manager_manual_control_sub = node->create_subscription<mavros_msgs::msg::GimbalManagerSetPitchyaw>(
-      "~/manager/set_manual_control", 10, std::bind(
-        &GimbalControlPlugin::manager_set_manual_control_cb, this,
-        _1));
-
-
-    // Publishers
-    gimbal_attitude_status_pub = node->create_publisher<mavros_msgs::msg::GimbalDeviceAttitudeStatus>(
-      "~/device/attitude_status",
-      10);
-
-    gimbal_manager_status_pub = node->create_publisher<mavros_msgs::msg::GimbalManagerStatus>(
-      "~/manager/status",
-      10);
-
-    gimbal_manager_info_pub = node->create_publisher<mavros_msgs::msg::GimbalManagerInformation>(
-      "~/manager/info",
-      10);
-
-    // --Not successfully validated--
-    gimbal_device_info_pub = node->create_publisher<mavros_msgs::msg::GimbalDeviceInformation>(
-      "~/device/info",
-      10);
-
-
-    // Services
-    // --Not successfully validated--
-    gimbal_device_info_srv = node->create_service<mavros_msgs::srv::GimbalGetInformation>(
-      "~/device/get_info", std::bind(
-        &GimbalControlPlugin::device_get_info_cb,
-        this, _1, _2));
-
-    gimbal_manager_info_srv = node->create_service<mavros_msgs::srv::GimbalGetInformation>(
-      "~/manager/get_info", std::bind(
-        &GimbalControlPlugin::manager_get_info_cb,
-        this, _1, _2));
-
-    gimbal_manager_configure_srv = node->create_service<mavros_msgs::srv::GimbalManagerConfigure>(
-      "~/manager/configure", std::bind(
-        &GimbalControlPlugin::manager_configure_cb,
-        this, _1, _2));
-
-    gimbal_manager_pitchyaw_srv = node->create_service<mavros_msgs::srv::GimbalManagerPitchyaw>(
-      "~/manager/pitchyaw", std::bind(
-        &GimbalControlPlugin::manager_pitchyaw_cb,
-        this, _1, _2));
-
-    gimbal_manager_set_roi_srv = node->create_service<mavros_msgs::srv::GimbalManagerSetRoi>(
-      "~/manager/set_roi", std::bind(
-        &GimbalControlPlugin::manager_set_roi_cb,
-        this, _1, _2));
-
-    // --Not successfully validated--
-    gimbal_manager_camera_track = node->create_service<mavros_msgs::srv::GimbalManagerCameraTrack>(
-      "~/manager/camera_track", std::bind(
-        &GimbalControlPlugin::manager_camera_track,
-        this, _1, _2));
-
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&GimbalControlPlugin::handle_gimbal_attitude_status),
-      make_handler(&GimbalControlPlugin::handle_manager_status),
-      make_handler(&GimbalControlPlugin::handle_device_information),
-      make_handler(&GimbalControlPlugin::handle_manager_information),
-    };
-  }
-
-private:
-  // Callback Group
-  rclcpp::CallbackGroup::SharedPtr cb_group;
-  // Subscribers
-  rclcpp::Subscription<mavros_msgs::msg::GimbalDeviceSetAttitude>::SharedPtr set_device_attitude_sub;
-  rclcpp::Subscription<mavros_msgs::msg::GimbalManagerSetAttitude>::SharedPtr
-    set_manager_attitude_sub;
-  rclcpp::Subscription<mavros_msgs::msg::GimbalManagerSetPitchyaw>::SharedPtr
-    set_manager_pitchyaw_sub;
-  rclcpp::Subscription<mavros_msgs::msg::GimbalManagerSetPitchyaw>::SharedPtr
-    set_manager_manual_control_sub;
-
-  // Publishers
-  rclcpp::Publisher<mavros_msgs::msg::GimbalDeviceAttitudeStatus>::SharedPtr
-    gimbal_attitude_status_pub;
-  rclcpp::Publisher<mavros_msgs::msg::GimbalManagerStatus>::SharedPtr gimbal_manager_status_pub;
-  rclcpp::Publisher<mavros_msgs::msg::GimbalManagerInformation>::SharedPtr gimbal_manager_info_pub;
-  rclcpp::Publisher<mavros_msgs::msg::GimbalDeviceInformation>::SharedPtr gimbal_device_info_pub;
-
-  // Services
-  rclcpp::Service<mavros_msgs::srv::GimbalGetInformation>::SharedPtr gimbal_device_info_srv;
-  rclcpp::Service<mavros_msgs::srv::GimbalGetInformation>::SharedPtr gimbal_manager_info_srv;
-  rclcpp::Service<mavros_msgs::srv::GimbalManagerConfigure>::SharedPtr gimbal_manager_configure_srv;
-  rclcpp::Service<mavros_msgs::srv::GimbalManagerPitchyaw>::SharedPtr gimbal_manager_pitchyaw_srv;
-  rclcpp::Service<mavros_msgs::srv::GimbalManagerSetRoi>::SharedPtr gimbal_manager_set_roi_srv;
-  rclcpp::Service<mavros_msgs::srv::GimbalManagerCameraTrack>::SharedPtr gimbal_manager_camera_track;
-
-  // Clients
-  rclcpp::Client<mavros_msgs::srv::CommandLong>::SharedPtr cmd_cli;
-  std::shared_timed_mutex mu;
-
-  std::string frame_id;       // origin frame for topic headers
-  std::string tf_frame_id;    // origin frame for TF
-  std::atomic<bool> tf_send;  // parameter for enabling TF publishing
-
-  // Client used by all services for sending mavros/cmd/command service calls, on a separate callback group to support nested service calls
-  rclcpp::Client<mavros_msgs::srv::CommandLong>::SharedPtr get_cmd_cli()
-  {
-    s_shared_lock lock(mu);
-
-    if (cmd_cli) {
-      return cmd_cli;
-    }
-
-#ifdef USE_OLD_RMW_QOS
-    auto services_qos = rmw_qos_profile_services_default;
-#else
-    auto services_qos = rclcpp::ServicesQoS();
-#endif
-
-    cmd_cli = node->create_client<mavros_msgs::srv::CommandLong>("cmd/command", services_qos,
-          cb_group);
-    while (!cmd_cli->wait_for_service(std::chrono::seconds(5))) {
-      RCLCPP_ERROR(node->get_logger(),
-            "GimbalControl: mavros/cmd/command service not available after waiting");
-      cmd_cli.reset();
-      throw std::logic_error("client not connected");
-    }
-
-    return cmd_cli;
-  }
-
-  // Transform Publisher
-  void publish_tf(mavros_msgs::msg::GimbalDeviceAttitudeStatus & gimbal_attitude_msg)
-  {
-    if (tf_send) {
-      geometry_msgs::msg::TransformStamped transform;
-      transform.header.stamp = gimbal_attitude_msg.header.stamp;
-      transform.header.frame_id = tf_frame_id;
-      // TF child_frame_id with format "gimbal_<component_id>" where the component_id comes from the gimbal_attitude_msg
-      transform.child_frame_id = "gimbal_" + std::to_string(gimbal_attitude_msg.target_component);
-      transform.transform.rotation = gimbal_attitude_msg.q;
-      uas->tf2_broadcaster.sendTransform(transform);
-    }
-  }
-
-  // Mavlink subscriber callbacks
-  /**
-   * @brief Publish the gimbal orientation
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_ATTITUDE_STATUS
-   * @param msg - the mavlink message
-   * @param mo - received GimbalDeviceAttitudeStatus msg
-   */
-  void handle_gimbal_attitude_status(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GIMBAL_DEVICE_ATTITUDE_STATUS & mo,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    mavros_msgs::msg::GimbalDeviceAttitudeStatus gimbal_attitude_msg;
-    gimbal_attitude_msg.header = uas->synchronized_header(frame_id, mo.time_boot_ms);
-    gimbal_attitude_msg.target_system = mo.target_system;
-    gimbal_attitude_msg.target_component = mo.target_component;
-    gimbal_attitude_msg.flags = mo.flags;
-    auto q = mavros::ftf::mavlink_to_quaternion(mo.q);
-    gimbal_attitude_msg.q = tf2::toMsg(q);
-    gimbal_attitude_msg.angular_velocity_x = mo.angular_velocity_x;
-    gimbal_attitude_msg.angular_velocity_y = mo.angular_velocity_y;
-    gimbal_attitude_msg.angular_velocity_z = mo.angular_velocity_z;
-    gimbal_attitude_msg.failure_flags = mo.failure_flags;
-
-    gimbal_attitude_status_pub->publish(gimbal_attitude_msg);
-
-    // publish tf
-    publish_tf(gimbal_attitude_msg);
-  }
-
-  /**
-   * @brief Publish gimbal manager status
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_STATUS
-   * @param msg - the mavlink message
-   * @param ms - received ManagerStatus msg
-   */
-  void handle_manager_status(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GIMBAL_MANAGER_STATUS & ms,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    mavros_msgs::msg::GimbalManagerStatus gimbal_manager_status_msg;
-    gimbal_manager_status_msg.header = uas->synchronized_header(frame_id, ms.time_boot_ms);
-    gimbal_manager_status_msg.flags = ms.flags;
-    gimbal_manager_status_msg.gimbal_device_id = ms.gimbal_device_id;
-    gimbal_manager_status_msg.sysid_primary = ms.primary_control_sysid;
-    gimbal_manager_status_msg.compid_primary = ms.primary_control_compid;
-    gimbal_manager_status_msg.sysid_secondary = ms.secondary_control_sysid;
-    gimbal_manager_status_msg.compid_secondary = ms.secondary_control_compid;
-
-    gimbal_manager_status_pub->publish(gimbal_manager_status_msg);
-  }
-
-  /**
-   * @brief Publish gimbal device information - Note: this message is only published on request by default (see device_get_info_cb)
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_INFORMATION
-   * @param msg - the mavlink message
-   * @param di - received GimbalDeviceInformation msg
-   */
-  void handle_device_information(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GIMBAL_DEVICE_INFORMATION & di,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    mavros_msgs::msg::GimbalDeviceInformation gimbal_device_information_msg;
-    gimbal_device_information_msg.header = uas->synchronized_header(frame_id, di.time_boot_ms);
-    gimbal_device_information_msg.vendor_name = mavlink::to_string(di.vendor_name);
-    gimbal_device_information_msg.model_name = mavlink::to_string(di.model_name);
-    gimbal_device_information_msg.custom_name = mavlink::to_string(di.custom_name);
-    gimbal_device_information_msg.firmware_version = di.firmware_version;
-    gimbal_device_information_msg.hardware_version = di.hardware_version;
-    gimbal_device_information_msg.uid = di.uid;
-    gimbal_device_information_msg.cap_flags = di.cap_flags;
-    gimbal_device_information_msg.custom_cap_flags = di.custom_cap_flags;
-    gimbal_device_information_msg.roll_min = di.roll_min;
-    gimbal_device_information_msg.roll_max = di.roll_max;
-    gimbal_device_information_msg.pitch_min = di.pitch_min;
-    gimbal_device_information_msg.pitch_max = di.pitch_max;
-    gimbal_device_information_msg.yaw_min = di.yaw_min;
-    gimbal_device_information_msg.yaw_max = di.yaw_max;
-
-    gimbal_device_info_pub->publish(gimbal_device_information_msg);
-  }
-
-  /**
-   * @brief Publish gimbal manager information - Note: this message is only published on request by default (see manager_get_info_cb)
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_STATUS
-   * @param msg - the mavlink message
-   * @param mi - received GimbalManagerInformation msg
-   */
-  void handle_manager_information(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GIMBAL_MANAGER_INFORMATION & mi,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    mavros_msgs::msg::GimbalManagerInformation gimbal_manager_information_msg;
-    gimbal_manager_information_msg.header = uas->synchronized_header(frame_id, mi.time_boot_ms);
-    gimbal_manager_information_msg.cap_flags = mi.cap_flags;
-    gimbal_manager_information_msg.gimbal_device_id = mi.gimbal_device_id;
-    gimbal_manager_information_msg.roll_min = mi.roll_min;
-    gimbal_manager_information_msg.roll_max = mi.roll_max;
-    gimbal_manager_information_msg.pitch_min = mi.pitch_min;
-    gimbal_manager_information_msg.pitch_max = mi.pitch_max;
-    gimbal_manager_information_msg.yaw_min = mi.yaw_min;
-    gimbal_manager_information_msg.yaw_max = mi.yaw_max;
-
-    gimbal_manager_info_pub->publish(gimbal_manager_information_msg);
-  }
-
-  // ROS subscriber callbacks
-  /**
-   * @brief Send attitude control commands to gimbal device
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_SET_ATTITUDE
-   * @param req	- received GimbalControl msg
-   */
-  void device_set_attitude_cb(const mavros_msgs::msg::GimbalDeviceSetAttitude::SharedPtr req)
-  {
-    mavlink::common::msg::GIMBAL_DEVICE_SET_ATTITUDE msg;
-    std::array<float, 4UL> new_q;
-    new_q[0] = req->q.w;
-    new_q[1] = req->q.x;
-    new_q[2] = req->q.y;
-    new_q[3] = req->q.z;
-    uas->msg_set_target(msg);
-    msg.target_system = req->target_system;
-    msg.target_component = req->target_component;
-    msg.flags = req->flags;
-    msg.q = new_q;
-    msg.angular_velocity_x = req->angular_velocity_x;
-    msg.angular_velocity_y = req->angular_velocity_y;
-    msg.angular_velocity_z = req->angular_velocity_z;
-
-    uas->send_message(msg);
-  }
-
-  /**
-   * @brief Send attitude control commands to gimbal manager
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_ATTITUDE
-   * @param req	- received GimbalControl msg
-   */
-  void manager_set_attitude_cb(const mavros_msgs::msg::GimbalManagerSetAttitude::SharedPtr req)
-  {
-    mavlink::common::msg::GIMBAL_MANAGER_SET_ATTITUDE msg {};
-    std::array<float, 4UL> new_q;
-    new_q[0] = req->q.w;
-    new_q[1] = req->q.x;
-    new_q[2] = req->q.y;
-    new_q[3] = req->q.z;
-    uas->msg_set_target(msg);
-    msg.target_system = req->target_system;
-    msg.target_component = req->target_component;
-    msg.flags = req->flags;
-    msg.gimbal_device_id = req->gimbal_device_id;
-    msg.q = new_q;
-    msg.angular_velocity_x = req->angular_velocity_x;
-    msg.angular_velocity_y = req->angular_velocity_y;
-    msg.angular_velocity_z = req->angular_velocity_z;
-
-    uas->send_message(msg);
-  }
-
-  /**
-   * @brief Send pitchyaw control commands to gimbal manager
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_PITCHYAW
-   * @param req	- received GimbalControl msg
-   */
-  void manager_set_pitchyaw_cb(const mavros_msgs::msg::GimbalManagerSetPitchyaw::SharedPtr req)
-  {
-    mavlink::common::msg::GIMBAL_MANAGER_SET_PITCHYAW msg {};
-    uas->msg_set_target(msg);
-    msg.target_system = req->target_system;
-    msg.target_component = req->target_component;
-    msg.flags = req->flags;
-    msg.gimbal_device_id = req->gimbal_device_id;
-    msg.pitch = req->pitch;
-    msg.yaw = req->yaw;
-    msg.pitch_rate = req->pitch_rate;
-    msg.yaw_rate = req->yaw_rate;
-
-    uas->send_message(msg);
-  }
-
-  /**
-   * @brief Send manual control commands to gimbal manager
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_MANUAL_CONTROL
-   * Note that message contents is identical to that of pitchyaw, so the message type is re-used here
-   * @param req	- received GimbalControl msg
-   */
-  void manager_set_manual_control_cb(
-    const mavros_msgs::msg::GimbalManagerSetPitchyaw::SharedPtr req)
-  {
-    mavlink::common::msg::GIMBAL_MANAGER_SET_PITCHYAW msg {};
-    uas->msg_set_target(msg);
-    msg.target_system = req->target_system;
-    msg.target_component = req->target_component;
-    msg.flags = req->flags;
-    msg.gimbal_device_id = req->gimbal_device_id;
-    msg.pitch = req->pitch;
-    msg.yaw = req->yaw;
-    msg.pitch_rate = req->pitch_rate;
-    msg.yaw_rate = req->yaw_rate;
-
-    uas->send_message(msg);
-  }
-
-  // Service Callbacks
-  /**
-   * @brief Request GIMBAL_DEVICE_INFORMATION msg be broadcast through Mavlink (see handle_device_information)
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_INFORMATION
-   * @param req	- received GimbalGetInformation msg
-   */
-  void device_get_info_cb(
-    const mavros_msgs::srv::GimbalGetInformation::Request::SharedPtr req [[maybe_unused]],
-    mavros_msgs::srv::GimbalGetInformation::Response::SharedPtr res)
-  {
-    using mavlink::common::MAV_CMD;
-    try {
-      auto cmdrq = std::make_shared<mavros_msgs::srv::CommandLong::Request>();
-      cmdrq->command = enum_value(MAV_CMD::REQUEST_MESSAGE);
-      cmdrq->param1 = mavlink::common::msg::GIMBAL_DEVICE_INFORMATION::MSG_ID;
-      auto future = get_cmd_cli()->async_send_request(cmdrq);
-      auto response = future.get();
-      res->success = response->success;
-      res->result = response->result;
-    } catch (std::exception & ex) {
-      RCLCPP_ERROR(get_logger(), "GimbalControl: %s", ex.what());
-    }
-    RCLCPP_ERROR_EXPRESSION(
-      get_logger(), !res->success, "GimbalControl: plugin service call failed!");
-  }
-
-  void device_get_info_response(
-    rclcpp::Client<mavros_msgs::srv::CommandLong>::SharedFuture response)
-  {
-    auto result = response.get();
-
-  }
-
-  /**
-   * @brief Request GIMBAL_MANAGER_INFORMATION msg be broadcast through Mavlink (see handle_manager_information)
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_INFORMATION
-   * @param req	- received GimbalControl msg
-   */
-  void manager_get_info_cb(
-    const mavros_msgs::srv::GimbalGetInformation::Request::SharedPtr req [[maybe_unused]],
-    mavros_msgs::srv::GimbalGetInformation::Response::SharedPtr res)
-  {
-    using mavlink::common::MAV_CMD;
-    try {
-      auto cmdrq = std::make_shared<mavros_msgs::srv::CommandLong::Request>();
-      cmdrq->command = enum_value(MAV_CMD::REQUEST_MESSAGE);
-      cmdrq->param1 = mavlink::common::msg::GIMBAL_MANAGER_INFORMATION::MSG_ID;
-      auto future = get_cmd_cli()->async_send_request(cmdrq);
-      auto response = future.get();
-      res->success = response->success;
-      res->result = response->result;
-    } catch (std::exception & ex) {
-      RCLCPP_ERROR(get_logger(), "GimbalControl: %s", ex.what());
-    }
-    RCLCPP_ERROR_EXPRESSION(
-      get_logger(), !res->success, "GimbalControl: plugin service call failed!");
-  }
-
-  /**
-   * @brief Configure gimbal manager
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
-   * @param req	- received GimbalControl msg
-   */
-  void manager_configure_cb(
-    mavros_msgs::srv::GimbalManagerConfigure::Request::SharedPtr req,
-    mavros_msgs::srv::GimbalManagerConfigure::Response::SharedPtr res)
-  {
-    using mavlink::common::MAV_CMD;
-
-    try {
-      auto cmdrq = std::make_shared<mavros_msgs::srv::CommandLong::Request>();
-      cmdrq->command = enum_value(MAV_CMD::DO_GIMBAL_MANAGER_CONFIGURE);
-      cmdrq->param1 = req->sysid_primary;
-      cmdrq->param2 = req->compid_primary;
-      cmdrq->param3 = req->sysid_secondary;
-      cmdrq->param4 = req->compid_secondary;
-      cmdrq->param7 = req->gimbal_device_id;
-      auto future = get_cmd_cli()->async_send_request(cmdrq);
-      auto response = future.get();
-      res->success = response->success;
-      res->result = response->result;
-    } catch (std::exception & ex) {
-      RCLCPP_ERROR(get_logger(), "GimbalControl: %s", ex.what());
-    }
-    RCLCPP_ERROR_EXPRESSION(
-      get_logger(), !res->success, "GimbalControl: plugin service call failed!");
-  }
-
-  /**
-   * @brief Send pitch/yaw command to gimbal manager
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW
-   * @param req	- received GimbalControl msg
-   */
-  void manager_pitchyaw_cb(
-    mavros_msgs::srv::GimbalManagerPitchyaw::Request::SharedPtr req,
-    mavros_msgs::srv::GimbalManagerPitchyaw::Response::SharedPtr res)
-  {
-    using mavlink::common::MAV_CMD;
-
-    try {
-      auto cmdrq = std::make_shared<mavros_msgs::srv::CommandLong::Request>();
-      cmdrq->command = enum_value(MAV_CMD::DO_GIMBAL_MANAGER_PITCHYAW);
-      cmdrq->param1 = req->pitch;
-      cmdrq->param2 = req->yaw;
-      cmdrq->param3 = req->pitch_rate;
-      cmdrq->param4 = req->yaw_rate;
-      cmdrq->param5 = req->flags;
-      cmdrq->param7 = req->gimbal_device_id;
-      auto future = get_cmd_cli()->async_send_request(cmdrq);
-      auto response = future.get();
-      res->success = response->success;
-      res->result = response->result;
-    } catch (std::exception & ex) {
-      RCLCPP_ERROR(get_logger(), "GimbalControl: %s", ex.what());
-    }
-    RCLCPP_ERROR_EXPRESSION(
-      get_logger(), !res->success, "GimbalControl: plugin service call failed!");
-  }
-
-  /**
-   * @brief Set Gimbal ROI mode and parameters
-   *
-   * Message specifications:
-   * https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_LOCATION
-   * https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
-   * https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_SYSID
-   * https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_NONE
-   * @param req	- received GimbalControl msg
-   */
-  void manager_set_roi_cb(
-    mavros_msgs::srv::GimbalManagerSetRoi::Request::SharedPtr req,
-    mavros_msgs::srv::GimbalManagerSetRoi::Response::SharedPtr res)
-  {
-    using mavlink::common::MAV_CMD;
-
-    try {
-      auto cmdrq = std::make_shared<mavros_msgs::srv::CommandLong::Request>();
-      if (req->mode == req->ROI_MODE_LOCATION) {
-        cmdrq->command = enum_value(MAV_CMD::DO_SET_ROI_LOCATION);
-        cmdrq->param1 = req->gimbal_device_id;
-        cmdrq->param5 = req->latitude;
-        cmdrq->param6 = req->longitude;
-        cmdrq->param7 = req->altitude;
-      } else if (req->mode == req->ROI_MODE_WP_NEXT_OFFSET) {
-        cmdrq->command = enum_value(MAV_CMD::DO_SET_ROI_WPNEXT_OFFSET);
-        cmdrq->param1 = req->gimbal_device_id;
-        cmdrq->param5 = req->pitch_offset;
-        cmdrq->param6 = req->roll_offset;
-        cmdrq->param7 = req->yaw_offset;
-      } else if (req->mode == req->ROI_MODE_SYSID) {
-        cmdrq->command = enum_value(MAV_CMD::DO_SET_ROI_SYSID);
-        cmdrq->param1 = req->sysid;
-        cmdrq->param2 = req->gimbal_device_id;
-      } else if (req->mode == req->ROI_MODE_NONE) {
-        cmdrq->command = enum_value(MAV_CMD::DO_SET_ROI_NONE);
-        cmdrq->param1 = req->gimbal_device_id;
-      } else {
-        res->success = false;
-        res->result = 2; // MAV_RESULT_DENIED - Command is invalid (is supported but has invalid parameters). Retrying same command and parameters will not work.
-        return;
-      }
-
-      // RCLCPP_DEBUG(get_logger(), "GimbalManagerSetRoi for gimbal id: %u ", req->gimbal_device_id);
-      auto future = get_cmd_cli()->async_send_request(cmdrq);
-      auto response = future.get();
-      res->success = response->success;
-      res->result = response->result;
-    } catch (std::exception & ex) {
-      RCLCPP_ERROR(get_logger(), "GimbalManagerSetRoi: %s", ex.what());
-    }
-
-    RCLCPP_ERROR_EXPRESSION(
-      get_logger(), !res->success, "GimbalManager - set roi: plugin service call failed!");
-  }
-
-  /**
-   * @brief Set camera tracking mode and parameters
-   *
-   * Message specifications:
-   * https://mavlink.io/en/messages/common.html#MAV_CMD_CAMERA_TRACK_POINT
-   * https://mavlink.io/en/messages/common.html#MAV_CMD_CAMERA_TRACK_RECTANGLE
-   * https://mavlink.io/en/messages/common.html#MAV_CMD_CAMERA_STOP_TRACKING
-   * @param req	- received GimbalControl msg
-   */
-  void manager_camera_track(
-    mavros_msgs::srv::GimbalManagerCameraTrack::Request::SharedPtr req,
-    mavros_msgs::srv::GimbalManagerCameraTrack::Response::SharedPtr res)
-  {
-    using mavlink::common::MAV_CMD;
-
-    try {
-      auto cmdrq = std::make_shared<mavros_msgs::srv::CommandLong::Request>();
-      if (req->mode == req->CAMERA_TRACK_MODE_POINT) {
-        cmdrq->command = enum_value(MAV_CMD::CAMERA_TRACK_POINT);
-        cmdrq->param1 = req->x;
-        cmdrq->param2 = req->y;
-        cmdrq->param3 = req->radius;
-      } else if (req->mode == req->CAMERA_TRACK_MODE_RECTANGLE) {
-        cmdrq->command = enum_value(MAV_CMD::CAMERA_TRACK_RECTANGLE);
-        cmdrq->param1 = req->top_left_x;
-        cmdrq->param2 = req->top_left_y;
-        cmdrq->param3 = req->bottom_right_x;
-        cmdrq->param4 = req->bottom_right_y;
-      } else if (req->mode == req->CAMERA_TRACK_MODE_STOP_TRACKING) {
-        cmdrq->command = enum_value(MAV_CMD::CAMERA_STOP_TRACKING);
-      } else {
-        res->success = false;
-        res->result = 2; // MAV_RESULT_DENIED - Command is invalid (is supported but has invalid parameters). Retrying same command and parameters will not work.
-        return;
-      }
-
-      auto future = get_cmd_cli()->async_send_request(cmdrq);
-      auto response = future.get();
-      res->success = response->success;
-      res->result = response->result;
-    } catch (std::exception & ex) {
-      RCLCPP_ERROR(get_logger(), "GimbalManagerCameraTrack: %s", ex.what());
-    }
-
-    RCLCPP_ERROR_EXPRESSION(
-      get_logger(), !res->success, "GimbalManager - camera track: plugin service call failed!");
-  }
-};
-
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::GimbalControlPlugin)
diff --git a/mavros_extras/src/plugins/gps_input.cpp b/mavros_extras/src/plugins/gps_input.cpp
deleted file mode 100644
index 06a971b9..00000000
--- a/mavros_extras/src/plugins/gps_input.cpp
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Copyright 2019 Amilcar Lucas.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief GPS_INPUT plugin
- * @file gps_input.cpp
- * @author Amilcar Lucas <amilcar.lucas@iav.de>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/gpsinput.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-using mavlink::common::GPS_FIX_TYPE;
-using mavlink::common::GPS_INPUT_IGNORE_FLAGS;
-
-/**
- * @brief GPS_INPUT GPS plugin.
- * @plugin gps_input
- *
- * Sends <a href="https://mavlink.io/en/messages/common.html#GPS_INPUT">GPS_INPUT MAVLink messages</a>
- */
-class GpsInputPlugin : public plugin::Plugin
-{
-public:
-  explicit GpsInputPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "gps_input")
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "gps_rate", 5.0, [&](const rclcpp::Parameter & p) {
-        rclcpp::Rate rate(p.as_double());
-
-        rate_period = rate.period();
-      });
-
-    gps_input_sub = node->create_subscription<mavros_msgs::msg::GPSINPUT>(
-      "~/gps_input", 1, std::bind(
-        &GpsInputPlugin::send_cb, this,
-        _1));
-  }
-
-  Subscriptions get_subscriptions()
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::GPSINPUT>::SharedPtr gps_input_sub;
-
-  std::chrono::nanoseconds rate_period;
-  rclcpp::Time last_pos_time;
-
-  /* -*- callbacks -*- */
-
-  /**
-   * @brief Send GPS coordinates through GPS_INPUT Mavlink message
-   */
-  void send_cb(const mavros_msgs::msg::GPSINPUT::SharedPtr ros_msg)
-  {
-    auto now_ = node->now();
-
-    // Throttle incoming messages
-    if ((now_ - last_pos_time).to_chrono<std::chrono::nanoseconds>() < rate_period) {
-      return;
-    }
-    last_pos_time = now_;
-
-    /**
-     * @note: <a href="https://mavlink.io/en/messages/common.html#GPS_INPUT">GPS_INPUT MAVLink message</a>
-     * is currently only supported by Ardupilot firmware
-     */
-    mavlink::common::msg::GPS_INPUT gps_input {};
-
-    // [[[cog:
-    // import pymavlink.dialects.v20.common as common
-    //
-    // for field in common.MAVLink_gps_input_message.fieldnames:
-    //     if field in ['time_usec']:
-    //         continue
-    //     cog.outl(f"gps_input.{field} = ros_msg->{field};")
-    // ]]]
-    gps_input.gps_id = ros_msg->gps_id;
-    gps_input.ignore_flags = ros_msg->ignore_flags;
-    gps_input.time_week_ms = ros_msg->time_week_ms;
-    gps_input.time_week = ros_msg->time_week;
-    gps_input.fix_type = ros_msg->fix_type;
-    gps_input.lat = ros_msg->lat;
-    gps_input.lon = ros_msg->lon;
-    gps_input.alt = ros_msg->alt;
-    gps_input.hdop = ros_msg->hdop;
-    gps_input.vdop = ros_msg->vdop;
-    gps_input.vn = ros_msg->vn;
-    gps_input.ve = ros_msg->ve;
-    gps_input.vd = ros_msg->vd;
-    gps_input.speed_accuracy = ros_msg->speed_accuracy;
-    gps_input.horiz_accuracy = ros_msg->horiz_accuracy;
-    gps_input.vert_accuracy = ros_msg->vert_accuracy;
-    gps_input.satellites_visible = ros_msg->satellites_visible;
-    gps_input.yaw = ros_msg->yaw;
-    // [[[end]]] (checksum: 303dffa9e430561ad0e254448d3f403a)
-
-    gps_input.time_usec = get_time_usec(ros_msg->header.stamp);
-
-    uas->send_message(gps_input);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::GpsInputPlugin)
diff --git a/mavros_extras/src/plugins/gps_rtk.cpp b/mavros_extras/src/plugins/gps_rtk.cpp
deleted file mode 100644
index 9b74df2b..00000000
--- a/mavros_extras/src/plugins/gps_rtk.cpp
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * Copyright 2018 Alexis Paques.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief GPS RTK plugin
- * @file gps_rtk.cpp
- * @author Alexis Paques <alexis.paques@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/rtcm.hpp"
-#include "mavros_msgs/msg/rtk_baseline.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief GPS RTK plugin
- * @plugin gps_rtk
- *
- * 1. Publish the RTCM messages from ROS to the FCU
- * 2. Publish RTK baseline data from the FCU to ROS
- */
-class GpsRtkPlugin : public plugin::Plugin
-{
-public:
-  explicit GpsRtkPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "gps_rtk")
-  {
-    gps_rtk_sub =
-      node->create_subscription<mavros_msgs::msg::RTCM>(
-      "~/send_rtcm", 10,
-      std::bind(&GpsRtkPlugin::rtcm_cb, this, _1));
-
-    // TODO(vooon): set QoS for latched topic
-    rtk_baseline_pub = node->create_publisher<mavros_msgs::msg::RTKBaseline>("~/rtk_baseline", 1);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&GpsRtkPlugin::handle_baseline_msg)
-    };
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::RTCM>::SharedPtr gps_rtk_sub;
-  rclcpp::Publisher<mavros_msgs::msg::RTKBaseline>::SharedPtr rtk_baseline_pub;
-
-  mavros_msgs::msg::RTKBaseline rtk_baseline_;
-  std::atomic_uint rtcm_seq;
-
-  /* -*- callbacks -*- */
-
-  /**
-   * @brief Handle mavros_msgs::RTCM message
-   * It converts the message to the MAVLink GPS_RTCM_DATA message for GPS injection.
-   * Message specification: https://mavlink.io/en/messages/common.html#GPS_RTCM_DATA
-   * @param msg		Received ROS msg
-   */
-  void rtcm_cb(const mavros_msgs::msg::RTCM::SharedPtr msg)
-  {
-    mavlink::common::msg::GPS_RTCM_DATA rtcm_data = {};
-    const size_t max_frag_len = rtcm_data.data.size();
-
-    uint8_t seq_u5 = uint8_t(rtcm_seq.fetch_add(1) & 0x1F) << 3;
-
-    if (msg->data.size() > 4 * max_frag_len) {
-      RCLCPP_ERROR(
-        get_logger(),
-        "gps_rtk: RTCM message received is bigger than the maximal possible size.");
-      return;
-    }
-
-    auto data_it = msg->data.begin();
-    auto end_it = msg->data.end();
-
-    if (msg->data.size() <= max_frag_len) {
-      rtcm_data.len = msg->data.size();
-      rtcm_data.flags = seq_u5;
-      std::copy(data_it, end_it, rtcm_data.data.begin());
-      std::fill(rtcm_data.data.begin() + rtcm_data.len, rtcm_data.data.end(), 0);
-      uas->send_message(rtcm_data);
-    } else {
-      for (uint8_t fragment_id = 0; fragment_id < 4 && data_it < end_it; fragment_id++) {
-        uint8_t len = std::min(static_cast<size_t>(std::distance(data_it, end_it)), max_frag_len);
-        rtcm_data.flags = 1;                    // LSB set indicates message is fragmented
-        rtcm_data.flags |= fragment_id << 1;    // Next 2 bits are fragment id
-        rtcm_data.flags |= seq_u5;              // Next 5 bits are sequence id
-        rtcm_data.len = len;
-
-        std::copy(data_it, data_it + len, rtcm_data.data.begin());
-        std::fill(rtcm_data.data.begin() + len, rtcm_data.data.end(), 0);
-        uas->send_message(rtcm_data);
-        std::advance(data_it, len);
-      }
-    }
-  }
-
-  /* MAvlink msg handlers */
-  /**
-   * @brief Publish GPS_RTK message (MAvlink Common) received from FCU.
-   * The message is already decoded by Mavlink, we only need to convert to ROS.
-   * Details and units: https://mavlink.io/en/messages/common.html#GPS_RTK
-   */
-
-  void handle_baseline_msg(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GPS_RTK & rtk_bsln,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // [[[cog:
-    // import pymavlink.dialects.v20.common as common
-    //
-    // for field in common.MAVLink_gps_rtk_message.fieldnames:
-    //     if field in ['time_usec']:
-    //         continue
-    //     cog.outl(f"rtk_baseline_.{field} = rtk_bsln.{field};")
-    // ]]]
-    rtk_baseline_.time_last_baseline_ms = rtk_bsln.time_last_baseline_ms;
-    rtk_baseline_.rtk_receiver_id = rtk_bsln.rtk_receiver_id;
-    rtk_baseline_.wn = rtk_bsln.wn;
-    rtk_baseline_.tow = rtk_bsln.tow;
-    rtk_baseline_.rtk_health = rtk_bsln.rtk_health;
-    rtk_baseline_.rtk_rate = rtk_bsln.rtk_rate;
-    rtk_baseline_.nsats = rtk_bsln.nsats;
-    rtk_baseline_.baseline_coords_type = rtk_bsln.baseline_coords_type;
-    rtk_baseline_.baseline_a_mm = rtk_bsln.baseline_a_mm;
-    rtk_baseline_.baseline_b_mm = rtk_bsln.baseline_b_mm;
-    rtk_baseline_.baseline_c_mm = rtk_bsln.baseline_c_mm;
-    rtk_baseline_.accuracy = rtk_bsln.accuracy;
-    rtk_baseline_.iar_num_hypotheses = rtk_bsln.iar_num_hypotheses;
-    // [[[end]]] (checksum: c123d29c2e0bce3becce956a29ed6152)
-    rtk_baseline_.header = uas->synchronized_header("", rtk_bsln.time_last_baseline_ms * 1000);
-
-    rtk_baseline_pub->publish(rtk_baseline_);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::GpsRtkPlugin)
diff --git a/mavros_extras/src/plugins/gps_status.cpp b/mavros_extras/src/plugins/gps_status.cpp
deleted file mode 100644
index 659d0a27..00000000
--- a/mavros_extras/src/plugins/gps_status.cpp
+++ /dev/null
@@ -1,214 +0,0 @@
-/**
- * @brief GPS status plugin
- * @file gps_status.cpp
- * @author Amilcar Lucas <amilcar.lucas@iav.de>
- *
- * @addtogroup plugin
- * @{
- */
-/*
- * Copyright 2019 Ardupilot.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-
-#include <string>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/gpsraw.hpp"
-#include "mavros_msgs/msg/gpsrtk.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-using mavlink::common::RTK_BASELINE_COORDINATE_SYSTEM;
-
-/**
- * @brief Mavlink GPS status plugin.
- * @plugin gps_status
- *
- * This plugin publishes GPS sensor data from a Mavlink compatible FCU to ROS.
- */
-class GpsStatusPlugin : public plugin::Plugin
-{
-public:
-  explicit GpsStatusPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "gpsstatus")
-  {
-    gps1_raw_pub = node->create_publisher<mavros_msgs::msg::GPSRAW>("~/gps1/raw", 10);
-    gps2_raw_pub = node->create_publisher<mavros_msgs::msg::GPSRAW>("~/gps2/raw", 10);
-    gps1_rtk_pub = node->create_publisher<mavros_msgs::msg::GPSRTK>("~/gps1/rtk", 10);
-    gps2_rtk_pub = node->create_publisher<mavros_msgs::msg::GPSRTK>("~/gps2/rtk", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&GpsStatusPlugin::handle_gps_raw_int),
-      make_handler(&GpsStatusPlugin::handle_gps2_raw),
-      make_handler(&GpsStatusPlugin::handle_gps_rtk),
-      make_handler(&GpsStatusPlugin::handle_gps2_rtk)
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::GPSRAW>::SharedPtr gps1_raw_pub;
-  rclcpp::Publisher<mavros_msgs::msg::GPSRAW>::SharedPtr gps2_raw_pub;
-  rclcpp::Publisher<mavros_msgs::msg::GPSRTK>::SharedPtr gps1_rtk_pub;
-  rclcpp::Publisher<mavros_msgs::msg::GPSRTK>::SharedPtr gps2_rtk_pub;
-
-  /* -*- callbacks -*- */
-  /**
-   * @brief Publish <a href="https://mavlink.io/en/messages/common.html#GPS_RAW_INT">mavlink GPS_RAW_INT message</a> into the gps1/raw topic.
-   */
-  void handle_gps_raw_int(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GPS_RAW_INT & mav_msg,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto ros_msg = mavros_msgs::msg::GPSRAW();
-
-    // [[[cog:
-    // import pymavlink.dialects.v20.common as common
-    //
-    // def outl_raw_msg(msg):
-    //     for field in msg.fieldnames:
-    //         if field in ['time_usec']:
-    //             continue
-    //         cog.outl(f"ros_msg.{field} = mav_msg.{field};")
-    //
-    // outl_raw_msg(common.MAVLink_gps_raw_int_message)
-    // ]]]
-    ros_msg.fix_type = mav_msg.fix_type;
-    ros_msg.lat = mav_msg.lat;
-    ros_msg.lon = mav_msg.lon;
-    ros_msg.alt = mav_msg.alt;
-    ros_msg.eph = mav_msg.eph;
-    ros_msg.epv = mav_msg.epv;
-    ros_msg.vel = mav_msg.vel;
-    ros_msg.cog = mav_msg.cog;
-    ros_msg.satellites_visible = mav_msg.satellites_visible;
-    ros_msg.alt_ellipsoid = mav_msg.alt_ellipsoid;
-    ros_msg.h_acc = mav_msg.h_acc;
-    ros_msg.v_acc = mav_msg.v_acc;
-    ros_msg.vel_acc = mav_msg.vel_acc;
-    ros_msg.hdg_acc = mav_msg.hdg_acc;
-    ros_msg.yaw = mav_msg.yaw;
-    // [[[end]]] (checksum: 5803a4026c6f569e7cc00b66156640f9)
-    ros_msg.header = uas->synchronized_header("/wgs84", mav_msg.time_usec);
-    ros_msg.dgps_numch = UINT8_MAX;     // information not available in GPS_RAW_INT mavlink message
-    ros_msg.dgps_age = UINT32_MAX;      // information not available in GPS_RAW_INT mavlink message
-
-    gps1_raw_pub->publish(ros_msg);
-  }
-
-  /**
-   * @brief Publish <a href="https://mavlink.io/en/messages/common.html#GPS2_RAW">mavlink GPS2_RAW message</a> into the gps2/raw topic.
-   */
-  void handle_gps2_raw(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GPS2_RAW & mav_msg,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto ros_msg = mavros_msgs::msg::GPSRAW();
-
-    // [[[cog:
-    // outl_raw_msg(common.MAVLink_gps2_raw_message)
-    // ]]]
-    ros_msg.fix_type = mav_msg.fix_type;
-    ros_msg.lat = mav_msg.lat;
-    ros_msg.lon = mav_msg.lon;
-    ros_msg.alt = mav_msg.alt;
-    ros_msg.eph = mav_msg.eph;
-    ros_msg.epv = mav_msg.epv;
-    ros_msg.vel = mav_msg.vel;
-    ros_msg.cog = mav_msg.cog;
-    ros_msg.satellites_visible = mav_msg.satellites_visible;
-    ros_msg.dgps_numch = mav_msg.dgps_numch;
-    ros_msg.dgps_age = mav_msg.dgps_age;
-    ros_msg.yaw = mav_msg.yaw;
-    ros_msg.alt_ellipsoid = mav_msg.alt_ellipsoid;
-    ros_msg.h_acc = mav_msg.h_acc;
-    ros_msg.v_acc = mav_msg.v_acc;
-    ros_msg.vel_acc = mav_msg.vel_acc;
-    ros_msg.hdg_acc = mav_msg.hdg_acc;
-    // [[[end]]] (checksum: 1d71e875394bf6abb6c46e39801cdc19)
-    ros_msg.header = uas->synchronized_header("/wgs84", mav_msg.time_usec);
-
-    gps2_raw_pub->publish(ros_msg);
-  }
-
-  template<typename MMsg>
-  mavros_msgs::msg::GPSRTK convert_rtk(MMsg mav_msg)
-  {
-    auto ros_msg = mavros_msgs::msg::GPSRTK();
-
-    std::string frame_id = "unknown";
-    switch (static_cast<RTK_BASELINE_COORDINATE_SYSTEM>(mav_msg.baseline_coords_type)) {
-      case RTK_BASELINE_COORDINATE_SYSTEM::ECEF:
-        frame_id = "earth";
-        break;
-      case RTK_BASELINE_COORDINATE_SYSTEM::NED:
-        frame_id = "map";
-        break;
-      default:
-        RCLCPP_ERROR(
-          get_logger(),
-          "GPS_RTK.baseline_coords_type MAVLink field has unknown \"%d\" value",
-          mav_msg.baseline_coords_type);
-    }
-
-    ros_msg.header = uas->synchronized_header(
-      frame_id,
-      mav_msg.time_last_baseline_ms * 1000);
-
-    ros_msg.rtk_receiver_id = mav_msg.rtk_receiver_id;
-    ros_msg.wn = mav_msg.wn;
-    ros_msg.tow = mav_msg.tow;
-    ros_msg.rtk_health = mav_msg.rtk_health;
-    ros_msg.rtk_rate = mav_msg.rtk_rate;
-    ros_msg.nsats = mav_msg.nsats;
-    ros_msg.baseline_a = mav_msg.baseline_a_mm;
-    ros_msg.baseline_b = mav_msg.baseline_b_mm;
-    ros_msg.baseline_c = mav_msg.baseline_c_mm;
-    ros_msg.accuracy = mav_msg.accuracy;
-    ros_msg.iar_num_hypotheses = mav_msg.iar_num_hypotheses;
-
-    return ros_msg;
-  }
-
-  /**
-   * @brief Publish <a href="https://mavlink.io/en/messages/common.html#GPS_RTK">mavlink GPS_RTK message</a> into the gps1/rtk topic.
-   */
-  void handle_gps_rtk(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GPS_RTK & mav_msg,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    gps1_rtk_pub->publish(convert_rtk(mav_msg));
-  }
-
-  /**
-   * @brief Publish <a href="https://mavlink.io/en/messages/common.html#GPS2_RTK">mavlink GPS2_RTK message</a> into the gps2/rtk topic.
-   */
-  void handle_gps2_rtk(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::GPS2_RTK & mav_msg,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    gps2_rtk_pub->publish(convert_rtk(mav_msg));
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::GpsStatusPlugin)
diff --git a/mavros_extras/src/plugins/guided_target.cpp b/mavros_extras/src/plugins/guided_target.cpp
deleted file mode 100644
index c481e08d..00000000
--- a/mavros_extras/src/plugins/guided_target.cpp
+++ /dev/null
@@ -1,187 +0,0 @@
-/*
- * Copyright 2022 Sanket Sharma, Randy Mackay.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Guided target plugin
- * @file guided_target.cpp
- * @author Randy Mackay <rmackay9@yahoo.com> , Sanket Sharma <sharma.sanket272@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <string>
-
-#include <GeographicLib/Geocentric.hpp>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/position_target.hpp"
-#include "mavros_msgs/msg/global_position_target.hpp"
-#include "geometry_msgs/msg/pose_stamped.hpp"
-#include "geographic_msgs/msg/geo_point_stamped.hpp"
-#include "geographic_msgs/msg/geo_pose_stamped.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief guided target plugin
- * @plugin guided_target
- *
- * Send and receive setpoint positions from FCU controller.
- */
-class GuidedTargetPlugin : public plugin::Plugin
-{
-public:
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-  explicit GuidedTargetPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "guided_target"),
-    is_map_init(false),
-    prev()
-  {
-    enable_node_watch_parameters();
-
-    // frame params:
-    node_declare_and_watch_parameter(
-      "frame_id", "map", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    // Publish targets received from FCU
-    setpointg_pub = node->create_publisher<geometry_msgs::msg::PoseStamped>(
-      "/move_base_simple/goal", 10);
-
-
-    // Subscriber for global origin (aka map origin).
-    gp_origin_sub = node->create_subscription<geographic_msgs::msg::GeoPointStamped>(
-      "global_position/gp_origin", rclcpp::SensorDataQoS(),
-      std::bind(&GuidedTargetPlugin::gp_origin_cb, this, _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&GuidedTargetPlugin::handle_position_target_global_int)
-    };
-  }
-
-private:
-  //! global position target from FCU
-  rclcpp::Publisher<geometry_msgs::msg::PoseStamped>::SharedPtr setpointg_pub;
-  //! global origin LLA
-  rclcpp::Subscription<geographic_msgs::msg::GeoPointStamped>::SharedPtr gp_origin_sub;
-
-  Eigen::Vector3d current_gps;          //!< geodetic coordinates LLA
-
-  Eigen::Vector3d map_origin {};        //!< oigin of map frame [lla]
-  Eigen::Vector3d ecef_origin {};       //!< geocentric origin [m]
-
-  //! old time gps time stamp in [ms], to check if new gps msg is received
-  uint32_t old_gps_stamp = 0;
-
-  std::string frame_id;
-  bool is_map_init;
-
-  Eigen::Vector2d prev;
-
-  /* -*- mid-level helpers -*- */
-
-  /**
-   * global origin in LLA
-   */
-  void gp_origin_cb(const geographic_msgs::msg::GeoPointStamped::SharedPtr msg)
-  {
-    ecef_origin = {msg->position.latitude, msg->position.longitude, msg->position.altitude};
-    /**
-         * @brief Conversion from ECEF (Earth-Centered, Earth-Fixed) to geodetic coordinates (LLA)
-        */
-    GeographicLib::Geocentric earth(GeographicLib::Constants::WGS84_a(),
-      GeographicLib::Constants::WGS84_f());
-    try {
-      earth.Reverse(
-        ecef_origin.x(), ecef_origin.y(), ecef_origin.z(),
-        map_origin.x(), map_origin.y(), map_origin.z());
-    } catch (const std::exception & e) {
-      RCLCPP_WARN_STREAM(get_logger(), "setpoint: Caught exception: " << e.what() << std::endl);
-      return;
-    }
-
-    is_map_init = true;
-  }
-
-
-  /* -*- rx handler -*- */
-
-  /**
-   * @brief handle POSITION_TARGET_GLOBAL_INT mavlink msg
-   * handles and publishes position target received from FCU
-   */
-  void handle_position_target_global_int(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::POSITION_TARGET_GLOBAL_INT & position_target,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    using GPT = mavros_msgs::msg::GlobalPositionTarget;
-    auto lg = get_logger();
-
-    /* check if type_mask field ignores position*/
-    if ((position_target.type_mask & (GPT::IGNORE_LATITUDE | GPT::IGNORE_LONGITUDE)) > 0) {
-      RCLCPP_WARN(lg, "lat and/or lon ignored");
-      return;
-    }
-
-    /* check origin has been set */
-    if (!is_map_init) {
-      RCLCPP_WARN(lg, "PositionTargetGlobal failed because no origin");
-    }
-
-    /* convert lat/lon target to ECEF */
-    Eigen::Vector3d pos_target_ecef {};         //!< local ECEF coordinates on map frame [m]
-    GeographicLib::Geocentric earth(GeographicLib::Constants::WGS84_a(),
-      GeographicLib::Constants::WGS84_f());
-    try {
-      earth.Forward(
-        position_target.lat_int / 1E7, position_target.lon_int / 1E7, position_target.alt / 1E3,
-        pos_target_ecef.x(), pos_target_ecef.y(), pos_target_ecef.z());
-    } catch (const std::exception & e) {
-      RCLCPP_WARN_STREAM(lg, "Caught exception: " << e.what() << std::endl);
-      return;
-    }
-
-    /* create position target PoseStamped message */
-    auto pose = geometry_msgs::msg::PoseStamped();
-    pose.header = uas->synchronized_header(frame_id, position_target.time_boot_ms);
-    pose.pose.orientation.w = 1.0;              // unit quaternion with no rotation
-
-    /* convert ECEF target to ENU */
-    const Eigen::Vector3d local_ecef = pos_target_ecef - ecef_origin;
-    pose.pose.position = tf2::toMsg(ftf::transform_frame_ecef_enu(local_ecef, map_origin));
-    pose.pose.position.z = 0.0;                 // force z-axis to zero
-
-    /* publish target */
-    if (pose.pose.position.x != prev.x() || pose.pose.position.y != prev.y()) {
-      setpointg_pub->publish(pose);
-    }
-
-    prev.x() = pose.pose.position.x;
-    prev.y() = pose.pose.position.y;
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::GuidedTargetPlugin)
diff --git a/mavros_extras/src/plugins/hil.cpp b/mavros_extras/src/plugins/hil.cpp
deleted file mode 100644
index 31a30bfc..00000000
--- a/mavros_extras/src/plugins/hil.cpp
+++ /dev/null
@@ -1,372 +0,0 @@
-/*
- * Copyright 2016,2017 Mohamed Abdelkader, Nuno Marques, Pavel Vechersky, Beat Küng.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Hil plugin
- * @file hil.cpp
- * @author Mohamed Abdelkader <mohamedashraf123@gmail.com>
- * @author Nuno Marques <n.marques21@hotmail.com>
- * @author Pavel Vechersky <pvechersky@student.ethz.ch>
- * @author Beat Küng <beat-kueng@gmx.net>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/hil_controls.hpp"
-#include "mavros_msgs/msg/hil_actuator_controls.hpp"
-#include "mavros_msgs/msg/hil_state_quaternion.hpp"
-#include "mavros_msgs/msg/hil_gps.hpp"
-#include "mavros_msgs/msg/hil_sensor.hpp"
-#include "mavros_msgs/msg/optical_flow_rad.hpp"
-#include "mavros_msgs/msg/rc_in.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-//! Tesla to Gauss coeff
-static constexpr double TESLA_TO_GAUSS = 1.0e4;
-//! Pascal to millBar coeff
-static constexpr double PASCAL_TO_MILLIBAR = 1.0e-2;
-
-/**
- * @brief Hil plugin
- * @plugin hil
- */
-class HilPlugin : public plugin::Plugin
-{
-public:
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-  explicit HilPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "hil")
-  {
-    hil_state_quaternion_sub = node->create_subscription<mavros_msgs::msg::HilStateQuaternion>(
-      "~/state", 10, std::bind(&HilPlugin::state_quat_cb, this, _1));
-    hil_gps_sub =
-      node->create_subscription<mavros_msgs::msg::HilGPS>(
-      "~/gps", 10,
-      std::bind(&HilPlugin::gps_cb, this, _1));
-    hil_sensor_sub = node->create_subscription<mavros_msgs::msg::HilSensor>(
-      "~/imu_ned", 10, std::bind(
-        &HilPlugin::sensor_cb, this,
-        _1));
-    hil_flow_sub = node->create_subscription<mavros_msgs::msg::OpticalFlowRad>(
-      "~/optical_flow", 10, std::bind(
-        &HilPlugin::optical_flow_cb, this,
-        _1));
-    hil_rcin_sub =
-      node->create_subscription<mavros_msgs::msg::RCIn>(
-      "~/rc_inputs", 10,
-      std::bind(&HilPlugin::rcin_raw_cb, this, _1));
-
-    hil_controls_pub = node->create_publisher<mavros_msgs::msg::HilControls>("~/controls", 10);
-    hil_actuator_controls_pub = node->create_publisher<mavros_msgs::msg::HilActuatorControls>(
-      "~/actuator_controls", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&HilPlugin::handle_hil_controls),
-      make_handler(&HilPlugin::handle_hil_actuator_controls),
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::HilControls>::SharedPtr hil_controls_pub;
-  rclcpp::Publisher<mavros_msgs::msg::HilActuatorControls>::SharedPtr hil_actuator_controls_pub;
-
-  rclcpp::Subscription<mavros_msgs::msg::HilStateQuaternion>::SharedPtr hil_state_quaternion_sub;
-  rclcpp::Subscription<mavros_msgs::msg::HilGPS>::SharedPtr hil_gps_sub;
-  rclcpp::Subscription<mavros_msgs::msg::HilSensor>::SharedPtr hil_sensor_sub;
-  rclcpp::Subscription<mavros_msgs::msg::OpticalFlowRad>::SharedPtr hil_flow_sub;
-  rclcpp::Subscription<mavros_msgs::msg::RCIn>::SharedPtr hil_rcin_sub;
-
-  Eigen::Quaterniond enu_orientation;
-
-  /* -*- rx handlers -*- */
-
-  void handle_hil_controls(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::HIL_CONTROLS & hil_controls,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto hil_controls_msg = mavros_msgs::msg::HilControls();
-
-    hil_controls_msg.header.stamp = uas->synchronise_stamp(hil_controls.time_usec);
-    // [[[cog:
-    // for f in (
-    //     'roll_ailerons', 'pitch_elevator', 'yaw_rudder', 'throttle',
-    //     'aux1', 'aux2', 'aux3', 'aux4', 'mode', 'nav_mode'):
-    //     cog.outl(f"hil_controls_msg.{f} = hil_controls.{f};")
-    // ]]]
-    hil_controls_msg.roll_ailerons = hil_controls.roll_ailerons;
-    hil_controls_msg.pitch_elevator = hil_controls.pitch_elevator;
-    hil_controls_msg.yaw_rudder = hil_controls.yaw_rudder;
-    hil_controls_msg.throttle = hil_controls.throttle;
-    hil_controls_msg.aux1 = hil_controls.aux1;
-    hil_controls_msg.aux2 = hil_controls.aux2;
-    hil_controls_msg.aux3 = hil_controls.aux3;
-    hil_controls_msg.aux4 = hil_controls.aux4;
-    hil_controls_msg.mode = hil_controls.mode;
-    hil_controls_msg.nav_mode = hil_controls.nav_mode;
-    // [[[end]]] (checksum: c213771db088869eb1a7776f03eb1c23)
-
-    hil_controls_pub->publish(hil_controls_msg);
-  }
-
-  void handle_hil_actuator_controls(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::HIL_ACTUATOR_CONTROLS & hil_actuator_controls,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto hil_actuator_controls_msg = mavros_msgs::msg::HilActuatorControls();
-
-    hil_actuator_controls_msg.header.stamp = uas->synchronise_stamp(
-      hil_actuator_controls.time_usec);
-    const auto & arr = hil_actuator_controls.controls;
-    std::copy(arr.cbegin(), arr.cend(), hil_actuator_controls_msg.controls.begin());
-    hil_actuator_controls_msg.mode = hil_actuator_controls.mode;
-    hil_actuator_controls_msg.flags = hil_actuator_controls.flags;
-
-    hil_actuator_controls_pub->publish(hil_actuator_controls_msg);
-  }
-
-  /* -*- callbacks / low level send -*- */
-
-  /**
-   * @brief Send hil_state_quaternion to FCU.
-   * Message specification: @p https://mavlink.io/en/messages/common.html#HIL_STATE_QUATERNION
-   */
-  void state_quat_cb(const mavros_msgs::msg::HilStateQuaternion::SharedPtr req)
-  {
-    mavlink::common::msg::HIL_STATE_QUATERNION state_quat = {};
-
-    state_quat.time_usec = get_time_usec(req->header.stamp);
-    auto q = ftf::transform_orientation_baselink_aircraft(
-      ftf::transform_orientation_enu_ned(
-        ftf::to_eigen(req->orientation)));
-    ftf::quaternion_to_mavlink(q, state_quat.attitude_quaternion);
-    state_quat.lat = req->geo.latitude * 1E7;
-    state_quat.lon = req->geo.longitude * 1E7;
-    // @warning geographic_msgs/GeoPoint.msg uses WGS 84 reference ellipsoid
-    // @TODO: Convert altitude to AMSL to be received by the FCU
-    // related to issue #529
-    state_quat.alt = req->geo.altitude * 1E3;
-    state_quat.ind_airspeed = req->ind_airspeed * 1E2;
-    state_quat.true_airspeed = req->true_airspeed * 1E2;
-    // WRT world frame
-    auto ang_vel = ftf::transform_frame_enu_ned(
-      ftf::transform_frame_baselink_aircraft(
-        ftf::to_eigen(req->angular_velocity)));
-    auto lin_vel = ftf::transform_frame_enu_ned<Eigen::Vector3d>(
-      ftf::to_eigen(req->linear_velocity)) * 1E2;
-    // linear acceleration - WRT world frame
-    auto lin_acc = ftf::transform_frame_baselink_aircraft(
-      ftf::to_eigen(req->linear_acceleration));
-
-    // [[[cog:
-    // for a, b in zip(('rollspeed', 'pitchspeed', 'yawspeed'), "xyz"):
-    //     cog.outl(f"state_quat.{a} = ang_vel.{b}();")
-    // for f in "xyz":
-    //     cog.outl(f"state_quat.v{f} = lin_vel.{f}();")
-    // for f in "xyz":
-    //     cog.outl(f"state_quat.{f}acc = lin_acc.{f}();")
-    // ]]]
-    state_quat.rollspeed = ang_vel.x();
-    state_quat.pitchspeed = ang_vel.y();
-    state_quat.yawspeed = ang_vel.z();
-    state_quat.vx = lin_vel.x();
-    state_quat.vy = lin_vel.y();
-    state_quat.vz = lin_vel.z();
-    state_quat.xacc = lin_acc.x();
-    state_quat.yacc = lin_acc.y();
-    state_quat.zacc = lin_acc.z();
-    // [[[end]]] (checksum: 59683585adc102a8c5ec530d99f8664d)
-
-    uas->send_message(state_quat);
-  }
-
-  /**
-   * @brief Send hil_gps to FCU.
-   * Message specification: @p https://mavlink.io/en/messages/common.html#HIL_GPS
-   */
-  void gps_cb(const mavros_msgs::msg::HilGPS::SharedPtr req)
-  {
-    mavlink::common::msg::HIL_GPS gps = {};
-
-    gps.time_usec = get_time_usec(req->header.stamp);
-    gps.fix_type = req->fix_type;
-    gps.lat = req->geo.latitude * 1E7;
-    gps.lon = req->geo.longitude * 1E7;
-    // @warning geographic_msgs/GeoPoint.msg uses WGS 84 reference ellipsoid
-    // @TODO: Convert altitude to AMSL to be received by the FCU
-    // related to issue #529
-    gps.alt = req->geo.altitude * 1E3;
-    // [[[cog:
-    // for f in (
-    //     'eph', 'epv', 'vel', 'vn', 've', 'vd', 'cog'):
-    //     cog.outl(f"gps.{f} = req->{f} * 1E2;")
-    // ]]]
-    gps.eph = req->eph * 1E2;
-    gps.epv = req->epv * 1E2;
-    gps.vel = req->vel * 1E2;
-    gps.vn = req->vn * 1E2;
-    gps.ve = req->ve * 1E2;
-    gps.vd = req->vd * 1E2;
-    gps.cog = req->cog * 1E2;
-    // [[[end]]] (checksum: b71b4e33be4574667105126a43507e82)
-    gps.satellites_visible = req->satellites_visible;
-
-    uas->send_message(gps);
-  }
-
-  /**
-   * @brief Send hil_sensor to FCU.
-   * Message specification: @p https://mavlink.io/en/messages/common.html#HIL_SENSOR
-   */
-  void sensor_cb(const mavros_msgs::msg::HilSensor::SharedPtr req)
-  {
-    mavlink::common::msg::HIL_SENSOR sensor = {};
-
-    sensor.time_usec = get_time_usec(req->header.stamp);
-    // WRT world frame
-    auto acc = ftf::transform_frame_baselink_aircraft(
-      ftf::to_eigen(req->acc));
-    auto gyro = ftf::transform_frame_baselink_aircraft(
-      ftf::to_eigen(req->gyro));
-    auto mag = ftf::transform_frame_baselink_aircraft<Eigen::Vector3d>(
-      ftf::to_eigen(req->mag) * TESLA_TO_GAUSS);
-
-    // [[[cog:
-    // for a in ('acc', 'gyro', 'mag'):
-    //     for b in "xyz":
-    //         cog.outl(f"sensor.{b}{a} = {a}.{b}();")
-    // for f in (('abs_pressure', 'PASCAL_TO_MILLIBAR'),
-    //           ('diff_pressure', 'PASCAL_TO_MILLIBAR'),
-    //           'pressure_alt', 'temperature', 'fields_updated'):
-    //           f1 = f if isinstance(f, str) else f[0]
-    //           f2 = f if isinstance(f, str) else f'{f[0]} * {f[1]}'
-    //           cog.outl(f"sensor.{f1} = req->{f2};")
-    // ]]]
-    sensor.xacc = acc.x();
-    sensor.yacc = acc.y();
-    sensor.zacc = acc.z();
-    sensor.xgyro = gyro.x();
-    sensor.ygyro = gyro.y();
-    sensor.zgyro = gyro.z();
-    sensor.xmag = mag.x();
-    sensor.ymag = mag.y();
-    sensor.zmag = mag.z();
-    sensor.abs_pressure = req->abs_pressure * PASCAL_TO_MILLIBAR;
-    sensor.diff_pressure = req->diff_pressure * PASCAL_TO_MILLIBAR;
-    sensor.pressure_alt = req->pressure_alt;
-    sensor.temperature = req->temperature;
-    sensor.fields_updated = req->fields_updated;
-    // [[[end]]] (checksum: e1f6502cf1195ffdf3018f0c4d0c9329)
-
-    uas->send_message(sensor);
-  }
-
-  /**
-   * @brief Send simulated optical flow to FCU.
-   * Message specification: @p https://mavlink.io/en/messages/common.html#HIL_OPTICAL_FLOW
-   */
-  void optical_flow_cb(const mavros_msgs::msg::OpticalFlowRad::SharedPtr req)
-  {
-    mavlink::common::msg::HIL_OPTICAL_FLOW of = {};
-
-    auto int_xy = ftf::transform_frame_aircraft_baselink(
-      Eigen::Vector3d(
-        req->integrated_x,
-        req->integrated_y,
-        0.0));
-    auto int_gyro = ftf::transform_frame_aircraft_baselink(
-      Eigen::Vector3d(
-        req->integrated_xgyro,
-        req->integrated_ygyro,
-        req->integrated_zgyro));
-
-    of.time_usec = get_time_usec(req->header.stamp);
-    of.sensor_id = INT8_MAX;    // while we don't find a better way of handling it
-    of.integration_time_us = req->integration_time_us;
-    // [[[cog:
-    // for f in "xy":
-    //     cog.outl(f"of.integrated_{f} = int_xy.{f}();")
-    // for f in "xyz":
-    //     cog.outl(f"of.integrated_{f}gyro = int_gyro.{f}();")
-    // for f in ('time_delta_distance_us', 'distance', 'quality'):
-    //     cog.outl(f"of.{f} = req->{f};")
-    // ]]]
-    of.integrated_x = int_xy.x();
-    of.integrated_y = int_xy.y();
-    of.integrated_xgyro = int_gyro.x();
-    of.integrated_ygyro = int_gyro.y();
-    of.integrated_zgyro = int_gyro.z();
-    of.time_delta_distance_us = req->time_delta_distance_us;
-    of.distance = req->distance;
-    of.quality = req->quality;
-    // [[[end]]] (checksum: 4dc7f3f9b5de60b4d1685bde42c66b26)
-    of.temperature = req->temperature * 100.0f;     // in centi-degrees celsius
-
-    uas->send_message(of);
-  }
-
-  /**
-   * @brief Send simulated received RAW values of the RC channels to the FCU.
-   * Message specification: @p https://mavlink.io/en/messages/common.html#HIL_RC_INPUTS_RAW
-   */
-  void rcin_raw_cb(const mavros_msgs::msg::RCIn::SharedPtr req)
-  {
-    mavlink::common::msg::HIL_RC_INPUTS_RAW rcin {};
-
-    constexpr size_t MAX_CHANCNT = 12;
-
-    std::array<uint16_t, MAX_CHANCNT> channels;
-    auto n = std::min(req->channels.size(), channels.size());
-    std::copy(req->channels.begin(), req->channels.begin() + n, channels.begin());
-    std::fill(channels.begin() + n, channels.end(), UINT16_MAX);
-
-    rcin.time_usec = get_time_usec(req->header.stamp);
-    // [[[cog:
-    // for i in range(1,13):
-    //     cog.outl(f"rcin.chan{i}_raw = channels[{i-1}];")
-    // ]]]
-    rcin.chan1_raw = channels[0];
-    rcin.chan2_raw = channels[1];
-    rcin.chan3_raw = channels[2];
-    rcin.chan4_raw = channels[3];
-    rcin.chan5_raw = channels[4];
-    rcin.chan6_raw = channels[5];
-    rcin.chan7_raw = channels[6];
-    rcin.chan8_raw = channels[7];
-    rcin.chan9_raw = channels[8];
-    rcin.chan10_raw = channels[9];
-    rcin.chan11_raw = channels[10];
-    rcin.chan12_raw = channels[11];
-    // [[[end]]] (checksum: 342673b0690e47f16c8b89803ab00e68)
-
-    uas->send_message(rcin);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::HilPlugin)
diff --git a/mavros_extras/src/plugins/landing_target.cpp b/mavros_extras/src/plugins/landing_target.cpp
deleted file mode 100644
index 60106209..00000000
--- a/mavros_extras/src/plugins/landing_target.cpp
+++ /dev/null
@@ -1,486 +0,0 @@
-/**
- * @brief Landing target plugin
- * @file landing_target.cpp
- * @author Nuno Marques <n.marques21@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-/*
- * Copyright 2015,2017,2019 Nuno Marques.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-
-#include <algorithm>
-#include <string>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/utils.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-#include "mavros/setpoint_mixin.hpp"
-
-#include "geometry_msgs/msg/pose_stamped.hpp"
-#include "geometry_msgs/msg/vector3_stamped.hpp"
-#include "mavros_msgs/msg/landing_target.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;
-using mavlink::common::MAV_FRAME;
-using mavlink::common::LANDING_TARGET_TYPE;
-
-/**
- * @brief Landing Target plugin
- * @plugin landing_target
- *
- * This plugin is intended to publish the location of a landing area captured from a downward facing camera
- * to the FCU and/or receive landing target tracking data coming from the FCU.
- */
-class LandingTargetPlugin : public plugin::Plugin,
-  private plugin::TF2ListenerMixin<LandingTargetPlugin>
-{
-public:
-  explicit LandingTargetPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "landing_target"),
-    tf_rate(50.0),
-    tf_send(true),
-    tf_listen(false),
-    frame_id("landing_target_1"),
-    tf_frame_id("landing_target_1"),
-    target_size_x(1.0),
-    target_size_y(1.0),
-    fov_x(2.0071286398),
-    fov_y(2.0071286398),
-    focal_length(2.8),
-    image_width(640),
-    image_height(480),
-    mav_frame("LOCAL_NED"),
-    land_target_type("VISION_FIDUCIAL")
-  {
-    enable_node_watch_parameters();
-
-    // general params
-    node_declare_and_watch_parameter(
-      "frame_id", "landing_target_1", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "listen_lt", false, [&](const rclcpp::Parameter & p) {
-        auto listen_lt = p.as_bool();
-
-        land_target_sub.reset();
-
-        if (listen_lt) {
-          land_target_sub = node->create_subscription<mavros_msgs::msg::LandingTarget>(
-            "~/raw", 10, std::bind(
-              &LandingTargetPlugin::landtarget_cb, this,
-              _1));
-        }
-      });
-
-    node_declare_and_watch_parameter(
-      "mav_frame", "LOCAL_NED", [&](const rclcpp::Parameter & p) {
-        mav_frame = p.as_string();
-        frame = utils::mav_frame_from_str(mav_frame);
-        // MAV_FRAME index based on given frame name (If unknown, defaults to GENERIC)
-      });
-
-    node_declare_and_watch_parameter(
-      "land_target_type", "VISION_FIDUCIAL", [&](const rclcpp::Parameter & p) {
-        land_target_type = p.as_string();
-        type = utils::landing_target_type_from_str(land_target_type);
-        // LANDING_TARGET_TYPE index based on given type name (If unknown, defaults to LIGHT_BEACON)
-      });
-
-    // target size
-    node_declare_and_watch_parameter(
-      "target_size.x", 1.0, [&](const rclcpp::Parameter & p) {
-        target_size_x = p.as_double();  // [meters]
-      });
-
-    node_declare_and_watch_parameter(
-      "target_size.y", 1.0, [&](const rclcpp::Parameter & p) {
-        target_size_y = p.as_double();
-      });
-
-    // image size
-    node_declare_and_watch_parameter(
-      "image.width", 640, [&](const rclcpp::Parameter & p) {
-        image_width = p.as_int();       // [pixels]
-      });
-
-    node_declare_and_watch_parameter(
-      "image.height", 480, [&](const rclcpp::Parameter & p) {
-        image_height = p.as_int();
-      });
-
-    // camera field-of-view -> should be precised using the calibrated camera intrinsics
-    node_declare_and_watch_parameter(
-      "camera.fov_x", 2.0071286398, [&](const rclcpp::Parameter & p) {
-        fov_x = p.as_double();          // default: 115 degrees in [radians]
-      });
-
-    node_declare_and_watch_parameter(
-      "camera.fov_y", 2.0071286398, [&](const rclcpp::Parameter & p) {
-        fov_y = p.as_double();          // default: 115 degrees in [radians]
-      });
-
-    // camera focal length
-    node_declare_and_watch_parameter(
-      "camera.focal_length", 2.8, [&](const rclcpp::Parameter & p) {
-        focal_length = p.as_double();   // ex: OpenMV Cam M7: 2.8 [mm]
-      });
-
-    // tf subsection
-    node_declare_and_watch_parameter(
-      "tf.rate_limit", 50.0, [&](const rclcpp::Parameter & p) {
-        // no dynamic update here yet. need to modify the thread in
-        // setpoint_mixin to handle new rates
-        tf_rate = p.as_double();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf.send", true, [&](const rclcpp::Parameter & p) {
-        tf_send = p.as_bool();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf.frame_id", frame_id, [&](const rclcpp::Parameter & p) {
-        tf_frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf.child_frame_id", "camera_center", [&](const rclcpp::Parameter & p) {
-        tf_child_frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf.listen", false, [&](const rclcpp::Parameter & p) {
-        tf_listen = p.as_bool();
-        if (!tf_listen) {
-          return;
-        }
-
-        RCLCPP_INFO_STREAM(
-          get_logger(),
-          "LT: Listen to landing_target transform " << tf_frame_id <<
-            " -> " << tf_child_frame_id);
-        tf2_start("LandingTargetTF", &LandingTargetPlugin::transform_cb);
-      });
-
-
-    auto sensor_qos = rclcpp::SensorDataQoS();
-
-    land_target_pub =
-      node->create_publisher<geometry_msgs::msg::PoseStamped>("~/pose_in", sensor_qos);
-    lt_marker_pub = node->create_publisher<geometry_msgs::msg::Vector3Stamped>(
-      "~/lt_marker",
-      sensor_qos);
-
-    pose_sub = node->create_subscription<geometry_msgs::msg::PoseStamped>(
-      "~/pose", 10, std::bind(
-        &LandingTargetPlugin::pose_cb, this, _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&LandingTargetPlugin::handle_landing_target)
-    };
-  }
-
-private:
-  friend class TF2ListenerMixin;
-
-  double tf_rate;
-  bool tf_send;
-  bool tf_listen;
-  rclcpp::Time last_transform_stamp;
-
-  std::string frame_id;
-  std::string tf_frame_id;
-  std::string tf_child_frame_id;
-
-  rclcpp::Publisher<geometry_msgs::msg::PoseStamped>::SharedPtr land_target_pub;
-  rclcpp::Publisher<geometry_msgs::msg::Vector3Stamped>::SharedPtr lt_marker_pub;
-  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr pose_sub;
-  rclcpp::Subscription<mavros_msgs::msg::LandingTarget>::SharedPtr land_target_sub;
-
-  double target_size_x, target_size_y;
-  double fov_x, fov_y;
-  double focal_length;
-  int image_width, image_height;
-
-  MAV_FRAME frame;
-  std::string mav_frame;
-
-  LANDING_TARGET_TYPE type;
-  std::string land_target_type;
-
-  /* -*- low-level send -*- */
-  void landing_target(
-    uint64_t time_usec,
-    uint8_t target_num,
-    uint8_t frame,
-    Eigen::Vector2f angle,
-    float distance,
-    Eigen::Vector2f size,
-    Eigen::Vector3d pos,
-    Eigen::Quaterniond q,
-    uint8_t type,
-    uint8_t position_valid)
-  {
-    mavlink::common::msg::LANDING_TARGET lt {};
-
-    lt.time_usec = time_usec;
-    lt.target_num = target_num;
-    lt.frame = frame;
-    lt.distance = distance;
-    lt.type = type;
-    lt.position_valid = position_valid;
-    lt.angle_x = angle.x();
-    lt.angle_y = angle.y();
-    lt.size_x = size.x();
-    lt.size_y = size.y();
-    lt.x = pos.x();
-    lt.y = pos.y();
-    lt.z = pos.z();
-
-    ftf::quaternion_to_mavlink(q, lt.q);
-
-    uas->send_message(lt);
-  }
-
-  /* -*- mid-level helpers -*- */
-  /**
-   * @brief Displacement: (not to be mixed with angular displacement)
-   *
-   * WITH angle_rad = atan(y / x) * (π / 180)
-   * IF X & Y > 0: (1st quadrant)
-   *      θ_x = angle_rad
-   *      θ_y = - angle_rad
-   * IF X < 0 & Y > 0: (2nd quadrant)
-   *      θ_x = π - angle_rad
-   *      θ_y = angle_rad
-   * IF X < 0 & Y < 0: (3rd quadrant)
-   *      θ_x = π + angle_rad
-   *      θ_y = π - angle_rad
-   * IF X > 0 & Y < 0: (4th quadrant)
-   *      θ_x = - angle_rad
-   *      θ_y = π + angle_rad
-   */
-  void inline cartesian_to_displacement(const Eigen::Vector3d & pos, Eigen::Vector2f & angle)
-  {
-    float angle_rad = atan(pos.y() / pos.x()) * (M_PI / 180.0);
-
-    if (pos.x() > 0 && pos.y() > 0) {
-      angle.x() = angle_rad;
-      angle.y() = -angle_rad;
-    } else if (pos.x() < 0 && pos.y() > 0) {
-      angle.x() = M_PI - angle_rad;
-      angle.y() = angle_rad;
-    } else if (pos.x() < 0 && pos.y() < 0) {
-      angle.x() = M_PI + angle_rad;
-      angle.y() = M_PI - angle_rad;
-    } else if (pos.x() > 0 && pos.y() < 0) {
-      angle.x() = -angle_rad;
-      angle.y() = M_PI + angle_rad;
-    }
-  }
-
-  /**
-   * @brief Send landing target transform to FCU
-   */
-  void send_landing_target(const rclcpp::Time & stamp, const Eigen::Affine3d & tr)
-  {
-    /**
-     * @brief the position of the landing target WRT camera center - on the FCU,
-     * the position WRT to the origin local NED frame can be computed to allow
-     * the FCU to know where the landing target is in the local frame.
-     */
-    auto pos = ftf::transform_frame_enu_ned(Eigen::Vector3d(tr.translation()));
-
-    /** @brief the orientation of the landing target WRT camera frame */
-    auto q = ftf::transform_orientation_enu_ned(
-      ftf::transform_orientation_baselink_aircraft(Eigen::Quaterniond(tr.rotation())));
-
-    Eigen::Vector2f angle;
-    Eigen::Vector2f size_rad;
-    Eigen::Vector2f fov;
-
-    // the norm of the position vector is considered the distance to the landing target
-    float distance = pos.norm();
-
-    // if the landing target type is a vision type, compute the angular offsets
-    if (land_target_type.find("VISION")) {
-      /**
-       * @brief: the camera angular offsets can be computed by knowing the position
-       * of the target center relative to the camera center, the field-of-view of
-       * the camera and the image resolution being considered.
-       * The target size is computed by the angle of view formula (similar to angular diameter).
-       */
-      angle.x() = (pos.x() - image_width / 2.0) * fov.x() / image_width;
-      angle.y() = (pos.y() - image_height / 2.0) * fov.y() / image_height;
-      /**
-       * @brief Angular diameter:
-       * δ = 2 * atan(d / (2 * D))
-       * where,	d = actual diameter; D = distance to the object (or focal length of a camera)
-       */
-      size_rad = {2 * (M_PI / 180.0) * atan(target_size_x / (2 * focal_length)),
-        2 * (M_PI / 180.0) * atan(target_size_y / (2 * focal_length))};
-    } else {
-      // else, the same values are computed considering the displacement
-      // relative to X and Y axes of the camera frame reference
-      cartesian_to_displacement(pos, angle);
-      size_rad = {2 * (M_PI / 180.0) * atan(target_size_x / (2 * distance)),
-        2 * (M_PI / 180.0) * atan(target_size_y / (2 * distance))};
-    }
-
-    if (last_transform_stamp == stamp) {
-      RCLCPP_DEBUG_THROTTLE(
-        get_logger(),
-        *get_clock(), 10, "LT: Same transform as last one, dropped.");
-      return;
-    }
-    last_transform_stamp = stamp;
-
-
-    // the last char of frame_id is considered the number of the target
-    uint8_t id = static_cast<uint8_t>(frame_id.back());
-
-    landing_target(
-      stamp.nanoseconds() / 1000,
-      id,
-      utils::enum_value(frame),         // by default, in LOCAL_NED
-      angle,
-      distance,
-      size_rad,
-      pos,
-      q,
-      utils::enum_value(type),
-      1);                               // position is valid from the first received msg
-  }
-
-  /**
-   * @brief Receive landing target from FCU.
-   */
-  void handle_landing_target(
-    [[maybe_unused]] const mavlink::mavlink_message_t * msg,
-    mavlink::common::msg::LANDING_TARGET & land_target,
-    [[maybe_unused]] plugin::filter::SystemAndOk filter)
-  {
-    /** @todo these transforms should be applied according to the MAV_FRAME */
-    auto position =
-      ftf::transform_frame_ned_enu(
-      Eigen::Vector3d(
-        land_target.x, land_target.y,
-        land_target.z));
-    auto orientation = ftf::transform_orientation_aircraft_baselink(
-      ftf::transform_orientation_ned_enu(
-        ftf::mavlink_to_quaternion(land_target.q)));
-
-    // auto rpy = ftf::quaternion_to_rpy(orientation);
-
-    RCLCPP_DEBUG_STREAM_THROTTLE(
-      get_logger(),
-      *get_clock(), 10,
-      "landing_target:\n" <<
-        land_target.to_yaml());
-
-    geometry_msgs::msg::PoseStamped pose;
-    pose.header = uas->synchronized_header(frame_id, land_target.time_usec);
-
-    pose.pose.position = tf2::toMsg(position);
-    pose.pose.orientation = tf2::toMsg(orientation);
-
-    land_target_pub->publish(pose);
-
-    if (tf_send) {
-      geometry_msgs::msg::TransformStamped transform;
-
-      transform.header.stamp = pose.header.stamp;
-      transform.header.frame_id = "landing_target_" + std::to_string(
-        land_target.target_num);
-      transform.child_frame_id = tf_child_frame_id;
-
-      transform.transform.rotation = pose.pose.orientation;
-      geometry_msgs::msg::Point translation_p = tf2::toMsg(position);
-      transform.transform.translation.x = translation_p.x;
-      transform.transform.translation.y = translation_p.y;
-      transform.transform.translation.z = translation_p.z;
-
-      uas->tf2_broadcaster.sendTransform(transform);
-    }
-
-    geometry_msgs::msg::Vector3Stamped tg_size_msg;
-    tg_size_msg.vector.x = target_size_x;
-    tg_size_msg.vector.y = target_size_y;
-    tg_size_msg.vector.z = 0.0;
-
-    lt_marker_pub->publish(tg_size_msg);
-  }
-
-  /* -*- callbacks -*- */
-  /**
-   * @brief callback for TF2 listener
-   */
-  void transform_cb(const geometry_msgs::msg::TransformStamped & transform)
-  {
-    Eigen::Affine3d tr = tf2::transformToEigen(transform.transform);
-
-    send_landing_target(transform.header.stamp, tr);
-  }
-
-  /**
-   * @brief callback for PoseStamped msgs topic
-   */
-  void pose_cb(const geometry_msgs::msg::PoseStamped::SharedPtr req)
-  {
-    Eigen::Affine3d tr;
-    tf2::fromMsg(req->pose, tr);
-
-    rclcpp::Time sys_time(req->header.stamp, RCL_SYSTEM_TIME);
-    send_landing_target(sys_time, tr);
-  }
-
-  /**
-   * @brief callback for raw LandingTarget msgs topic - useful if one has the
-   * data processed in another node
-   */
-  void landtarget_cb(const mavros_msgs::msg::LandingTarget::SharedPtr req)
-  {
-    Eigen::Affine3d tr;
-    tf2::fromMsg(req->pose, tr);
-
-    /** @todo these transforms should be applied according to the MAV_FRAME */
-    auto position = ftf::transform_frame_enu_ned(Eigen::Vector3d(tr.translation()));
-    auto orientation = ftf::transform_orientation_enu_ned(
-      ftf::transform_orientation_baselink_aircraft(Eigen::Quaterniond(tr.rotation())));
-
-    landing_target(
-      rclcpp::Time(req->header.stamp).nanoseconds() / 1000,
-      req->target_num,
-      req->frame,               // by default, in LOCAL_NED
-      Eigen::Vector2f(req->angle[0], req->angle[1]),
-      req->distance,
-      Eigen::Vector2f(req->size[0], req->size[1]),
-      position,
-      orientation,
-      req->type,
-      1);                       // position is valid from the first received msg
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::LandingTargetPlugin)
diff --git a/mavros_extras/src/plugins/log_transfer.cpp b/mavros_extras/src/plugins/log_transfer.cpp
deleted file mode 100644
index 89c143ba..00000000
--- a/mavros_extras/src/plugins/log_transfer.cpp
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- * Copyright 2018 mlvov <mlvov@cnord.ru>.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Log Transfer plugin
- * @file log_transfer.cpp
- * @author mlvov <mlvov@cnord.ru>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <atomic>
-#include <algorithm>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/log_data.hpp"
-#include "mavros_msgs/msg/log_entry.hpp"
-#include "mavros_msgs/srv/log_request_data.hpp"
-#include "mavros_msgs/srv/log_request_end.hpp"
-#include "mavros_msgs/srv/log_request_list.hpp"
-#include "std_srvs/srv/trigger.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Log Transfer plugin
- * @plugin log_transfer
- */
-class LogTransferPlugin : public plugin::Plugin
-{
-public:
-  explicit LogTransferPlugin(plugin::UASPtr uas_)
-  : plugin::Plugin(uas_, "log_transfer")
-  {
-    log_entry_pub = node->create_publisher<mavros_msgs::msg::LogEntry>("~/raw/log_entry", 1000);
-    log_data_pub = node->create_publisher<mavros_msgs::msg::LogData>("~/raw/log_data", 1000);
-
-    log_request_list_srv = node->create_service<mavros_msgs::srv::LogRequestList>(
-      "~/raw/log_request_list", std::bind(&LogTransferPlugin::log_request_list_cb, this, _1, _2));
-    log_request_data_srv = node->create_service<mavros_msgs::srv::LogRequestData>(
-      "~/raw/log_request_data", std::bind(&LogTransferPlugin::log_request_data_cb, this, _1, _2));
-    log_request_end_srv = node->create_service<mavros_msgs::srv::LogRequestEnd>(
-      "~/raw/log_request_end", std::bind(&LogTransferPlugin::log_request_end_cb, this, _1, _2));
-    log_request_erase_srv = node->create_service<std_srvs::srv::Trigger>(
-      "~/raw/log_request_erase", std::bind(
-        &LogTransferPlugin::log_request_erase_cb, this, _1,
-        _2));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&LogTransferPlugin::handle_log_entry),
-      make_handler(&LogTransferPlugin::handle_log_data),
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::LogEntry>::SharedPtr log_entry_pub;
-  rclcpp::Publisher<mavros_msgs::msg::LogData>::SharedPtr log_data_pub;
-
-  rclcpp::Service<mavros_msgs::srv::LogRequestList>::SharedPtr log_request_list_srv;
-  rclcpp::Service<mavros_msgs::srv::LogRequestData>::SharedPtr log_request_data_srv;
-  rclcpp::Service<mavros_msgs::srv::LogRequestEnd>::SharedPtr log_request_end_srv;
-  rclcpp::Service<std_srvs::srv::Trigger>::SharedPtr log_request_erase_srv;
-
-  void handle_log_entry(
-    const mavlink::mavlink_message_t * mmsg [[maybe_unused]],
-    mavlink::common::msg::LOG_ENTRY & le,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto msg = mavros_msgs::msg::LogEntry();
-
-    msg.header.stamp = node->now();
-    msg.id = le.id;
-    msg.num_logs = le.num_logs;
-    msg.last_log_num = le.last_log_num;
-    msg.time_utc = rclcpp::Time(le.time_utc);
-    msg.size = le.size;
-
-    log_entry_pub->publish(msg);
-  }
-
-  void handle_log_data(
-    const mavlink::mavlink_message_t * mmsg [[maybe_unused]],
-    mavlink::common::msg::LOG_DATA & ld,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto msg = mavros_msgs::msg::LogData();
-
-    msg.header.stamp = node->now();
-    msg.id = ld.id;
-    msg.offset = ld.ofs;
-
-    auto count = std::min<size_t>(ld.count, ld.data.max_size());
-    msg.data.insert(msg.data.cbegin(), ld.data.cbegin(), ld.data.cbegin() + count);
-
-    log_data_pub->publish(msg);
-  }
-
-  void log_request_list_cb(
-    const mavros_msgs::srv::LogRequestList::Request::SharedPtr req,
-    mavros_msgs::srv::LogRequestList::Response::SharedPtr res)
-  {
-    mavlink::common::msg::LOG_REQUEST_LIST msg = {};
-
-    uas->msg_set_target(msg);
-    msg.start = req->start;
-    msg.end = req->end;
-
-    uas->send_message(msg);
-
-    // NOTE(vooon): with ROS2 router it's not possible to detect drops
-    res->success = true;
-  }
-
-  void log_request_data_cb(
-    mavros_msgs::srv::LogRequestData::Request::SharedPtr req,
-    mavros_msgs::srv::LogRequestData::Response::SharedPtr res)
-  {
-    mavlink::common::msg::LOG_REQUEST_DATA msg = {};
-
-    uas->msg_set_target(msg);
-    msg.id = req->id;
-    msg.ofs = req->offset;
-    msg.count = req->count;
-
-    uas->send_message(msg);
-
-    // NOTE(vooon): with ROS2 router it's not possible to detect drops
-    res->success = true;
-  }
-
-  void log_request_end_cb(
-    mavros_msgs::srv::LogRequestEnd::Request::SharedPtr req [[maybe_unused]],
-    mavros_msgs::srv::LogRequestEnd::Response::SharedPtr res)
-  {
-    mavlink::common::msg::LOG_REQUEST_END msg = {};
-
-    uas->msg_set_target(msg);
-
-    uas->send_message(msg);
-
-    // NOTE(vooon): with ROS2 router it's not possible to detect drops
-    res->success = true;
-  }
-
-  void log_request_erase_cb(
-    std_srvs::srv::Trigger::Request::SharedPtr req [[maybe_unused]],
-    std_srvs::srv::Trigger::Response::SharedPtr res)
-  {
-    mavlink::common::msg::LOG_ERASE msg{};
-
-    uas->msg_set_target(msg);
-
-    uas->send_message(msg);
-
-    // NOTE(vooon): with ROS2 router it's not possible to detect drops
-    res->success = true;
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::LogTransferPlugin)
diff --git a/mavros_extras/src/plugins/mag_calibration_status.cpp b/mavros_extras/src/plugins/mag_calibration_status.cpp
deleted file mode 100644
index 5b5117ff..00000000
--- a/mavros_extras/src/plugins/mag_calibration_status.cpp
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright 2021 André Ferreira <andre.ferreira@beyond-vision.pt>
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief MagCalStatus plugin
- * @file MagCalStatus.cpp
- * @author André Ferreira <andre.ferreira@beyond-vision.pt>
- *
- * @example MagCalStatus.cpp
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "std_msgs/msg/u_int8.hpp"
-#include "mavros_msgs/msg/magnetometer_reporter.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief MagCalStatus plugin.
- * @plugin mag_calibration_status
- *
- * Example and "how to" for users.
- */
-class MagCalStatusPlugin : public plugin::Plugin
-{
-public:
-  explicit MagCalStatusPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "mag_calibration")
-  {
-    // TODO(vooon): use QoS for "latched" topics
-    mcs_pub = node->create_publisher<std_msgs::msg::UInt8>("~/status", 2);
-    mcr_pub = node->create_publisher<mavros_msgs::msg::MagnetometerReporter>("~/report", 2);
-  }
-
-  Subscriptions get_subscriptions()
-  {
-    return {
-      make_handler(&MagCalStatusPlugin::handle_status),
-      make_handler(&MagCalStatusPlugin::handle_report),
-    };
-  }
-
-private:
-  rclcpp::Publisher<std_msgs::msg::UInt8>::SharedPtr mcs_pub;
-  rclcpp::Publisher<mavros_msgs::msg::MagnetometerReporter>::SharedPtr mcr_pub;
-
-  std::array<bool, 8> calibration_show;
-  std::array<uint8_t, 8> _rg_compass_cal_progress;
-
-  // Send progress of magnetometer calibration
-  void handle_status(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::MAG_CAL_PROGRESS & mp,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto mcs = std_msgs::msg::UInt8();
-
-    // How many compasses are we calibrating?
-    std::bitset<8> compass_calibrating = mp.cal_mask;
-
-    if (compass_calibrating[mp.compass_id]) {
-      // Each compass gets a portion of the overall progress
-      if (mp.completion_pct < 95) {
-        calibration_show[mp.compass_id] = true;
-      }
-      _rg_compass_cal_progress[mp.compass_id] = mp.completion_pct;
-    }
-
-    // Prevent data over 100% after cal_mask reset bit assigned to compass_id
-    uint16_t total_percentage = 0;
-    for (size_t i = 0; i < 8 && (compass_calibrating >> i).any(); i++) {
-      if (compass_calibrating[i]) {
-        total_percentage += static_cast<uint8_t>(_rg_compass_cal_progress[i]);
-      }
-    }
-
-    mcs.data = total_percentage / compass_calibrating.count();
-
-    mcs_pub->publish(mcs);
-  }
-
-  // Send report after calibration is done
-  void handle_report(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::MAG_CAL_REPORT & mr,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    if (mr.compass_id >= calibration_show.size()) {
-      return;
-    }
-    if (calibration_show[mr.compass_id]) {
-      auto mcr = mavros_msgs::msg::MagnetometerReporter();
-
-      mcr.header.stamp = node->now();
-      mcr.header.frame_id = std::to_string(mr.compass_id);
-      mcr.report = mr.cal_status;
-      mcr.confidence = mr.orientation_confidence;
-
-      mcr_pub->publish(mcr);
-      calibration_show[mr.compass_id] = false;
-    }
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::MagCalStatusPlugin)
diff --git a/mavros_extras/src/plugins/mocap_pose_estimate.cpp b/mavros_extras/src/plugins/mocap_pose_estimate.cpp
deleted file mode 100644
index 4903e79a..00000000
--- a/mavros_extras/src/plugins/mocap_pose_estimate.cpp
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Copyright 2014,2015,2016 Vladimir Ermakov, Tony Baltovski.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief MocapPoseEstimate plugin
- * @file mocap_pose_estimate.cpp
- * @author Tony Baltovski <tony.baltovski@gmail.com>
- * @author Vladimir Ermakov <vooon341@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "geometry_msgs/msg/pose_stamped.hpp"
-#include "geometry_msgs/msg/transform_stamped.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief MocapPoseEstimate plugin
- * @plugin mocap_pose_estimate
- *
- * Sends motion capture data to FCU.
- */
-class MocapPoseEstimatePlugin : public plugin::Plugin
-{
-public:
-  explicit MocapPoseEstimatePlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "mocap")
-  {
-    /** @note For VICON ROS package, subscribe to TransformStamped topic */
-    mocap_tf_sub = node->create_subscription<geometry_msgs::msg::TransformStamped>(
-      "~/tf", 1, std::bind(
-        &MocapPoseEstimatePlugin::mocap_tf_cb, this,
-        _1));
-    /** @note For Optitrack ROS package, subscribe to PoseStamped topic */
-    mocap_pose_sub = node->create_subscription<geometry_msgs::msg::PoseStamped>(
-      "~/pose", 1, std::bind(
-        &MocapPoseEstimatePlugin::mocap_pose_cb, this,
-        _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr mocap_pose_sub;
-  rclcpp::Subscription<geometry_msgs::msg::TransformStamped>::SharedPtr mocap_tf_sub;
-
-  /* -*- low-level send -*- */
-  void mocap_pose_send(
-    uint64_t usec,
-    Eigen::Quaterniond & q,
-    Eigen::Vector3d & v)
-  {
-    mavlink::common::msg::ATT_POS_MOCAP pos = {};
-
-    pos.time_usec = usec;
-    ftf::quaternion_to_mavlink(q, pos.q);
-    pos.x = v.x();
-    pos.y = v.y();
-    pos.z = v.z();
-
-    uas->send_message(pos);
-  }
-
-  /* -*- callbacks -*- */
-
-  void mocap_pose_cb(const geometry_msgs::msg::PoseStamped::SharedPtr pose)
-  {
-    Eigen::Quaterniond q_enu;
-
-    tf2::fromMsg(pose->pose.orientation, q_enu);
-    auto q = ftf::transform_orientation_enu_ned(
-      ftf::transform_orientation_baselink_aircraft(q_enu));
-
-    auto position = ftf::transform_frame_enu_ned(
-      Eigen::Vector3d(
-        pose->pose.position.x,
-        pose->pose.position.y,
-        pose->pose.position.z));
-
-    mocap_pose_send(
-      get_time_usec(pose->header.stamp),
-      q,
-      position);
-  }
-
-  void mocap_tf_cb(const geometry_msgs::msg::TransformStamped::SharedPtr trans)
-  {
-    Eigen::Quaterniond q_enu;
-
-    tf2::fromMsg(trans->transform.rotation, q_enu);
-    auto q = ftf::transform_orientation_enu_ned(
-      ftf::transform_orientation_baselink_aircraft(q_enu));
-
-    auto position = ftf::transform_frame_enu_ned(
-      Eigen::Vector3d(
-        trans->transform.translation.x,
-        trans->transform.translation.y,
-        trans->transform.translation.z));
-
-    mocap_pose_send(
-      get_time_usec(trans->header.stamp),
-      q,
-      position);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::MocapPoseEstimatePlugin)
diff --git a/mavros_extras/src/plugins/mount_control.cpp b/mavros_extras/src/plugins/mount_control.cpp
deleted file mode 100644
index 09075473..00000000
--- a/mavros_extras/src/plugins/mount_control.cpp
+++ /dev/null
@@ -1,396 +0,0 @@
-/*
- * Copyright 2019 Jaeyoung Lim.
- * Copyright 2021 Dr.-Ing. Amilcar do Carmo Lucas <amilcar.lucas@iav.de>.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Mount Control plugin
- * @file mount_control.cpp
- * @author Jaeyoung Lim <jaeyoung@auterion.com>
- * @author Dr.-Ing. Amilcar do Carmo Lucas <amilcar.lucas@iav.de>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <memory>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/srv/command_long.hpp"
-#include "mavros_msgs/msg/mount_control.hpp"
-#include "geometry_msgs/msg/quaternion.hpp"
-#include "geometry_msgs/msg/vector3_stamped.hpp"
-#include "mavros_msgs/srv/mount_configure.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using DiagnosticStatus = diagnostic_msgs::msg::DiagnosticStatus;
-
-using namespace std::placeholders;      // NOLINT
-using namespace std::chrono_literals;   // NOLINT
-
-//! Mavlink enumerations
-using mavlink::common::MAV_MOUNT_MODE;
-using mavlink::common::MAV_CMD;
-using utils::enum_value;
-
-/**
- * @brief Mount diagnostic updater
- */
-class MountStatusDiag : public diagnostic_updater::DiagnosticTask
-{
-public:
-  explicit MountStatusDiag(const std::string & name)
-  : diagnostic_updater::DiagnosticTask(name),
-    _last_orientation_update(0, 0),
-    _debounce_s(NAN),
-    _roll_deg(NAN),
-    _pitch_deg(NAN),
-    _yaw_deg(NAN),
-    _setpoint_roll_deg(NAN),
-    _setpoint_pitch_deg(NAN),
-    _setpoint_yaw_deg(NAN),
-    _err_threshold_deg(NAN),
-    _error_detected(false),
-    _mode(255)
-  {}
-
-  void set_err_threshold_deg(float threshold_deg)
-  {
-    std::lock_guard<std::mutex> lock(mutex);
-    _err_threshold_deg = threshold_deg;
-  }
-
-  void set_debounce_s(double debounce_s)
-  {
-    std::lock_guard<std::mutex> lock(mutex);
-    _debounce_s = debounce_s;
-  }
-
-  void set_status(float roll_deg, float pitch_deg, float yaw_deg, rclcpp::Time timestamp)
-  {
-    std::lock_guard<std::mutex> lock(mutex);
-    _roll_deg = roll_deg;
-    _pitch_deg = pitch_deg;
-    _yaw_deg = yaw_deg;
-    _last_orientation_update = timestamp;
-  }
-
-  void set_setpoint(float roll_deg, float pitch_deg, float yaw_deg, uint8_t mode)
-  {
-    std::lock_guard<std::mutex> lock(mutex);
-    _setpoint_roll_deg = roll_deg;
-    _setpoint_pitch_deg = pitch_deg;
-    _setpoint_yaw_deg = yaw_deg;
-    _mode = mode;
-  }
-
-  void run(diagnostic_updater::DiagnosticStatusWrapper & stat)
-  {
-    float roll_err_deg;
-    float pitch_err_deg;
-    float yaw_err_deg;
-    bool error_detected = false;
-    bool stale = false;
-
-    if (_mode != mavros_msgs::msg::MountControl::MAV_MOUNT_MODE_MAVLINK_TARGETING) {
-      // Can only directly compare the MAV_CMD_DO_MOUNT_CONTROL angles with
-      // the MOUNT_ORIENTATION angles when in MAVLINK_TARGETING mode
-      stat.summary(DiagnosticStatus::WARN, "Can not diagnose in this targeting mode");
-      stat.addf("Mode", "%d", _mode);
-      return;
-    }
-
-    const rclcpp::Time now = clock.now();
-    {
-      std::lock_guard<std::mutex> lock(mutex);
-      roll_err_deg = _setpoint_roll_deg - _roll_deg;
-      pitch_err_deg = _setpoint_pitch_deg - _pitch_deg;
-      yaw_err_deg = _setpoint_yaw_deg - _yaw_deg;
-
-      // detect errors (setpoint != current angle)
-      if (fabs(roll_err_deg) > _err_threshold_deg) {
-        error_detected = true;
-      }
-      if (fabs(pitch_err_deg) > _err_threshold_deg) {
-        error_detected = true;
-      }
-      if (fabs(yaw_err_deg) > _err_threshold_deg) {
-        error_detected = true;
-      }
-      if (now - _last_orientation_update > rclcpp::Duration(5s)) {
-        stale = true;
-      }
-      // accessing the _debounce_s variable should be done inside this mutex,
-      // but we can treat it as an atomic variable, and save the trouble
-    }
-
-    // detect error state changes
-    if (!_error_detected && error_detected) {
-      _error_started = now;
-      _error_detected = true;
-    }
-    if (_error_detected && !error_detected) {
-      _error_detected = false;
-    }
-
-    // debounce errors
-    // *INDENT-OFF*
-    if (stale) {
-      stat.summary(DiagnosticStatus::STALE, "No MOUNT_ORIENTATION received in the last 5 s");
-    } else if (_error_detected &&
-      (now - _error_started > rclcpp::Duration(std::chrono::duration<double>(_debounce_s)))) {
-      stat.summary(DiagnosticStatus::ERROR, "angle error too high");
-    } else {
-      stat.summary(DiagnosticStatus::OK, "Normal");
-    }
-    // *INDENT-ON*
-
-    stat.addf("Roll err (deg)", "%.1f", roll_err_deg);
-    stat.addf("Pitch err (deg)", "%.1f", pitch_err_deg);
-    stat.addf("Yaw err (deg)", "%.1f", yaw_err_deg);
-  }
-
-private:
-  std::mutex mutex;
-  rclcpp::Clock clock;
-  rclcpp::Time _error_started;
-  rclcpp::Time _last_orientation_update;
-  double _debounce_s;
-  float _roll_deg;
-  float _pitch_deg;
-  float _yaw_deg;
-  float _setpoint_roll_deg;
-  float _setpoint_pitch_deg;
-  float _setpoint_yaw_deg;
-  float _err_threshold_deg;
-  bool _error_detected;
-  uint8_t _mode;
-};
-
-/**
- * @brief Mount Control plugin
- * @plugin mount_control
- *
- * Publishes Mission commands to control the camera or antenna mount.
- * @see command_cb()
- */
-class MountControlPlugin : public plugin::Plugin
-{
-public:
-  explicit MountControlPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "mount_control"),
-    mount_diag("Mount")
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "negate_measured_roll", false, [&](const rclcpp::Parameter & p) {
-        negate_measured_roll = p.as_bool();
-      });
-    node_declare_and_watch_parameter(
-      "negate_measured_pitch", false, [&](const rclcpp::Parameter & p) {
-        negate_measured_pitch = p.as_bool();
-      });
-    node_declare_and_watch_parameter(
-      "negate_measured_yaw", false, [&](const rclcpp::Parameter & p) {
-        negate_measured_yaw = p.as_bool();
-      });
-
-    node_declare_and_watch_parameter(
-      "debounce_s", 4.0, [&](const rclcpp::Parameter & p) {
-        auto debounce_s = p.as_double();
-        mount_diag.set_debounce_s(debounce_s);
-      });
-    node_declare_and_watch_parameter(
-      "err_threshold_deg", 10.0, [&](const rclcpp::Parameter & p) {
-        auto err_threshold_deg = p.as_double();
-        mount_diag.set_err_threshold_deg(err_threshold_deg);
-      });
-    node_declare_and_watch_parameter(
-      "disable_diag", false, [&](const rclcpp::Parameter & p) {
-        auto disable_diag = p.as_bool();
-
-        if (!disable_diag) {
-          uas->diagnostic_updater.add(mount_diag);
-        } else {
-          uas->diagnostic_updater.removeByName(mount_diag.getName());
-        }
-      });
-
-    command_sub = node->create_subscription<mavros_msgs::msg::MountControl>(
-      "~/command", 10, std::bind(
-        &MountControlPlugin::command_cb, this,
-        _1));
-
-    mount_orientation_pub = node->create_publisher<geometry_msgs::msg::Quaternion>(
-      "~/orientation",
-      10);
-    mount_status_pub = node->create_publisher<geometry_msgs::msg::Vector3Stamped>("~/status", 10);
-
-    configure_srv = node->create_service<mavros_msgs::srv::MountConfigure>(
-      "~/configure", std::bind(
-        &MountControlPlugin::mount_configure_cb,
-        this, _1, _2));
-  }
-
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&MountControlPlugin::handle_mount_orientation),
-      make_handler(&MountControlPlugin::handle_mount_status)
-    };
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::MountControl>::SharedPtr command_sub;
-
-  rclcpp::Publisher<geometry_msgs::msg::Quaternion>::SharedPtr mount_orientation_pub;
-  rclcpp::Publisher<geometry_msgs::msg::Vector3Stamped>::SharedPtr mount_status_pub;
-
-  rclcpp::Service<mavros_msgs::srv::MountConfigure>::SharedPtr configure_srv;
-
-  MountStatusDiag mount_diag;
-  bool negate_measured_roll;
-  bool negate_measured_pitch;
-  bool negate_measured_yaw;
-
-  /**
-   * @brief Publish the mount orientation
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#MOUNT_ORIENTATION
-   * @param msg   the mavlink message
-   * @param mo	received MountOrientation msg
-   */
-  void handle_mount_orientation(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::MOUNT_ORIENTATION & mo,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    const auto timestamp = node->now();
-    // some gimbals send negated/inverted angle measurements,
-    // correct that to obey the MAVLink frame convention
-    if (negate_measured_roll) {
-      mo.roll = -mo.roll;
-    }
-    if (negate_measured_pitch) {
-      mo.pitch = -mo.pitch;
-    }
-    if (negate_measured_yaw) {
-      mo.yaw = -mo.yaw;
-      mo.yaw_absolute = -mo.yaw_absolute;
-    }
-
-    auto q = ftf::quaternion_from_rpy(Eigen::Vector3d(mo.roll, mo.pitch, mo.yaw) * M_PI / 180.0);
-
-    geometry_msgs::msg::Quaternion quaternion_msg = tf2::toMsg(q);
-
-    mount_orientation_pub->publish(quaternion_msg);
-    mount_diag.set_status(mo.roll, mo.pitch, mo.yaw_absolute, timestamp);
-  }
-
-  /**
-   * @brief Publish the mount status
-   *
-   * @param msg   the mavlink message
-   * @param ms	received MountStatus msg
-   */
-  void handle_mount_status(
-    const mavlink::mavlink_message_t * mmsg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::MOUNT_STATUS & ms,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    geometry_msgs::msg::Vector3Stamped publish_msg;
-
-    publish_msg.header.stamp = node->now();
-    publish_msg.header.frame_id = std::to_string(ms.target_component);
-
-    auto vec = Eigen::Vector3d(ms.pointing_b, ms.pointing_a, ms.pointing_c) * M_PI / 18000.0;
-    tf2::toMsg(vec, publish_msg.vector);
-
-    mount_status_pub->publish(publish_msg);
-
-    // pointing_X is cdeg
-    auto q = ftf::quaternion_from_rpy(
-      Eigen::Vector3d(
-        ms.pointing_b, ms.pointing_a,
-        ms.pointing_c) * M_PI / 18000.0);
-    geometry_msgs::msg::Quaternion quaternion_msg = tf2::toMsg(q);
-    mount_orientation_pub->publish(quaternion_msg);
-  }
-
-  /**
-   * @brief Send mount control commands to vehicle
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#MAV_CMD_DO_MOUNT_CONTROL
-   * @param req	received MountControl msg
-   */
-  void command_cb(const mavros_msgs::msg::MountControl::SharedPtr req)
-  {
-    mavlink::common::msg::COMMAND_LONG cmd {};
-
-    uas->msg_set_target(cmd);
-    cmd.command = enum_value(MAV_CMD::DO_MOUNT_CONTROL);
-    cmd.param1 = req->pitch;
-    cmd.param2 = req->roll;
-    cmd.param3 = req->yaw;
-    cmd.param4 = req->altitude;         //
-    cmd.param5 = req->latitude;         // latitude in degrees * 1E7
-    cmd.param6 = req->longitude;        // longitude in degrees * 1E7
-    cmd.param7 = req->mode;             // MAV_MOUNT_MODE
-
-    uas->send_message(cmd);
-
-    mount_diag.set_setpoint(req->roll * 0.01f, req->pitch * 0.01f, req->yaw * 0.01f, req->mode);
-  }
-
-  void mount_configure_cb(
-    mavros_msgs::srv::MountConfigure::Request::SharedPtr req,
-    mavros_msgs::srv::MountConfigure::Response::SharedPtr res)
-  {
-    using mavlink::common::MAV_CMD;
-
-    try {
-      auto client = node->create_client<mavros_msgs::srv::CommandLong>("cmd/command");
-
-      auto cmdrq = std::make_shared<mavros_msgs::srv::CommandLong::Request>();
-
-      cmdrq->broadcast = false;
-      cmdrq->command = enum_value(MAV_CMD::DO_MOUNT_CONFIGURE);
-      cmdrq->confirmation = false;
-      cmdrq->param1 = req->mode;
-      cmdrq->param2 = req->stabilize_roll;
-      cmdrq->param3 = req->stabilize_pitch;
-      cmdrq->param4 = req->stabilize_yaw;
-      cmdrq->param5 = req->roll_input;
-      cmdrq->param6 = req->pitch_input;
-      cmdrq->param7 = req->yaw_input;
-
-      RCLCPP_DEBUG(get_logger(), "MountConfigure: Request mode %u ", req->mode);
-      auto future = client->async_send_request(cmdrq);
-      auto response = future.get();
-      res->success = response->success;
-    } catch (std::exception & ex) {
-      RCLCPP_ERROR(get_logger(), "MountConfigure: %s", ex.what());
-    }
-
-    RCLCPP_ERROR_EXPRESSION(
-      get_logger(), !res->success, "MountConfigure: command plugin service call failed!");
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::MountControlPlugin)
diff --git a/mavros_extras/src/plugins/obstacle_distance.cpp b/mavros_extras/src/plugins/obstacle_distance.cpp
deleted file mode 100644
index b73b389c..00000000
--- a/mavros_extras/src/plugins/obstacle_distance.cpp
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright 2017 Nuno Marques.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Obstacle distance plugin
- * @file obstacle_distance.cpp
- * @author Nuno Marques <n.marques21@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "sensor_msgs/msg/laser_scan.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-//! Radians to degrees
-static constexpr double RAD_TO_DEG = 180.0 / M_PI;
-//! Mavlink MAV_DISTANCE_SENSOR enumeration
-using mavlink::common::MAV_DISTANCE_SENSOR;
-
-/**
- * @brief Obstacle distance plugin
- * @plugin obstacle_distance
- *
- * Publishes obstacle distance array to the FCU, in order to assist in an obstacle
- * avoidance flight.
- * @see obstacle_cb()
- */
-class ObstacleDistancePlugin : public plugin::Plugin
-{
-public:
-  explicit ObstacleDistancePlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "obstacle")
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "mav_frame", "GLOBAL", [&](const rclcpp::Parameter & p) {
-        auto mav_frame = p.as_string();
-        frame = utils::mav_frame_from_str(mav_frame);
-        // MAV_FRAME index based on given frame name (If unknown, defaults to GENERIC)
-      });
-
-    obstacle_sub =
-      node->create_subscription<sensor_msgs::msg::LaserScan>(
-      "~/send", 10,
-      std::bind(&ObstacleDistancePlugin::obstacle_cb, this, _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  rclcpp::Subscription<sensor_msgs::msg::LaserScan>::SharedPtr obstacle_sub;
-
-  mavlink::common::MAV_FRAME frame;
-
-  /**
-   * @brief Send obstacle distance array to the FCU.
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#OBSTACLE_DISTANCE
-   * @param req	received ObstacleDistance msg
-   */
-  void obstacle_cb(const sensor_msgs::msg::LaserScan::SharedPtr req)
-  {
-    mavlink::common::msg::OBSTACLE_DISTANCE obstacle {};
-
-    if (req->ranges.size() <= obstacle.distances.size()) {
-      // all distances from sensor will fit in obstacle distance message
-      for (size_t i = 0; i < req->ranges.size(); i++) {
-        float distance_cm = req->ranges[i] * 1e2;
-        if (std::isnan(distance_cm) || distance_cm >= UINT16_MAX || distance_cm < 0) {
-          obstacle.distances[i] = UINT16_MAX;
-        } else {
-          obstacle.distances[i] = static_cast<uint16_t>(distance_cm);
-        }
-      }
-      std::fill(
-        obstacle.distances.begin() + req->ranges.size(),
-        obstacle.distances.end(), UINT16_MAX);  //!< fill the rest of the array values as "Unknown"
-
-      const float increment_deg = req->angle_increment * RAD_TO_DEG;
-      obstacle.increment = static_cast<uint8_t>(increment_deg + 0.5f);  //!< Round to nearest int
-      obstacle.increment_f = increment_deg;
-    } else {
-      // all distances from sensor will not fit so we combine adjacent
-      // distances always taking the shortest distance
-      const float scale_factor = static_cast<double>(req->ranges.size()) /
-        obstacle.distances.size();
-      for (size_t i = 0; i < obstacle.distances.size(); i++) {
-        obstacle.distances[i] = UINT16_MAX;
-        for (size_t j = 0; j < scale_factor; j++) {
-          size_t req_index = floor(i * scale_factor + j);
-          float distance_cm = req->ranges[req_index] * 1e2;
-          if (!std::isnan(distance_cm) && distance_cm < UINT16_MAX && distance_cm > 0) {
-            obstacle.distances[i] =
-              std::min(obstacle.distances[i], static_cast<uint16_t>(distance_cm));
-          }
-        }
-      }
-      const float increment_deg = req->angle_increment * RAD_TO_DEG * scale_factor;
-      obstacle.increment = static_cast<uint8_t>(increment_deg + 0.5f);  //!< Round to nearest int
-      obstacle.increment_f = increment_deg;
-    }
-
-    obstacle.time_usec = get_time_usec(req->header.stamp);                  //!< [microsecs]
-    obstacle.sensor_type = utils::enum_value(MAV_DISTANCE_SENSOR::LASER);   //!< defaults is laser
-    obstacle.min_distance = req->range_min * 1e2;                           //!< [centimeters]
-    obstacle.max_distance = req->range_max * 1e2;                           //!< [centimeters]
-    obstacle.frame = utils::enum_value(frame);
-    // Assume angle_increment is positive and incoming message is in a FRD/NED frame
-    obstacle.angle_offset = req->angle_min * RAD_TO_DEG;                    //!< [degrees]
-
-    RCLCPP_DEBUG_STREAM(
-      get_logger(),
-      "OBSDIST: sensor type: " <<
-        utils::to_string_enum<MAV_DISTANCE_SENSOR>(obstacle.sensor_type) <<
-        std::endl << obstacle.to_yaml());
-
-    uas->send_message(obstacle);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::ObstacleDistancePlugin)
diff --git a/mavros_extras/src/plugins/odom.cpp b/mavros_extras/src/plugins/odom.cpp
deleted file mode 100644
index 634166be..00000000
--- a/mavros_extras/src/plugins/odom.cpp
+++ /dev/null
@@ -1,340 +0,0 @@
-/*
- * Copyright 2017 James Goppert
- * Copyright 2017,2018 Nuno Marques
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Odometry plugin
- * @file odom.cpp
- * @author James Goppert <james.goppert@gmail.com>
- * @author Nuno Marques <n.marques21@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <string>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "nav_msgs/msg/odometry.hpp"
-#include "geometry_msgs/msg/transform_stamped.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-using mavlink::common::MAV_FRAME;
-using mavlink::common::MAV_ESTIMATOR_TYPE;
-using Matrix6d = Eigen::Matrix<double, 6, 6, Eigen::RowMajor>;
-
-/**
- * @brief Odometry plugin
- * @plugin odometry
- *
- * Sends odometry data to the FCU estimator and
- * publishes odometry data that comes from FCU.
- *
- * This plugin is following ROS REP 147. Pose is expressed in parent frame.
- * (Quaternion rotates from child to parent)
- * The twist is expressed in the child frame.
- *
- * @see odom_cb()	transforming and sending odometry to fcu
- * @see handle_odom()	receiving and transforming odometry from fcu
- */
-class OdometryPlugin : public plugin::Plugin
-{
-public:
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-  explicit OdometryPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "odometry"),
-    fcu_odom_parent_id_des("map"),
-    fcu_odom_child_id_des("base_link")
-  {
-    enable_node_watch_parameters();
-
-    // frame params:
-    node_declare_and_watch_parameter(
-      "fcu.odom_parent_id_des", "map", [&](const rclcpp::Parameter & p) {
-        fcu_odom_parent_id_des = p.as_string();
-      });
-    node_declare_and_watch_parameter(
-      "fcu.odom_child_id_des", "base_link", [&](const rclcpp::Parameter & p) {
-        fcu_odom_child_id_des = p.as_string();
-      });
-
-    // publishers
-    odom_pub = node->create_publisher<nav_msgs::msg::Odometry>("~/in", 10);
-
-    // subscribers
-    odom_sub =
-      node->create_subscription<nav_msgs::msg::Odometry>(
-      "~/out", 1,
-      std::bind(&OdometryPlugin::odom_cb, this, _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&OdometryPlugin::handle_odom)
-    };
-  }
-
-private:
-  rclcpp::Publisher<nav_msgs::msg::Odometry>::SharedPtr odom_pub;
-  rclcpp::Subscription<nav_msgs::msg::Odometry>::SharedPtr odom_sub;
-
-  //!< desired orientation of the fcu odometry message's parent frame
-  std::string fcu_odom_parent_id_des;
-  //!< desired orientation of the fcu odometry message's child frame
-  std::string fcu_odom_child_id_des;
-
-  /**
-   * @brief Lookup static transform with error handling
-   * @param[in] &target The parent frame of the transformation you want to get
-   * @param[in] &source The child frame of the transformation you want to get
-   * @param[in,out] &tf_source2target The affine transform from the source to target
-   */
-  void lookup_static_transform(
-    const std::string & target, const std::string & source,
-    Eigen::Affine3d & tf_source2target)
-  {
-    try {
-      // transform lookup at current time.
-      tf_source2target = tf2::transformToEigen(
-        uas->tf2_buffer.lookupTransform(
-          target, source, rclcpp::Time(0)));
-    } catch (tf2::TransformException & ex) {
-      RCLCPP_ERROR_THROTTLE(get_logger(), *get_clock(), 1, "ODOM: Ex: %s", ex.what());
-      return;
-    }
-  }
-
-  /**
-   * @brief Handle ODOMETRY MAVlink message.
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#ODOMETRY
-   *
-   * Callback for mavlink ODOMETRY messages sent from the FCU. According to the mavlink specification,
-   * all quantities are for the child frame (fcu_frd), expressed in the parent frame (local_origin_ned).
-   * To be compliant with ROS REP 147 for the published nav_msgs/Odometry, the data will be appropriately
-   * transformed and published. Frames for the publish message should be specified in specified
-   *  in the rosparams "odometry/fcu/odom_*_id_des" (set in px4_config.yaml).
-   *
-   * @param msg	Received Mavlink msg
-   * @param odom_msg	ODOMETRY msg
-   */
-  void handle_odom(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::ODOMETRY & odom_msg,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    /**
-     * Required rotations to transform the FCU's odometry msg tto desired parent and child frame
-     */
-    Eigen::Affine3d tf_parent2parent_des;
-    Eigen::Affine3d tf_child2child_des;
-
-    lookup_static_transform(
-      fcu_odom_parent_id_des, fcu_odom_parent_id_des + "_ned",
-      tf_parent2parent_des);
-    lookup_static_transform(
-      fcu_odom_child_id_des, fcu_odom_child_id_des + "_frd",
-      tf_child2child_des);
-
-    //! Build 6x6 pose covariance matrix to be transformed and sent
-    Matrix6d cov_pose = Matrix6d::Zero();
-    ftf::mavlink_urt_to_covariance_matrix(odom_msg.pose_covariance, cov_pose);
-
-    //! Build 6x6 velocity covariance matrix to be transformed and sent
-    Matrix6d cov_vel = Matrix6d::Zero();
-    ftf::mavlink_urt_to_covariance_matrix(odom_msg.velocity_covariance, cov_vel);
-
-    Eigen::Vector3d position {};         //!< Position vector. WRT frame_id
-    Eigen::Quaterniond orientation {};   //!< Attitude quaternion. WRT frame_id
-    Eigen::Vector3d lin_vel {};          //!< Linear velocity vector. WRT child_frame_id
-    Eigen::Vector3d ang_vel {};          //!< Angular velocity vector. WRT child_frame_id
-    Matrix6d r_pose = Matrix6d::Zero();  //!< Pose 6-D Covariance matrix. WRT frame_id
-    Matrix6d r_vel = Matrix6d::Zero();   //!< Velocity 6-D Covariance matrix. WRT child_frame_id
-
-    auto odom = nav_msgs::msg::Odometry();
-
-    odom.header = uas->synchronized_header(fcu_odom_parent_id_des, odom_msg.time_usec);
-    odom.child_frame_id = fcu_odom_child_id_des;
-
-    /**
-     * Position parsing to desired parent
-     */
-    position =
-      Eigen::Vector3d(
-      tf_parent2parent_des.linear() *
-      Eigen::Vector3d(odom_msg.x, odom_msg.y, odom_msg.z));
-    odom.pose.pose.position = tf2::toMsg(position);
-
-    /**
-     * Orientation parsing. Quaternion has to be the rotation from desired child frame to desired parent frame
-     */
-    Eigen::Quaterniond q_child2parent(ftf::mavlink_to_quaternion(odom_msg.q));
-    Eigen::Affine3d tf_childDes2parentDes = tf_parent2parent_des * q_child2parent *
-      tf_child2child_des.inverse();
-    orientation = Eigen::Quaterniond(tf_childDes2parentDes.linear());
-    odom.pose.pose.orientation = tf2::toMsg(orientation);
-
-    /**
-     * Velocities parsing
-     * Linear and angular velocities are transforned to the desired child_frame.
-     */
-    lin_vel =
-      Eigen::Vector3d(
-      tf_child2child_des.linear() *
-      Eigen::Vector3d(odom_msg.vx, odom_msg.vy, odom_msg.vz));
-    ang_vel =
-      Eigen::Vector3d(
-      tf_child2child_des.linear() *
-      Eigen::Vector3d(odom_msg.rollspeed, odom_msg.pitchspeed, odom_msg.yawspeed));
-    tf2::toMsg(lin_vel, odom.twist.twist.linear);
-    tf2::toMsg(ang_vel, odom.twist.twist.angular);
-
-    /**
-     * Covariances parsing
-     */
-    //! Transform pose covariance matrix
-    r_pose.block<3, 3>(0, 0) = r_pose.block<3, 3>(3, 3) = tf_parent2parent_des.linear();
-    cov_pose = r_pose * cov_pose * r_pose.transpose();
-    Eigen::Map<Matrix6d>(odom.pose.covariance.data(), cov_pose.rows(), cov_pose.cols()) = cov_pose;
-
-    //! Transform twist covariance matrix
-    r_vel.block<3, 3>(0, 0) = r_vel.block<3, 3>(3, 3) = tf_child2child_des.linear();
-    cov_vel = r_vel * cov_vel * r_vel.transpose();
-    Eigen::Map<Matrix6d>(odom.twist.covariance.data(), cov_vel.rows(), cov_vel.cols()) = cov_vel;
-
-    //! Publish the data
-    odom_pub->publish(odom);
-  }
-
-  /**
-   * @brief Sends odometry data msgs to the FCU.
-   *
-   * Callback to odometry that should go to FCU. The frame_ids in the odom message
-   * have to fit the frames that are are added to the tf tree. The odometry message
-   * gets rotated such that the parent frame is "odom_ned" and the child frame is "base_link_frd".
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#ODOMETRY
-   * @param req	received Odometry msg
-   */
-  void odom_cb(const nav_msgs::msg::Odometry::SharedPtr odom)
-  {
-    /**
-     * Required affine rotations to apply transforms
-     */
-    Eigen::Affine3d tf_parent2parent_des;
-    Eigen::Affine3d tf_child2child_des;
-
-    lookup_static_transform(
-      odom->header.frame_id + "_ned", odom->header.frame_id,
-      tf_parent2parent_des);
-    lookup_static_transform(
-      odom->child_frame_id + "_frd", odom->child_frame_id,
-      tf_child2child_des);
-
-    //! Build 6x6 pose covariance matrix to be transformed and sent
-    ftf::Covariance6d cov_pose = odom->pose.covariance;
-    ftf::EigenMapCovariance6d cov_pose_map(cov_pose.data());
-
-    //! Build 6x6 velocity covariance matrix to be transformed and sent
-    ftf::Covariance6d cov_vel = odom->twist.covariance;
-    ftf::EigenMapCovariance6d cov_vel_map(cov_vel.data());
-
-    /** Apply transforms:
-     * According to nav_msgs/Odometry.
-     */
-    Eigen::Vector3d position {};         //!< Position vector. WRT frame_id
-    Eigen::Quaterniond orientation {};   //!< Attitude quaternion. WRT frame_id
-    Eigen::Vector3d lin_vel {};          //!< Linear velocity vector. WRT child_frame_id
-    Eigen::Vector3d ang_vel {};          //!< Angular velocity vector. WRT child_frame_id
-    Matrix6d r_pose = Matrix6d::Zero();  //!< Pose 6-D Covariance. WRT frame_id
-    Matrix6d r_vel = Matrix6d::Zero();   //!< Velocity 6-D Covariance. WRT child_frame_id
-
-    mavlink::common::msg::ODOMETRY msg {};
-    msg.frame_id = utils::enum_value(MAV_FRAME::LOCAL_FRD);
-    msg.child_frame_id = utils::enum_value(MAV_FRAME::BODY_FRD);
-    msg.estimator_type = utils::enum_value(MAV_ESTIMATOR_TYPE::VISION);
-
-    /**
-     * Position parsing from odometry's parent frame to "LOCAL_FRD" frame.
-     */
-    position =
-      Eigen::Vector3d(tf_parent2parent_des.linear() * ftf::to_eigen(odom->pose.pose.position));
-
-    /**
-     * Orientation parsing.
-     */
-    Eigen::Quaterniond q_child2parent(ftf::to_eigen(odom->pose.pose.orientation));
-    Eigen::Affine3d tf_childDes2parentDes = tf_parent2parent_des * q_child2parent *
-      tf_child2child_des.inverse();
-    orientation = Eigen::Quaterniond(tf_childDes2parentDes.linear());
-
-    /**
-     * Linear and angular velocities are transformed to base_link_frd
-     */
-    lin_vel =
-      Eigen::Vector3d(tf_child2child_des.linear() * ftf::to_eigen(odom->twist.twist.linear));
-    ang_vel =
-      Eigen::Vector3d(tf_child2child_des.linear() * ftf::to_eigen(odom->twist.twist.angular));
-
-    /** Apply covariance transforms */
-    r_pose.block<3, 3>(0, 0) = r_pose.block<3, 3>(3, 3) = tf_parent2parent_des.linear();
-    r_vel.block<3, 3>(0, 0) = r_vel.block<3, 3>(3, 3) = tf_child2child_des.linear();
-    cov_pose_map = r_pose * cov_pose_map * r_pose.transpose();
-    cov_vel_map = r_vel * cov_vel_map * r_vel.transpose();
-
-    RCLCPP_DEBUG_STREAM(
-      get_logger(),
-      "ODOM: output: pose covariance matrix:" << std::endl << cov_pose_map);
-    RCLCPP_DEBUG_STREAM(
-      get_logger(),
-      "ODOM: output: velocity covariance matrix:" << std::endl << cov_vel_map);
-
-    /* -*- ODOMETRY msg parser -*- */
-    msg.time_usec = get_time_usec(odom->header.stamp);
-
-    // [[[cog:
-    // for a, b in (('', 'position'), ('v', 'lin_vel')):
-    //     for f in 'xyz':
-    //         cog.outl(f"msg.{a}{f} = {b}.{f}();")
-    // for a, b in zip("xyz", ('rollspeed', 'pitchspeed', 'yawspeed')):
-    //     cog.outl(f"msg.{b} = ang_vel.{a}();")
-    // ]]]
-    msg.x = position.x();
-    msg.y = position.y();
-    msg.z = position.z();
-    msg.vx = lin_vel.x();
-    msg.vy = lin_vel.y();
-    msg.vz = lin_vel.z();
-    msg.rollspeed = ang_vel.x();
-    msg.pitchspeed = ang_vel.y();
-    msg.yawspeed = ang_vel.z();
-    // [[[end]]] (checksum: 47ddd5137f92fe5d094e7bfd7a5282ec)
-
-    ftf::quaternion_to_mavlink(orientation, msg.q);
-    ftf::covariance_urt_to_mavlink(cov_pose_map, msg.pose_covariance);
-    ftf::covariance_urt_to_mavlink(cov_vel_map, msg.velocity_covariance);
-
-    // send ODOMETRY msg
-    uas->send_message(msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::OdometryPlugin)
diff --git a/mavros_extras/src/plugins/onboard_computer_status.cpp b/mavros_extras/src/plugins/onboard_computer_status.cpp
deleted file mode 100644
index 2a0aa9e6..00000000
--- a/mavros_extras/src/plugins/onboard_computer_status.cpp
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright 2019 Tanja Baumann.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Onboard Computer Status plugin
- * @file onboard_computer_status.cpp
- * @author Tanja Baumann <tanja@auterion.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/onboard_computer_status.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Onboard Computer Status plugin
- * @plugin onboard_computer_status
- *
- * Publishes the status of the onboard computer
- * @see status_cb()
- */
-class OnboardComputerStatusPlugin : public plugin::Plugin
-{
-public:
-  explicit OnboardComputerStatusPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "onboard_computer")
-  {
-    status_sub = node->create_subscription<mavros_msgs::msg::OnboardComputerStatus>(
-      "~/status", 10, std::bind(
-        &OnboardComputerStatusPlugin::status_cb, this,
-        _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::OnboardComputerStatus>::SharedPtr status_sub;
-
-  /**
-   * @brief Send onboard computer status to FCU and groundstation
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#ONBOARD_COMPUTER_STATUS
-   * @param req	received OnboardComputerStatus msg
-   */
-  void status_cb(const mavros_msgs::msg::OnboardComputerStatus::SharedPtr req)
-  {
-    mavlink::common::msg::ONBOARD_COMPUTER_STATUS status {};
-    status.time_usec = get_time_usec(req->header.stamp);    //!< [microsecs]
-    // [[[cog:
-    // for f in ('uptime',
-    //     'type',
-    //     'temperature_board',
-    //     'ram_usage',
-    //     'ram_total'):
-    //     cog.outl("status.%s = req->%s;" % (f, f))
-    //
-    // for f in ('cpu_cores',
-    //     'cpu_combined',
-    //     'gpu_cores',
-    //     'gpu_combined',
-    //     'temperature_core',
-    //     'fan_speed',
-    //     'storage_type',
-    //     'storage_usage',
-    //     'storage_total',
-    //     'link_type',
-    //     'link_tx_rate',
-    //     'link_rx_rate',
-    //     'link_tx_max',
-    //     'link_rx_max'):
-    //     cog.outl("std::copy(req->%s.cbegin(), req->%s.cend(), status.%s.begin());" % (f, f, f))
-    // ]]]
-    status.uptime = req->uptime;
-    status.type = req->type;
-    status.temperature_board = req->temperature_board;
-    status.ram_usage = req->ram_usage;
-    status.ram_total = req->ram_total;
-    std::copy(req->cpu_cores.cbegin(), req->cpu_cores.cend(), status.cpu_cores.begin());
-    std::copy(req->cpu_combined.cbegin(), req->cpu_combined.cend(), status.cpu_combined.begin());
-    std::copy(req->gpu_cores.cbegin(), req->gpu_cores.cend(), status.gpu_cores.begin());
-    std::copy(req->gpu_combined.cbegin(), req->gpu_combined.cend(), status.gpu_combined.begin());
-    std::copy(req->temperature_core.cbegin(), req->temperature_core.cend(),
-          status.temperature_core.begin());
-    std::copy(req->fan_speed.cbegin(), req->fan_speed.cend(), status.fan_speed.begin());
-    std::copy(req->storage_type.cbegin(), req->storage_type.cend(), status.storage_type.begin());
-    std::copy(req->storage_usage.cbegin(), req->storage_usage.cend(), status.storage_usage.begin());
-    std::copy(req->storage_total.cbegin(), req->storage_total.cend(), status.storage_total.begin());
-    std::copy(req->link_type.cbegin(), req->link_type.cend(), status.link_type.begin());
-    std::copy(req->link_tx_rate.cbegin(), req->link_tx_rate.cend(), status.link_tx_rate.begin());
-    std::copy(req->link_rx_rate.cbegin(), req->link_rx_rate.cend(), status.link_rx_rate.begin());
-    std::copy(req->link_tx_max.cbegin(), req->link_tx_max.cend(), status.link_tx_max.begin());
-    std::copy(req->link_rx_max.cbegin(), req->link_rx_max.cend(), status.link_rx_max.begin());
-    // [[[end]]] (checksum: b06efca90d9a1160c16350e0f0a0f060)
-
-    uas->send_message(status, req->component);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::OnboardComputerStatusPlugin)
diff --git a/mavros_extras/src/plugins/optical_flow.cpp b/mavros_extras/src/plugins/optical_flow.cpp
deleted file mode 100644
index a8990924..00000000
--- a/mavros_extras/src/plugins/optical_flow.cpp
+++ /dev/null
@@ -1,199 +0,0 @@
-/*
- * Copyright 2023 Vladislav Chuvarjov
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief OpticalFlow plugin
- * @file optical_flow.cpp
- * @author Vladislav Chuvarjov <chuvarevanv@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <string>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/optical_flow.hpp"
-#include "sensor_msgs/msg/range.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Optical Flow custom plugin
- * @plugin optical_flow
- *
- * This plugin can publish data from OpticalFlow camera to ROS
- */
-class OpticalFlowPlugin : public plugin::Plugin
-{
-public:
-  explicit OpticalFlowPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "optical_flow"),
-    ranger_fov(0.0),
-    ranger_min_range(0.3),
-    ranger_max_range(5.0)
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "frame_id", "optical_flow", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    /**
-     * @note Default rangefinder is Maxbotix HRLV-EZ4
-     * This is a narrow beam (60cm wide at 5 meters,
-     * but also at 1 meter). 6.8 degrees at 5 meters, 31 degrees
-     * at 1 meter
-     */
-    node_declare_and_watch_parameter(
-      "ranger_fov", 0.119428926, [&](const rclcpp::Parameter & p) {
-        ranger_fov = p.as_double();
-      });
-
-    node_declare_and_watch_parameter(
-      "ranger_min_range", 0.3, [&](const rclcpp::Parameter & p) {
-        ranger_min_range = p.as_double();
-      });
-
-    node_declare_and_watch_parameter(
-      "ranger_max_range", 5.0, [&](const rclcpp::Parameter & p) {
-        ranger_max_range = p.as_double();
-      });
-
-    flow_pub = node->create_publisher<mavros_msgs::msg::OpticalFlow>(
-      "~/raw/optical_flow", 10);
-    range_pub = node->create_publisher<sensor_msgs::msg::Range>("~/ground_distance", 10);
-
-    flow_sub = node->create_subscription<mavros_msgs::msg::OpticalFlow>(
-      "~/raw/send", 1, std::bind(
-        &OpticalFlowPlugin::send_cb, this,
-        _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&OpticalFlowPlugin::handle_optical_flow)
-    };
-  }
-
-private:
-  std::string frame_id;
-
-  double ranger_fov;
-  double ranger_min_range;
-  double ranger_max_range;
-
-  rclcpp::Publisher<mavros_msgs::msg::OpticalFlow>::SharedPtr flow_pub;
-  rclcpp::Publisher<sensor_msgs::msg::Range>::SharedPtr range_pub;
-  rclcpp::Subscription<mavros_msgs::msg::OpticalFlow>::SharedPtr flow_sub;
-
-  void handle_optical_flow(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::OPTICAL_FLOW & flow,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto header = uas->synchronized_header(frame_id, flow.time_usec);
-
-    /**
-     * Raw message with axes mapped to ROS conventions and temp in degrees celsius.
-     *
-     * The optical flow camera is essentially an angular sensor, so conversion is like
-     * gyroscope. (aircraft -> baselink)
-     */
-    auto int_flow = ftf::transform_frame_aircraft_baselink(
-      Eigen::Vector3d(
-        flow.flow_x,
-        flow.flow_y,
-        0.0));
-
-    auto int_flow_comp_m_xy = ftf::transform_frame_aircraft_baselink(
-      Eigen::Vector3d(
-        flow.flow_comp_m_x,
-        flow.flow_comp_m_y,
-        0.0));
-
-    auto int_flow_rate_xy = ftf::transform_frame_aircraft_baselink(
-      Eigen::Vector3d(
-        flow.flow_rate_x,
-        flow.flow_rate_y,
-        0.0));
-
-    auto flow_msg = mavros_msgs::msg::OpticalFlow();
-
-    flow_msg.header = header;
-
-    flow_msg.flow.x = int_flow.x();
-    flow_msg.flow.y = int_flow.y();
-    flow_msg.flow_comp_m.x = int_flow_comp_m_xy.x();
-    flow_msg.flow_comp_m.y = int_flow_comp_m_xy.y();
-    flow_msg.flow_rate.x = int_flow_rate_xy.x();
-    flow_msg.flow_rate.y = int_flow_rate_xy.y();
-    flow_msg.ground_distance = flow.ground_distance;
-    flow_msg.quality = flow.quality;
-
-    flow_pub->publish(flow_msg);
-
-    // Rangefinder
-    /**
-     * @todo: use distance_sensor plugin only to publish this data
-     * (which receives DISTANCE_SENSOR msg with multiple rangefinder
-     * sensors data)
-     *
-     */
-    auto range_msg = sensor_msgs::msg::Range();
-
-    range_msg.header = header;
-
-    range_msg.radiation_type = sensor_msgs::msg::Range::INFRARED;
-    range_msg.field_of_view = ranger_fov;
-    range_msg.min_range = ranger_min_range;
-    range_msg.max_range = ranger_max_range;
-    range_msg.range = flow.ground_distance;
-
-    range_pub->publish(range_msg);
-  }
-
-  void send_cb(const mavros_msgs::msg::OpticalFlow::SharedPtr msg)
-  {
-    mavlink::common::msg::OPTICAL_FLOW flow_msg = {};
-
-    auto int_flow =
-      ftf::transform_frame_baselink_aircraft(mavros::ftf::to_eigen(msg->flow));
-    auto int_flow_comp_m_xy =
-      ftf::transform_frame_baselink_aircraft(mavros::ftf::to_eigen(msg->flow_comp_m));
-    auto int_flow_rate_xy =
-      ftf::transform_frame_baselink_aircraft(mavros::ftf::to_eigen(msg->flow_rate));
-
-    flow_msg.time_usec = get_time_usec(msg->header.stamp);
-    flow_msg.sensor_id = 0;
-    flow_msg.flow_x = int_flow.x();
-    flow_msg.flow_y = int_flow.y();
-    flow_msg.flow_comp_m_x = int_flow_comp_m_xy.x();
-    flow_msg.flow_comp_m_y = int_flow_comp_m_xy.y();
-    flow_msg.quality = msg->quality;
-    flow_msg.ground_distance = msg->ground_distance;   // temperature in centi-degrees Celsius
-    flow_msg.flow_rate_x = int_flow_rate_xy.x();
-    flow_msg.flow_rate_y = int_flow_rate_xy.y();
-
-    uas->send_message(flow_msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::OpticalFlowPlugin)
diff --git a/mavros_extras/src/plugins/play_tune.cpp b/mavros_extras/src/plugins/play_tune.cpp
deleted file mode 100644
index 3f0894f2..00000000
--- a/mavros_extras/src/plugins/play_tune.cpp
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright 2020 Morten Fyhn Amundsen <morten.fyhn.amundsen@gmail.com>
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Onboard Computer Status plugin
- * @file onboard_computer_status.cpp
- * @author Morten Fyhn Amundsen <morten.fyhn.amundsen@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <cstring>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/play_tune_v2.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Play Tune service
- * @plugin play_tune
- */
-class PlayTunePlugin : public plugin::Plugin
-{
-public:
-  explicit PlayTunePlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "play_tune")
-  {
-    sub =
-      node->create_subscription<mavros_msgs::msg::PlayTuneV2>(
-      "play_tune", 1,
-      std::bind(&PlayTunePlugin::callback, this, _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* No subscriptions */};
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::PlayTuneV2>::SharedPtr sub;
-
-  void callback(const mavros_msgs::msg::PlayTuneV2::SharedPtr tune)
-  {
-    auto msg = mavlink::common::msg::PLAY_TUNE_V2{};
-
-    uas->msg_set_target(msg);
-    msg.format = tune->format;
-    mavlink::set_string_z(msg.tune, tune->tune);
-
-    uas->send_message(msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::PlayTunePlugin)
diff --git a/mavros_extras/src/plugins/px4flow.cpp b/mavros_extras/src/plugins/px4flow.cpp
deleted file mode 100644
index c0607ac6..00000000
--- a/mavros_extras/src/plugins/px4flow.cpp
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * Copyright 2014 M.H.Kabir.
- * Copyright 2016,2021 Vladimir Ermakov
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief PX4Flow plugin
- * @file px4flow.cpp
- * @author M.H.Kabir <mhkabir98@gmail.com>
- * @author Vladimir Ermakov <vooon341@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <string>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/optical_flow_rad.hpp"
-#include "sensor_msgs/msg/temperature.hpp"
-#include "sensor_msgs/msg/range.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief PX4 Optical Flow plugin
- * @plugin px4flow
- *
- * This plugin can publish data from PX4Flow camera to ROS
- */
-class PX4FlowPlugin : public plugin::Plugin
-{
-public:
-  explicit PX4FlowPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "px4flow"),
-    ranger_fov(0.0),
-    ranger_min_range(0.3),
-    ranger_max_range(5.0)
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "frame_id", "px4flow", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    /**
-     * @note Default rangefinder is Maxbotix HRLV-EZ4
-     * This is a narrow beam (60cm wide at 5 meters,
-     * but also at 1 meter). 6.8 degrees at 5 meters, 31 degrees
-     * at 1 meter
-     */
-    node_declare_and_watch_parameter(
-      "ranger_fov", 0.119428926, [&](const rclcpp::Parameter & p) {
-        ranger_fov = p.as_double();
-      });
-
-    node_declare_and_watch_parameter(
-      "ranger_min_range", 0.3, [&](const rclcpp::Parameter & p) {
-        ranger_min_range = p.as_double();
-      });
-
-    node_declare_and_watch_parameter(
-      "ranger_max_range", 5.0, [&](const rclcpp::Parameter & p) {
-        ranger_max_range = p.as_double();
-      });
-
-    flow_rad_pub = node->create_publisher<mavros_msgs::msg::OpticalFlowRad>(
-      "~/raw/optical_flow_rad", 10);
-    range_pub = node->create_publisher<sensor_msgs::msg::Range>("~/ground_distance", 10);
-    temp_pub = node->create_publisher<sensor_msgs::msg::Temperature>("~/temperature", 10);
-
-    flow_rad_sub = node->create_subscription<mavros_msgs::msg::OpticalFlowRad>(
-      "~/raw/send", 1, std::bind(
-        &PX4FlowPlugin::send_cb, this,
-        _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&PX4FlowPlugin::handle_optical_flow_rad)
-    };
-  }
-
-private:
-  std::string frame_id;
-
-  double ranger_fov;
-  double ranger_min_range;
-  double ranger_max_range;
-
-  rclcpp::Publisher<mavros_msgs::msg::OpticalFlowRad>::SharedPtr flow_rad_pub;
-  rclcpp::Publisher<sensor_msgs::msg::Range>::SharedPtr range_pub;
-  rclcpp::Publisher<sensor_msgs::msg::Temperature>::SharedPtr temp_pub;
-  rclcpp::Subscription<mavros_msgs::msg::OpticalFlowRad>::SharedPtr flow_rad_sub;
-
-  void handle_optical_flow_rad(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::OPTICAL_FLOW_RAD & flow_rad,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto header = uas->synchronized_header(frame_id, flow_rad.time_usec);
-
-    /**
-     * Raw message with axes mapped to ROS conventions and temp in degrees celsius.
-     *
-     * The optical flow camera is essentially an angular sensor, so conversion is like
-     * gyroscope. (aircraft -> baselink)
-     */
-    auto int_xy = ftf::transform_frame_aircraft_baselink(
-      Eigen::Vector3d(
-        flow_rad.integrated_x,
-        flow_rad.integrated_y,
-        0.0));
-    auto int_gyro = ftf::transform_frame_aircraft_baselink(
-      Eigen::Vector3d(
-        flow_rad.integrated_xgyro,
-        flow_rad.integrated_ygyro,
-        flow_rad.integrated_zgyro));
-
-    auto flow_rad_msg = mavros_msgs::msg::OpticalFlowRad();
-
-    flow_rad_msg.header = header;
-    flow_rad_msg.integration_time_us = flow_rad.integration_time_us;
-
-    flow_rad_msg.integrated_x = int_xy.x();
-    flow_rad_msg.integrated_y = int_xy.y();
-
-    flow_rad_msg.integrated_xgyro = int_gyro.x();
-    flow_rad_msg.integrated_ygyro = int_gyro.y();
-    flow_rad_msg.integrated_zgyro = int_gyro.z();
-
-    flow_rad_msg.temperature = flow_rad.temperature / 100.0f;   // in degrees celsius
-    flow_rad_msg.time_delta_distance_us = flow_rad.time_delta_distance_us;
-    flow_rad_msg.distance = flow_rad.distance;
-    flow_rad_msg.quality = flow_rad.quality;
-
-    flow_rad_pub->publish(flow_rad_msg);
-
-    // Temperature
-    auto temp_msg = sensor_msgs::msg::Temperature();
-
-    temp_msg.header = header;
-    temp_msg.temperature = flow_rad_msg.temperature;
-
-    temp_pub->publish(temp_msg);
-
-    // Rangefinder
-    /**
-     * @todo: use distance_sensor plugin only to publish this data
-     * (which receives DISTANCE_SENSOR msg with multiple rangefinder
-     * sensors data)
-     *
-     * @todo: suggest modification on MAVLink OPTICAL_FLOW_RAD msg
-     * which removes sonar data fields from it
-     */
-    auto range_msg = sensor_msgs::msg::Range();
-
-    range_msg.header = header;
-
-    range_msg.radiation_type = sensor_msgs::msg::Range::ULTRASOUND;
-    range_msg.field_of_view = ranger_fov;
-    range_msg.min_range = ranger_min_range;
-    range_msg.max_range = ranger_max_range;
-    range_msg.range = flow_rad.distance;
-
-    range_pub->publish(range_msg);
-  }
-
-  void send_cb(const mavros_msgs::msg::OpticalFlowRad::SharedPtr msg)
-  {
-    mavlink::common::msg::OPTICAL_FLOW_RAD flow_rad_msg = {};
-
-    auto int_xy = ftf::transform_frame_baselink_aircraft(
-      Eigen::Vector3d(
-        msg->integrated_x,
-        msg->integrated_y,
-        0.0));
-    auto int_gyro = ftf::transform_frame_baselink_aircraft(
-      Eigen::Vector3d(
-        msg->integrated_xgyro,
-        msg->integrated_ygyro,
-        msg->integrated_zgyro));
-
-    flow_rad_msg.time_usec = get_time_usec(msg->header.stamp);
-    flow_rad_msg.sensor_id = 0;
-    flow_rad_msg.integration_time_us = msg->integration_time_us;
-    flow_rad_msg.integrated_x = int_xy.x();
-    flow_rad_msg.integrated_y = int_xy.y();
-    flow_rad_msg.integrated_xgyro = int_gyro.x();
-    flow_rad_msg.integrated_ygyro = int_gyro.y();
-    flow_rad_msg.integrated_zgyro = int_gyro.z();
-    flow_rad_msg.temperature = msg->temperature * 100.0f;   // temperature in centi-degrees Celsius
-    flow_rad_msg.quality = msg->quality;
-    flow_rad_msg.time_delta_distance_us = msg->time_delta_distance_us;
-    flow_rad_msg.distance = msg->distance;
-
-    uas->send_message(flow_rad_msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::PX4FlowPlugin)
diff --git a/mavros_extras/src/plugins/rangefinder.cpp b/mavros_extras/src/plugins/rangefinder.cpp
deleted file mode 100644
index 4d583fb0..00000000
--- a/mavros_extras/src/plugins/rangefinder.cpp
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright 2016 Ardupilot.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Rangefinder plugin
- * @file rangefinder.cpp
- * @author Pierre Kancir <khancyr@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "sensor_msgs/msg/range.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Ardupilot Rangefinder plugin.
- * @plugin rangefinder
- *
- * This plugin allows publishing rangefinder sensor data from Ardupilot FCU to ROS.
- */
-class RangefinderPlugin : public plugin::Plugin
-{
-public:
-  explicit RangefinderPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "rangefinder")
-  {
-    rangefinder_pub = node->create_publisher<sensor_msgs::msg::Range>("~/rangefinder", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&RangefinderPlugin::handle_rangefinder)
-    };
-  }
-
-private:
-  rclcpp::Publisher<sensor_msgs::msg::Range>::SharedPtr rangefinder_pub;
-
-  void handle_rangefinder(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::RANGEFINDER & rangefinder,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto rangefinder_msg = sensor_msgs::msg::Range();
-
-    rangefinder_msg.header.stamp = node->now();
-    rangefinder_msg.header.frame_id = "/rangefinder";
-    rangefinder_msg.radiation_type = sensor_msgs::msg::Range::INFRARED;
-    rangefinder_msg.field_of_view = 0;
-    rangefinder_msg.min_range = 0;
-    rangefinder_msg.max_range = 1000;
-    rangefinder_msg.range = rangefinder.distance;
-
-    rangefinder_pub->publish(rangefinder_msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::RangefinderPlugin)
diff --git a/mavros_extras/src/plugins/terrain.cpp b/mavros_extras/src/plugins/terrain.cpp
deleted file mode 100644
index 428fcbfd..00000000
--- a/mavros_extras/src/plugins/terrain.cpp
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Copyright 2021 Ardupilot.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Terrain plugin
- * @file terrain.cpp
- * @author Matt Anderson <anderson_rayner@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/terrain_report.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Terrain height plugin.
- * @plugin terrain
- *
- * This plugin allows publishing of terrain height estimate from FCU to ROS.
- *
- */
-class TerrainPlugin : public plugin::Plugin
-{
-public:
-  explicit TerrainPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "terrain")
-  {
-    terrain_report_pub = node->create_publisher<mavros_msgs::msg::TerrainReport>("~/report", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&TerrainPlugin::handle_terrain_report)
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::TerrainReport>::SharedPtr terrain_report_pub;
-
-  void handle_terrain_report(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::TERRAIN_REPORT & report,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto terrain_report_msg = mavros_msgs::msg::TerrainReport();
-
-    terrain_report_msg.header.stamp = node->now();
-    terrain_report_msg.header.frame_id = "terrain";
-
-    terrain_report_msg.latitude = static_cast<double>(report.lat) / 1e7;
-    terrain_report_msg.longitude = static_cast<double>(report.lon) / 1e7;
-    terrain_report_msg.spacing = report.spacing;
-    terrain_report_msg.terrain_height = report.terrain_height;
-    terrain_report_msg.current_height = report.current_height;
-    terrain_report_msg.pending = report.pending;
-    terrain_report_msg.loaded = report.loaded;
-
-    terrain_report_pub->publish(terrain_report_msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::TerrainPlugin)
diff --git a/mavros_extras/src/plugins/trajectory.cpp b/mavros_extras/src/plugins/trajectory.cpp
deleted file mode 100644
index 209dd158..00000000
--- a/mavros_extras/src/plugins/trajectory.cpp
+++ /dev/null
@@ -1,435 +0,0 @@
-/*
- * Copyright 2018 Martina Rivizzigno.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.mdA
- */
-/**
- * @brief Trajectory plugin
- * @file trajectory.cpp
- * @author Martina Rivizzigno <martina@rivizzigno.it>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/trajectory.hpp"
-#include "mavros_msgs/msg/position_target.hpp"
-#include "nav_msgs/msg/path.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-using utils::enum_value;
-
-//! Points count in TRAJECTORY message
-static constexpr size_t NUM_POINTS = 5;
-
-//! Type matching mavlink::common::msg::TRAJECTORY::TRAJECTORY_REPRESENTATION_WAYPOINTS fields
-using MavPoints = std::array<float, NUM_POINTS>;
-
-using RosPoints = mavros_msgs::msg::PositionTarget;
-
-/**
- * @brief Trajectory plugin to receive planned path from the FCU and
- * send back to the FCU a corrected path (collision free, smoothed)
- * @plugin trajectory
- *
- * @see trajectory_cb()
- */
-class TrajectoryPlugin : public plugin::Plugin
-{
-public:
-  explicit TrajectoryPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "trajectory")
-  {
-    trajectory_generated_sub = node->create_subscription<mavros_msgs::msg::Trajectory>(
-      "~/generated", 10, std::bind(
-        &TrajectoryPlugin::trajectory_cb, this, _1));
-    path_sub =
-      node->create_subscription<nav_msgs::msg::Path>(
-      "~/path", 10,
-      std::bind(&TrajectoryPlugin::path_cb, this, _1));
-    trajectory_desired_pub = node->create_publisher<mavros_msgs::msg::Trajectory>("~/desired", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&TrajectoryPlugin::handle_trajectory)
-    };
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::Trajectory>::SharedPtr trajectory_generated_sub;
-  rclcpp::Subscription<nav_msgs::msg::Path>::SharedPtr path_sub;
-
-  rclcpp::Publisher<mavros_msgs::msg::Trajectory>::SharedPtr trajectory_desired_pub;
-
-  // [[[cog:
-  // def outl_fill_points_ned_vector(x, y, z, vec_name, vec_type, point_xyz):
-  //     cog.outl(
-  //         f"""void fill_points_{vec_name}(\n"""
-  //         f"""  MavPoints & {x}, MavPoints & {y}, MavPoints & {z},\n"""
-  //         f"""  const geometry_msgs::msg::{vec_type} & {vec_name}, const size_t i)\n"""
-  //         f"""{{\n"""
-  //         f"""  auto {vec_name}_ned = ftf::transform_frame_enu_ned("""
-  //         f"""ftf::to_eigen({vec_name}));\n"""
-  //     )
-  //
-  //     for axis in "xyz":
-  //         cog.outl(f"  {axis}[i] = {vec_name}_ned.{axis}();")
-  //
-  //     cog.outl("}\n")
-  //
-  //
-  // outl_fill_points_ned_vector('x', 'y', 'z', 'position', 'Point', range(0, 3))
-  // outl_fill_points_ned_vector('x', 'y', 'z', 'velocity', 'Vector3', range(3, 6))
-  // outl_fill_points_ned_vector('x', 'y', 'z', 'acceleration', 'Vector3', range(6, 9))
-  // ]]]
-  void fill_points_position(
-    MavPoints & x, MavPoints & y, MavPoints & z,
-    const geometry_msgs::msg::Point & position, const size_t i)
-  {
-    auto position_ned = ftf::transform_frame_enu_ned(ftf::to_eigen(position));
-
-    x[i] = position_ned.x();
-    y[i] = position_ned.y();
-    z[i] = position_ned.z();
-  }
-
-  void fill_points_velocity(
-    MavPoints & x, MavPoints & y, MavPoints & z,
-    const geometry_msgs::msg::Vector3 & velocity, const size_t i)
-  {
-    auto velocity_ned = ftf::transform_frame_enu_ned(ftf::to_eigen(velocity));
-
-    x[i] = velocity_ned.x();
-    y[i] = velocity_ned.y();
-    z[i] = velocity_ned.z();
-  }
-
-  void fill_points_acceleration(
-    MavPoints & x, MavPoints & y, MavPoints & z,
-    const geometry_msgs::msg::Vector3 & acceleration, const size_t i)
-  {
-    auto acceleration_ned = ftf::transform_frame_enu_ned(ftf::to_eigen(acceleration));
-
-    x[i] = acceleration_ned.x();
-    y[i] = acceleration_ned.y();
-    z[i] = acceleration_ned.z();
-  }
-
-  // [[[end]]] (checksum: a0ed1550494e431a3ba599da8503c8b6)
-
-  void fill_points_yaw_wp(MavPoints & y, const double yaw, const size_t i)
-  {
-    y[i] = wrap_pi(-yaw + (M_PI / 2.0f));
-  }
-
-  void fill_points_yaw_speed(MavPoints & yv, const double yaw_speed, const size_t i)
-  {
-    yv[i] = yaw_speed;
-  }
-
-  void fill_points_yaw_q(
-    MavPoints & y, const geometry_msgs::msg::Quaternion & orientation,
-    const size_t i)
-  {
-    auto q_wp = ftf::transform_orientation_enu_ned(
-      ftf::transform_orientation_baselink_aircraft(
-        ftf::to_eigen(orientation)));
-    auto yaw_wp = ftf::quaternion_get_yaw(q_wp);
-
-    y[i] = wrap_pi(-yaw_wp + (M_PI / 2.0f));
-  }
-
-  void fill_points_delta(MavPoints & y, const double time_horizon, const size_t i)
-  {
-    y[i] = time_horizon;
-  }
-
-  auto fill_points_unused_path(
-    mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t,
-    const size_t i)
-  {
-    t.vel_x[i] = NAN;
-    t.vel_y[i] = NAN;
-    t.vel_z[i] = NAN;
-    t.acc_x[i] = NAN;
-    t.acc_y[i] = NAN;
-    t.acc_z[i] = NAN;
-    t.vel_yaw[i] = NAN;
-  }
-
-  void fill_points_all_unused(
-    mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t,
-    const size_t i)
-  {
-    t.pos_x[i] = NAN;
-    t.pos_y[i] = NAN;
-    t.pos_z[i] = NAN;
-
-    t.vel_x[i] = NAN;
-    t.vel_y[i] = NAN;
-    t.vel_z[i] = NAN;
-
-    t.acc_x[i] = NAN;
-    t.acc_y[i] = NAN;
-    t.acc_z[i] = NAN;
-
-    t.pos_yaw[i] = NAN;
-    t.vel_yaw[i] = NAN;
-  }
-
-  void fill_points_all_unused_bezier(
-    mavlink::common::msg::TRAJECTORY_REPRESENTATION_BEZIER & t,
-    const size_t i)
-  {
-    t.pos_x[i] = NAN;
-    t.pos_y[i] = NAN;
-    t.pos_z[i] = NAN;
-
-    t.pos_yaw[i] = NAN;
-
-    t.delta[i] = NAN;
-  }
-
-  void fill_msg_position(
-    geometry_msgs::msg::Point & position,
-    const mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t,
-    const size_t i)
-  {
-    auto position_enu =
-      ftf::transform_frame_ned_enu(Eigen::Vector3d(t.pos_x[i], t.pos_y[i], t.pos_z[i]));
-
-    position.x = position_enu.x();
-    position.y = position_enu.y();
-    position.z = position_enu.z();
-  }
-
-  void fill_msg_velocity(
-    geometry_msgs::msg::Vector3 & velocity,
-    const mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t,
-    const size_t i)
-  {
-    auto velocity_enu =
-      ftf::transform_frame_ned_enu(Eigen::Vector3d(t.vel_x[i], t.vel_y[i], t.vel_z[i]));
-
-    velocity.x = velocity_enu.x();
-    velocity.y = velocity_enu.y();
-    velocity.z = velocity_enu.z();
-  }
-
-  void fill_msg_acceleration(
-    geometry_msgs::msg::Vector3 & acceleration,
-    const mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t,
-    const size_t i)
-  {
-    auto acceleration_enu =
-      ftf::transform_frame_ned_enu(Eigen::Vector3d(t.acc_x[i], t.acc_y[i], t.acc_z[i]));
-
-    acceleration.x = acceleration_enu.x();
-    acceleration.y = acceleration_enu.y();
-    acceleration.z = acceleration_enu.z();
-  }
-
-
-  // -*- callbacks -*-
-
-  /**
-   * @brief Send corrected path to the FCU.
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#TRAJECTORY
-   * @param req	received Trajectory msg
-   */
-  void trajectory_cb(const mavros_msgs::msg::Trajectory::SharedPtr req)
-  {
-    rcpputils::require_true(NUM_POINTS == req->point_valid.size());
-
-    if (req->type == mavros_msgs::msg::Trajectory::MAV_TRAJECTORY_REPRESENTATION_WAYPOINTS) {
-      mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS trajectory {};
-
-      auto fill_point_rep_waypoints =
-        [&](mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t, const RosPoints & rp,
-        const size_t i) {
-          const auto valid = req->point_valid[i];
-
-          auto valid_so_far = trajectory.valid_points;
-          if (!valid) {
-            fill_points_all_unused(t, i);
-            return;
-          }
-
-          trajectory.valid_points = valid_so_far + 1;
-          fill_points_position(t.pos_x, t.pos_y, t.pos_z, rp.position, i);
-          fill_points_velocity(t.vel_x, t.vel_y, t.vel_z, rp.velocity, i);
-          fill_points_acceleration(t.acc_x, t.acc_y, t.acc_z, rp.acceleration_or_force, i);
-          fill_points_yaw_wp(t.pos_yaw, rp.yaw, i);
-          fill_points_yaw_speed(t.vel_yaw, rp.yaw_rate, i);
-          t.command[i] = UINT16_MAX;
-        };
-
-      // [[[cog:
-      // for i in range(5):
-      //      cog.outl(
-      //          f"fill_point_rep_waypoints(trajectory, req->point_{i+1}, {i});"
-      //      )
-      // ]]]
-      fill_point_rep_waypoints(trajectory, req->point_1, 0);
-      fill_point_rep_waypoints(trajectory, req->point_2, 1);
-      fill_point_rep_waypoints(trajectory, req->point_3, 2);
-      fill_point_rep_waypoints(trajectory, req->point_4, 3);
-      fill_point_rep_waypoints(trajectory, req->point_5, 4);
-      // [[[end]]] (checksum: 3378a593279611a83e25efee67393195)
-
-      trajectory.time_usec = get_time_usec(req->header.stamp);      //!< [milisecs]
-      uas->send_message(trajectory);
-    } else {
-      mavlink::common::msg::TRAJECTORY_REPRESENTATION_BEZIER trajectory {};
-      auto fill_point_rep_bezier =
-        [&](mavlink::common::msg::TRAJECTORY_REPRESENTATION_BEZIER & t, const RosPoints & rp,
-        const size_t i) {
-          const auto valid = req->point_valid[i];
-
-          auto valid_so_far = trajectory.valid_points;
-          if (!valid) {
-            fill_points_all_unused_bezier(t, i);
-            return;
-          }
-
-          trajectory.valid_points = valid_so_far + 1;
-          fill_points_position(t.pos_x, t.pos_y, t.pos_z, rp.position, i);
-          fill_points_yaw_wp(t.pos_yaw, rp.yaw, i);
-          fill_points_delta(t.delta, req->time_horizon[i], i);
-        };
-
-      // [[[cog:
-      // for i in range(5):
-      //      cog.outl(
-      //          f"fill_point_rep_bezier(trajectory, req->point_{i+1}, {i});"
-      //      )
-      // ]]]
-      fill_point_rep_bezier(trajectory, req->point_1, 0);
-      fill_point_rep_bezier(trajectory, req->point_2, 1);
-      fill_point_rep_bezier(trajectory, req->point_3, 2);
-      fill_point_rep_bezier(trajectory, req->point_4, 3);
-      fill_point_rep_bezier(trajectory, req->point_5, 4);
-      // [[[end]]] (checksum: a12a34d1190be94c777077f2d297918b)
-
-      trajectory.time_usec = get_time_usec(req->header.stamp);      //!< [milisecs]
-      uas->send_message(trajectory);
-    }
-  }
-
-  /**
-   * @brief Send corrected path to the FCU.
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#TRAJECTORY
-   * @param req	received nav_msgs Path msg
-   */
-  void path_cb(const nav_msgs::msg::Path::SharedPtr req)
-  {
-    mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS trajectory {};
-
-    trajectory.time_usec = get_time_usec(req->header.stamp);        //!< [milisecs]
-    trajectory.valid_points = std::min(NUM_POINTS, req->poses.size());
-
-    auto fill_point =
-      [&](mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t, const size_t i) {
-        t.command[i] = UINT16_MAX;
-        if (req->poses.size() < i + 1) {
-          fill_points_all_unused(t, i);
-        } else {
-          auto & pose = req->poses[i].pose;
-
-          fill_points_position(t.pos_x, t.pos_y, t.pos_z, pose.position, i);
-          fill_points_yaw_q(t.pos_yaw, pose.orientation, i);
-          fill_points_unused_path(t, i);
-        }
-      };
-
-    // [[[cog:
-    // for i in range(5):
-    //      cog.outl(f"fill_point(trajectory, {i});")
-    // ]]]
-    fill_point(trajectory, 0);
-    fill_point(trajectory, 1);
-    fill_point(trajectory, 2);
-    fill_point(trajectory, 3);
-    fill_point(trajectory, 4);
-    // [[[end]]] (checksum: a63d2682cc16897f19da141e87ab5d60)
-
-    uas->send_message(trajectory);
-  }
-
-  void handle_trajectory(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & trajectory,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto tr_desired = mavros_msgs::msg::Trajectory();
-
-    auto fill_msg_point =
-      [&](RosPoints & p, const mavlink::common::msg::TRAJECTORY_REPRESENTATION_WAYPOINTS & t,
-      const size_t i) {
-        fill_msg_position(p.position, t, i);
-        fill_msg_velocity(p.velocity, t, i);
-        fill_msg_acceleration(p.acceleration_or_force, t, i);
-        p.yaw = wrap_pi((M_PI / 2.0f) - t.pos_yaw[i]);
-        p.yaw_rate = t.vel_yaw[i];
-        tr_desired.command[i] = t.command[i];
-      };
-
-    tr_desired.header = uas->synchronized_header("local_origin", trajectory.time_usec);
-
-    if (trajectory.valid_points > tr_desired.point_valid.size()) {
-      return;
-    }
-
-    for (int i = 0; i < trajectory.valid_points; ++i) {
-      tr_desired.point_valid[i] = true;
-    }
-
-    for (size_t i = trajectory.valid_points; i < NUM_POINTS; ++i) {
-      tr_desired.point_valid[i] = false;
-    }
-
-    // [[[cog:
-    // for i in range(5):
-    //     cog.outl(f"fill_msg_point(tr_desired.point_{i+1}, trajectory, {i});")
-    // ]]]
-    fill_msg_point(tr_desired.point_1, trajectory, 0);
-    fill_msg_point(tr_desired.point_2, trajectory, 1);
-    fill_msg_point(tr_desired.point_3, trajectory, 2);
-    fill_msg_point(tr_desired.point_4, trajectory, 3);
-    fill_msg_point(tr_desired.point_5, trajectory, 4);
-    // [[[end]]] (checksum: a1d59b0aa0f24a18ca76f47397bca4ae)
-
-    trajectory_desired_pub->publish(tr_desired);
-  }
-
-  float wrap_pi(float a)
-  {
-    if (!std::isfinite(a)) {
-      return a;
-    }
-
-    return fmod(a + M_PI, 2.0f * M_PI) - M_PI;
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::TrajectoryPlugin)
diff --git a/mavros_extras/src/plugins/tunnel.cpp b/mavros_extras/src/plugins/tunnel.cpp
deleted file mode 100644
index f6382c9a..00000000
--- a/mavros_extras/src/plugins/tunnel.cpp
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
- * Copyright 2021 Morten Fyhn Amundsen <morten.fyhn.amundsen@gmail.com>
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Tunnel plugin
- * @file tunnel.cpp
- * @author Morten Fyhn Amundsen <morten.fyhn.amundsen@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-#include <stdexcept>
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/tunnel.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Tunnel plugin
- * @plugin tunnel
- */
-class TunnelPlugin : public plugin::Plugin
-{
-public:
-  explicit TunnelPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "tunnel")
-  {
-    sub_ =
-      node->create_subscription<mavros_msgs::msg::Tunnel>(
-      "~/in", 10,
-      std::bind(&TunnelPlugin::ros_callback, this, _1));
-    pub_ = node->create_publisher<mavros_msgs::msg::Tunnel>("~/out", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&TunnelPlugin::mav_callback),
-    };
-  }
-
-private:
-  rclcpp::Subscription<mavros_msgs::msg::Tunnel>::SharedPtr sub_;
-  rclcpp::Publisher<mavros_msgs::msg::Tunnel>::SharedPtr pub_;
-
-  void ros_callback(const mavros_msgs::msg::Tunnel::SharedPtr ros_tunnel)
-  {
-    try {
-      const auto mav_tunnel =
-        copy_tunnel<mavros_msgs::msg::Tunnel, mavlink::common::msg::TUNNEL>(
-        *ros_tunnel);
-
-      uas->send_message(mav_tunnel);
-    } catch (std::overflow_error & ex) {
-      RCLCPP_ERROR_STREAM(get_logger(), "in error: " << ex.what());
-    }
-  }
-
-  void mav_callback(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::TUNNEL & mav_tunnel,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    try {
-      const auto ros_tunnel =
-        copy_tunnel<mavlink::common::msg::TUNNEL, mavros_msgs::msg::Tunnel>(
-        mav_tunnel);
-
-      pub_->publish(ros_tunnel);
-    } catch (std::overflow_error & ex) {
-      RCLCPP_ERROR_STREAM(get_logger(), "out error: " << ex.what());
-    }
-  }
-
-  template<typename From, typename To>
-  static To copy_tunnel(const From & from) noexcept(false)
-  {
-    static const auto max_payload_length = mavlink::common::msg::TUNNEL().payload.max_size();
-
-    if (from.payload_length > max_payload_length) {
-      throw std::overflow_error("too long payload length");
-    }
-
-    auto to = To{};
-
-    to.target_system = from.target_system;
-    to.target_component = from.target_component;
-    to.payload_type = from.payload_type;
-    to.payload_length = from.payload_length;
-    std::copy(
-      from.payload.begin(),
-      from.payload.begin() + from.payload_length,
-      to.payload.begin());
-
-    return to;
-  }
-};
-}  // namespace extra_plugins
-}  // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::TunnelPlugin)
diff --git a/mavros_extras/src/plugins/vfr_hud.cpp b/mavros_extras/src/plugins/vfr_hud.cpp
deleted file mode 100644
index 8662baaf..00000000
--- a/mavros_extras/src/plugins/vfr_hud.cpp
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright 2014,2016 Vladimir Ermakov.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief VFR HUD plugin
- * @file vfr_hud.cpp
- * @author Vladimir Ermakov <vooon341@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/vfr_hud.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief VFR HUD plugin.
- * @plugin vfr_hud
- */
-class VfrHudPlugin : public plugin::Plugin
-{
-public:
-  explicit VfrHudPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "vfr_hud")
-  {
-    vfr_pub = node->create_publisher<mavros_msgs::msg::VfrHud>("vfr_hud", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&VfrHudPlugin::handle_vfr_hud),
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::VfrHud>::SharedPtr vfr_pub;
-
-  void handle_vfr_hud(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::VFR_HUD & vfr_hud,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto vmsg = mavros_msgs::msg::VfrHud();
-
-    vmsg.header.stamp = node->now();
-    vmsg.airspeed = vfr_hud.airspeed;
-    vmsg.groundspeed = vfr_hud.groundspeed;
-    vmsg.heading = vfr_hud.heading;
-    vmsg.throttle = vfr_hud.throttle / 100.0;   // comes in 0..100 range
-    vmsg.altitude = vfr_hud.alt;
-    vmsg.climb = vfr_hud.climb;
-
-    vfr_pub->publish(vmsg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::VfrHudPlugin)
diff --git a/mavros_extras/src/plugins/vibration.cpp b/mavros_extras/src/plugins/vibration.cpp
deleted file mode 100644
index 73fbdab1..00000000
--- a/mavros_extras/src/plugins/vibration.cpp
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright 2015 Nuno Marques.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Vibration plugin
- * @file vibration.cpp
- * @author Nuno Marques <n.marques21@hotmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <string>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/vibration.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Vibration plugin
- * @plugin vibration
- *
- * This plugin is intended to publish MAV vibration levels and accelerometer clipping from FCU.
- */
-class VibrationPlugin : public plugin::Plugin
-{
-public:
-  explicit VibrationPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "vibration")
-  {
-    enable_node_watch_parameters();
-
-    node_declare_and_watch_parameter(
-      "frame_id", "base_link", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    vibration_pub = node->create_publisher<mavros_msgs::msg::Vibration>("~/raw/vibration", 10);
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&VibrationPlugin::handle_vibration)
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::Vibration>::SharedPtr vibration_pub;
-
-  std::string frame_id;
-
-  void handle_vibration(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::VIBRATION & vibration,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    auto vibe_msg = mavros_msgs::msg::Vibration();
-
-    vibe_msg.header = uas->synchronized_header(frame_id, vibration.time_usec);
-
-    Eigen::Vector3d vib_enu = {vibration.vibration_x, vibration.vibration_y, vibration.vibration_z};
-    tf2::toMsg(ftf::transform_frame_ned_enu(vib_enu), vibe_msg.vibration);
-
-    vibe_msg.clipping[0] = vibration.clipping_0;
-    vibe_msg.clipping[1] = vibration.clipping_1;
-    vibe_msg.clipping[2] = vibration.clipping_2;
-
-    vibration_pub->publish(vibe_msg);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::VibrationPlugin)
diff --git a/mavros_extras/src/plugins/vision_pose_estimate.cpp b/mavros_extras/src/plugins/vision_pose_estimate.cpp
deleted file mode 100644
index 8793b9ca..00000000
--- a/mavros_extras/src/plugins/vision_pose_estimate.cpp
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- * Copyright 2014 M.H.Kabir.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief VisionPoseEstimate plugin
- * @file vision_pose_estimate.cpp
- * @author M.H.Kabir <mhkabir98@gmail.com>
- * @author Vladimir Ermakov <vooon341@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <string>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/utils.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-#include "mavros/setpoint_mixin.hpp"
-
-#include "geometry_msgs/msg/pose_stamped.hpp"
-#include "geometry_msgs/msg/pose_with_covariance_stamped.hpp"
-#include "geometry_msgs/msg/vector3_stamped.hpp"
-#include "mavros_msgs/msg/landing_target.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;
-
-/**
- * @brief Vision pose estimate plugin
- * @plugin vision_pose
- *
- * Send pose estimation from various vision estimators
- * to FCU position and attitude estimators.
- *
- */
-class VisionPoseEstimatePlugin : public plugin::Plugin,
-  private plugin::TF2ListenerMixin<VisionPoseEstimatePlugin>
-{
-public:
-  explicit VisionPoseEstimatePlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "vision_pose"),
-    tf_rate(10.0)
-  {
-    enable_node_watch_parameters();
-
-    // tf params
-    node_declare_and_watch_parameter(
-      "tf/listen", false, [&](const rclcpp::Parameter & p) {
-        auto tf_listen = p.as_bool();
-        if (tf_listen) {
-          RCLCPP_INFO_STREAM(
-            get_logger(),
-            "Listen to vision transform" << tf_frame_id <<
-              " -> " << tf_child_frame_id);
-          tf2_start("VisionPoseTF", &VisionPoseEstimatePlugin::transform_cb);
-        } else {
-          vision_sub = node->create_subscription<geometry_msgs::msg::PoseStamped>(
-            "~/pose", 10, std::bind(
-              &VisionPoseEstimatePlugin::vision_cb, this, _1));
-          vision_cov_sub = node->create_subscription<geometry_msgs::msg::PoseWithCovarianceStamped>(
-            "~/pose_cov", 10, std::bind(
-              &VisionPoseEstimatePlugin::vision_cov_cb, this, _1));
-        }
-      });
-
-    node_declare_and_watch_parameter(
-      "tf/frame_id", "map", [&](const rclcpp::Parameter & p) {
-        tf_frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf/child_frame_id", "vision_estimate", [&](const rclcpp::Parameter & p) {
-        tf_child_frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf/rate_limit", 10.0, [&](const rclcpp::Parameter & p) {
-        tf_rate = p.as_double();
-      });
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  friend class TF2ListenerMixin;
-
-  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr vision_sub;
-  rclcpp::Subscription<geometry_msgs::msg::PoseWithCovarianceStamped>::SharedPtr vision_cov_sub;
-
-  std::string tf_frame_id;
-  std::string tf_child_frame_id;
-
-  double tf_rate;
-
-  rclcpp::Time last_transform_stamp{0, 0, RCL_ROS_TIME};
-
-  /* -*- low-level send -*- */
-  /**
-   * @brief Send vision estimate transform to FCU position controller
-   */
-  void send_vision_estimate(
-    const rclcpp::Time & stamp, const Eigen::Affine3d & tr,
-    const geometry_msgs::msg::PoseWithCovariance::_covariance_type & cov)
-  {
-    if (last_transform_stamp == stamp) {
-      RCLCPP_DEBUG_THROTTLE(
-        get_logger(),
-        *get_clock(), 10, "Vision: Same transform as last one, dropped.");
-      return;
-    }
-    last_transform_stamp = stamp;
-
-    auto position = ftf::transform_frame_enu_ned(Eigen::Vector3d(tr.translation()));
-    auto rpy = ftf::quaternion_to_rpy(
-      ftf::transform_orientation_enu_ned(
-        ftf::transform_orientation_baselink_aircraft(Eigen::Quaterniond(tr.rotation()))));
-
-    auto cov_ned = ftf::transform_frame_enu_ned(cov);
-    ftf::EigenMapConstCovariance6d cov_map(cov_ned.data());
-
-    mavlink::common::msg::VISION_POSITION_ESTIMATE vp{};
-
-    vp.usec = stamp.nanoseconds() / 1000;
-    // [[[cog:
-    // for f in "xyz":
-    //     cog.outl(f"vp.{f} = position.{f}();")
-    // for a, b in zip("xyz", ('roll', 'pitch', 'yaw')):
-    //     cog.outl(f"vp.{b} = rpy.{a}();")
-    // ]]]
-    vp.x = position.x();
-    vp.y = position.y();
-    vp.z = position.z();
-    vp.roll = rpy.x();
-    vp.pitch = rpy.y();
-    vp.yaw = rpy.z();
-    // [[[end]]] (checksum: 0aed118405958e3f35e8e7c9386e812f)
-
-    // just the URT of the 6x6 Pose Covariance Matrix, given
-    // that the matrix is symmetric
-    ftf::covariance_urt_to_mavlink(cov_map, vp.covariance);
-
-    uas->send_message(vp);
-  }
-
-  /* -*- callbacks -*- */
-
-  /* common TF listener moved to mixin */
-
-  void transform_cb(const geometry_msgs::msg::TransformStamped & transform)
-  {
-    Eigen::Affine3d tr = tf2::transformToEigen(transform.transform);
-    ftf::Covariance6d cov {};                   // zero initialized
-
-    send_vision_estimate(transform.header.stamp, tr, cov);
-  }
-
-  void vision_cb(const geometry_msgs::msg::PoseStamped::SharedPtr req)
-  {
-    Eigen::Affine3d tr;
-    tf2::fromMsg(req->pose, tr);
-    ftf::Covariance6d cov {};                   // zero initialized
-
-    send_vision_estimate(req->header.stamp, tr, cov);
-  }
-
-  void vision_cov_cb(const geometry_msgs::msg::PoseWithCovarianceStamped::SharedPtr req)
-  {
-    Eigen::Affine3d tr;
-    tf2::fromMsg(req->pose.pose, tr);
-    send_vision_estimate(req->header.stamp, tr, req->pose.covariance);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::VisionPoseEstimatePlugin)
diff --git a/mavros_extras/src/plugins/vision_speed_estimate.cpp b/mavros_extras/src/plugins/vision_speed_estimate.cpp
deleted file mode 100644
index 6ea4bc76..00000000
--- a/mavros_extras/src/plugins/vision_speed_estimate.cpp
+++ /dev/null
@@ -1,164 +0,0 @@
-/*
- * Copyright 2014, 2018 Nuno Marques.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief VisionSpeedEstimate plugin
- * @file vision_speed.cpp
- * @author Nuno Marques <n.marques21@hotmail.com>
- * @author Vladimir Ermakov <vooon341@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "geometry_msgs/msg/twist_stamped.hpp"
-#include "geometry_msgs/msg/twist_with_covariance_stamped.hpp"
-#include "geometry_msgs/msg/vector3_stamped.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Vision speed estimate plugin
- * @plugin vision_speed
- *
- * Send velocity estimation from various vision estimators
- * to FCU position and attitude estimators.
- */
-class VisionSpeedEstimatePlugin : public plugin::Plugin
-{
-public:
-  explicit VisionSpeedEstimatePlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "vision_speed")
-  {
-    vision_twist_cov_sub =
-      node->create_subscription<geometry_msgs::msg::TwistWithCovarianceStamped>(
-      "~/speed_twist_cov", 10, std::bind(&VisionSpeedEstimatePlugin::twist_cov_cb, this, _1));
-    vision_twist_sub = node->create_subscription<geometry_msgs::msg::TwistStamped>(
-      "~/speed_twist", 10,
-      std::bind(&VisionSpeedEstimatePlugin::twist_cb, this, _1));
-    vision_vector_sub = node->create_subscription<geometry_msgs::msg::Vector3Stamped>(
-      "~/speed_vector", 10, std::bind(&VisionSpeedEstimatePlugin::vector_cb, this, _1));
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return { /* Rx disabled */};
-  }
-
-private:
-  rclcpp::Subscription<geometry_msgs::msg::TwistStamped>::SharedPtr vision_twist_sub;
-  rclcpp::Subscription<geometry_msgs::msg::TwistWithCovarianceStamped>::SharedPtr
-    vision_twist_cov_sub;
-  rclcpp::Subscription<geometry_msgs::msg::Vector3Stamped>::SharedPtr vision_vector_sub;
-
-  /* -*- low-level send -*- */
-  /**
-   * @brief Send vision speed estimate on local NED frame to the FCU.
-   *
-   * Message specification: https://mavlink.io/en/messages/common.html#VISION_SPEED_ESTIMATE
-   * @param usec	Timestamp (microseconds, synced to UNIX time or since system boot) (us)
-   * @param v	Velocity/speed vector in the local NED frame (meters)
-   * @param cov	Linear velocity covariance matrix (local NED frame)
-   */
-  void send_vision_speed_estimate(
-    const uint64_t usec, const Eigen::Vector3d & v,
-    const ftf::Covariance3d & cov)
-  {
-    mavlink::common::msg::VISION_SPEED_ESTIMATE vs {};
-
-    vs.usec = usec;
-
-    // [[[cog:
-    // for f in "xyz":
-    //     cog.outl("vs.%s = v.%s();" % (f, f))
-    // ]]]
-    vs.x = v.x();
-    vs.y = v.y();
-    vs.z = v.z();
-    // [[[end]]] (checksum: c0c3a3d4dea27c5dc44e4d4f982ff1b6)
-
-    ftf::covariance_to_mavlink(cov, vs.covariance);
-
-    uas->send_message(vs);
-  }
-
-  /* -*- mid-level helpers -*- */
-  /**
-   * @brief Convert vector and covariance from local ENU to local NED frame
-   *
-   * @param stamp		ROS timestamp of the message
-   * @param vel_enu	Velocity/speed vector in the ENU frame
-   * @param cov_enu	Linear velocity/speed in the ENU frame
-   */
-  void convert_vision_speed(
-    const rclcpp::Time & stamp, const Eigen::Vector3d & vel_enu,
-    const ftf::Covariance3d & cov_enu)
-  {
-    // Send transformed data from local ENU to NED frame
-    send_vision_speed_estimate(
-      get_time_usec(stamp),
-      ftf::transform_frame_enu_ned(vel_enu),
-      ftf::transform_frame_enu_ned(cov_enu));
-  }
-
-  /* -*- callbacks -*- */
-  /**
-   * @brief Callback to geometry_msgs/TwistStamped msgs
-   *
-   * @param req	received geometry_msgs/TwistStamped msg
-   */
-  void twist_cb(const geometry_msgs::msg::TwistStamped::SharedPtr req)
-  {
-    ftf::Covariance3d cov {};                   // zero initialized
-
-    convert_vision_speed(req->header.stamp, ftf::to_eigen(req->twist.linear), cov);
-  }
-
-  /**
-   * @brief Callback to geometry_msgs/TwistWithCovarianceStamped msgs
-   *
-   * @param req	received geometry_msgs/TwistWithCovarianceStamped msg
-   */
-  void twist_cov_cb(const geometry_msgs::msg::TwistWithCovarianceStamped::SharedPtr req)
-  {
-    ftf::Covariance3d cov3d {};                 // zero initialized
-
-    ftf::EigenMapCovariance3d cov3d_map(cov3d.data());
-    ftf::EigenMapConstCovariance6d cov6d_map(req->twist.covariance.data());
-
-    // only the linear velocity will be sent
-    cov3d_map = cov6d_map.block<3, 3>(0, 0);
-
-    convert_vision_speed(req->header.stamp, ftf::to_eigen(req->twist.twist.linear), cov3d);
-  }
-
-  /**
-   * @brief Callback to geometry_msgs/Vector3Stamped msgs
-   *
-   * @param req	received geometry_msgs/Vector3Stamped msg
-   */
-  void vector_cb(const geometry_msgs::msg::Vector3Stamped::SharedPtr req)
-  {
-    ftf::Covariance3d cov {};                   // zero initialized
-
-    convert_vision_speed(req->header.stamp, ftf::to_eigen(req->vector), cov);
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::VisionSpeedEstimatePlugin)
diff --git a/mavros_extras/src/plugins/wheel_odometry.cpp b/mavros_extras/src/plugins/wheel_odometry.cpp
deleted file mode 100644
index 6ea61754..00000000
--- a/mavros_extras/src/plugins/wheel_odometry.cpp
+++ /dev/null
@@ -1,670 +0,0 @@
-/*
- * Copyright 2017 Pavlo Kolomiiets.
- *
- * This file is part of the mavros package and subject to the license terms
- * in the top-level LICENSE file of the mavros repository.
- * https://github.com/mavlink/src/mavros/mavros/tree/master/LICENSE.md
- */
-/**
- * @brief Wheel odometry plugin
- * @file wheel_odometry.cpp
- * @author Pavlo Kolomiiets <pkolomiets@gmail.com>
- *
- * @addtogroup plugin
- * @{
- */
-
-#include <algorithm>
-#include <string>
-#include <vector>
-
-#include "tf2_eigen/tf2_eigen.hpp"
-#include "rcpputils/asserts.hpp"
-#include "mavros/mavros_uas.hpp"
-#include "mavros/plugin.hpp"
-#include "mavros/plugin_filter.hpp"
-
-#include "mavros_msgs/msg/wheel_odom_stamped.hpp"
-#include "geometry_msgs/msg/twist_with_covariance_stamped.hpp"
-#include "nav_msgs/msg/odometry.hpp"
-
-namespace mavros
-{
-namespace extra_plugins
-{
-using namespace std::placeholders;      // NOLINT
-
-/**
- * @brief Wheel odometry plugin.
- * @plugin wheel_odometry
- *
- * This plugin allows computing and publishing wheel odometry coming from FCU wheel encoders.
- * Can use either wheel's RPM or WHEEL_DISTANCE messages (the latter gives better accuracy).
- */
-class WheelOdometryPlugin : public plugin::Plugin
-{
-public:
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-  explicit WheelOdometryPlugin(plugin::UASPtr uas_)
-  : Plugin(uas_, "wheel_odometry"),
-    odom_mode(OM::NONE),
-    count(0),
-    raw_send(false),
-    twist_send(false),
-    tf_send(false),
-    yaw_initialized(false),
-    rpose(Eigen::Vector3d::Zero()),
-    rtwist(Eigen::Vector3d::Zero()),
-    rpose_cov(Eigen::Matrix3d::Zero()),
-    rtwist_cov(Eigen::Vector3d::Zero())
-  {
-    enable_node_watch_parameters();
-
-    // General params
-    node_declare_and_watch_parameter(
-      "send_raw", false, [&](const rclcpp::Parameter & p) {
-        raw_send = p.as_bool();
-
-        if (raw_send) {
-          rpm_pub = node->create_publisher<mavros_msgs::msg::WheelOdomStamped>("~/rpm", 10);
-          dist_pub = node->create_publisher<mavros_msgs::msg::WheelOdomStamped>("~/distance", 10);
-        } else {
-          rpm_pub.reset();
-          dist_pub.reset();
-        }
-      });
-
-    node_declare_and_watch_parameter(
-      "count", 2, [&](const rclcpp::Parameter & p) {
-        int count_ = p.as_int();
-        count = std::max(2, count_);    // bound check
-      });
-
-    node_declare_and_watch_parameter(
-      "use_rpm", false, [&](const rclcpp::Parameter & p) {
-        bool use_rpm = p.as_bool();
-        if (use_rpm) {
-          odom_mode = OM::RPM;
-        } else {
-          odom_mode = OM::DIST;
-        }
-      });
-
-    // Odometry params
-    node_declare_and_watch_parameter(
-      "send_twist", false, [&](const rclcpp::Parameter & p) {
-        twist_send = p.as_bool();
-      });
-
-    node_declare_and_watch_parameter(
-      "frame_id", "odom", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "child_frame_id", "base_link", [&](const rclcpp::Parameter & p) {
-        frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "vel_error", 0.1, [&](const rclcpp::Parameter & p) {
-        double vel_error = p.as_double();
-        vel_cov = vel_error * vel_error;       // std -> cov
-      });
-
-    // TF subsection
-    node_declare_and_watch_parameter(
-      "tf.frame_id", "odom", [&](const rclcpp::Parameter & p) {
-        tf_frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf.child_frame_id", "base_link", [&](const rclcpp::Parameter & p) {
-        tf_child_frame_id = p.as_string();
-      });
-
-    node_declare_and_watch_parameter(
-      "tf.send", false, [&](const rclcpp::Parameter & p) {
-        tf_send = p.as_bool();
-      });
-
-    // Read parameters for each wheel.
-    wheel_offset.resize(count);
-    wheel_radius.resize(count);
-
-    for (int wi = 0; wi < count; wi++) {
-      // Build the string in the form "wheelX", where X is the wheel number.
-      // Check if we have "wheelX" parameter.
-      // Indices starts from 0 and should increase without gaps.
-
-      node_declare_and_watch_parameter(
-        utils::format("wheel%i.x", wi), 0.0, [wi, this](const rclcpp::Parameter & p) {
-          wheel_offset[wi][0] = p.as_double();
-        });
-      node_declare_and_watch_parameter(
-        utils::format("wheel%i.y", wi), 0.0, [wi, this](const rclcpp::Parameter & p) {
-          wheel_offset[wi][1] = p.as_double();
-        });
-      node_declare_and_watch_parameter(
-        utils::format("wheel%i.radius", wi), 0.05, [wi, this](const rclcpp::Parameter & p) {
-          wheel_radius[wi] = p.as_double();
-        });
-    }
-
-#if 0  // TODO(vooon): port this
-    // Check for all wheels specified
-    if (wheel_offset.size() >= count) {
-      // Duplicate 1st wheel if only one is available.
-      // This generalizes odometry computations for 1- and 2-wheels configurations.
-      if (wheel_radius.size() == 1) {
-        wheel_offset.resize(2);
-        wheel_radius.resize(2);
-        wheel_offset[1].x() = wheel_offset[0].x();
-        // make separation non-zero to avoid div-by-zero
-        wheel_offset[1].y() = wheel_offset[0].y() + 1.0;
-        wheel_radius[1] = wheel_radius[0];
-      }
-
-      // Check for non-zero wheel separation (first two wheels)
-      double separation = std::abs(wheel_offset[1].y() - wheel_offset[0].y());
-      if (separation < 1.e-5) {
-        odom_mode = OM::NONE;
-        ROS_WARN_NAMED(
-          "wo", "WO: Separation between the first two wheels is too small (%f).",
-          separation);
-      }
-
-      // Check for reasonable radiuses
-      for (int i = 0; i < wheel_radius.size(); i++) {
-        if (wheel_radius[i] <= 1.e-5) {
-          odom_mode = OM::NONE;
-          ROS_WARN_NAMED("wo", "WO: Wheel #%i has incorrect radius (%f).", i, wheel_radius[i]);
-        }
-      }
-    } else {
-      odom_mode = OM::NONE;
-      ROS_WARN_NAMED(
-        "wo", "WO: Not all wheels have parameters specified (%lu/%i).",
-        wheel_offset.size(), count);
-    }
-#endif
-
-    // Advertize topics
-    if (odom_mode != OM::NONE) {
-      if (twist_send) {
-        twist_pub = node->create_publisher<geometry_msgs::msg::TwistWithCovarianceStamped>(
-          "~/velocity", 10);
-      } else {
-        odom_pub = node->create_publisher<nav_msgs::msg::Odometry>("~/odom", 10);
-      }
-    } else {
-      // No-odometry warning
-      RCLCPP_WARN(get_logger(), "WO: No odometry computations will be performed.");
-    }
-  }
-
-  Subscriptions get_subscriptions() override
-  {
-    return {
-      make_handler(&WheelOdometryPlugin::handle_rpm),
-      make_handler(&WheelOdometryPlugin::handle_wheel_distance)
-    };
-  }
-
-private:
-  rclcpp::Publisher<mavros_msgs::msg::WheelOdomStamped>::SharedPtr rpm_pub;
-  rclcpp::Publisher<mavros_msgs::msg::WheelOdomStamped>::SharedPtr dist_pub;
-  rclcpp::Publisher<nav_msgs::msg::Odometry>::SharedPtr odom_pub;
-  rclcpp::Publisher<geometry_msgs::msg::TwistWithCovarianceStamped>::SharedPtr twist_pub;
-
-  /// @brief Odometry computation modes
-  enum class OM
-  {
-    NONE,               //!< no odometry computation
-    RPM,                //!< use wheel's RPM
-    DIST                //!< use wheel's cumulative distance
-  };
-  OM odom_mode;       //!< odometry computation mode
-
-  int count;                    //!< requested number of wheels to compute odometry
-  bool raw_send;                //!< send wheel's RPM and cumulative distance
-  std::vector<Eigen::Vector2d> wheel_offset;       //!< wheel x,y offsets (m,NED)
-  std::vector<double> wheel_radius;       //!< wheel radiuses (m)
-
-  bool twist_send;                      //!< send TwistWithCovarianceStamped instead of Odometry
-  bool tf_send;                         //!< send TF
-  std::string frame_id;                 //!< origin frame for topic headers
-  std::string child_frame_id;           //!< body-fixed frame for topic headers
-  std::string tf_frame_id;              //!< origin for TF
-  std::string tf_child_frame_id;        //!< frame for TF and Pose
-  double vel_cov;                       //!< wheel velocity measurement error 1-var (m/s)
-
-  int count_meas;                               //!< number of wheels in measurements
-  rclcpp::Time time_prev;                       //!< timestamp of previous measurement
-  std::vector<double> measurement_prev;         //!< previous measurement
-
-  bool yaw_initialized;                         //!< initial yaw initialized (from IMU)
-
-  /// @brief Robot origin 2D-state (SI units)
-  Eigen::Vector3d rpose;                //!< pose (x, y, yaw)
-  Eigen::Vector3d rtwist;               //!< twist (vx, vy, vyaw)
-  Eigen::Matrix3d rpose_cov;            //!< pose error 1-var
-  Eigen::Vector3d rtwist_cov;           //!< twist error 1-var (vx_cov, vy_cov, vyaw_cov)
-
-  // XXX(vooon): attq != Eigen::Quaterniond::Identity():
-  // error: no match for ‘operator!=’ (operand types are ‘Eigen::Quaternion<double>’ and
-  // ‘Eigen::Quaternion<double>’)
-  inline bool quaterniond_eq(Eigen::Quaterniond a, Eigen::Quaterniond b)
-  {
-    // [[[cog:
-    // parts = [f"a.{f}() == b.{f}()" for f in "wxyz"]
-    // cog.outl(f"return {' && '.join(parts)};");
-    // ]]]
-    return a.w() == b.w() && a.x() == b.x() && a.y() == b.y() && a.z() == b.z();
-    // [[[end]]] (checksum: af3c54c9f2c525c7a0c27a3151d69074)
-  }
-
-  /**
-   * @brief Publish odometry.
-   * Odometry is computed from the very start but no pose info is published until we have initial orientation (yaw).
-   * Once we get it, the robot's current pose is updated with it and starts to be published.
-   * Twist info doesn't depend on initial orientation so is published from the very start.
-   * @param time		measurement's ROS time stamp
-   */
-  void publish_odometry(rclcpp::Time time)
-  {
-    // Get initial yaw (from IMU)
-    // Check that IMU was already initialized
-    auto attq = ftf::to_eigen(uas->data.get_attitude_orientation_enu());
-    if (!yaw_initialized && !quaterniond_eq(attq, Eigen::Quaterniond::Identity())) {
-      double yaw = ftf::quaternion_get_yaw(attq);
-
-      // Rotate current pose by initial yaw
-      Eigen::Rotation2Dd rot(yaw);
-      rpose.head(2) = rot * rpose.head(2);  // x,y
-      rpose(2) += yaw;                      // yaw
-
-      RCLCPP_INFO(get_logger(), "WO: Initial yaw (deg): %f", yaw / M_PI * 180.0);
-      yaw_initialized = true;
-    }
-
-    // Orientation (only if we have initial yaw)
-    geometry_msgs::msg::Quaternion quat;
-    if (yaw_initialized) {
-      quat = tf2::toMsg(ftf::quaternion_from_rpy(0.0, 0.0, rpose(2)));
-    }
-
-    // Twist
-    geometry_msgs::msg::TwistWithCovariance twist_cov;
-    // linear
-    twist_cov.twist.linear.x = rtwist(0);
-    twist_cov.twist.linear.y = rtwist(1);
-    twist_cov.twist.linear.z = 0.0;
-    // angular
-    twist_cov.twist.angular.x = 0.0;
-    twist_cov.twist.angular.y = 0.0;
-    twist_cov.twist.angular.z = rtwist(2);
-    // covariance
-    ftf::EigenMapCovariance6d twist_cov_map(twist_cov.covariance.data());
-    twist_cov_map.setZero();
-    twist_cov_map.block<2, 2>(0, 0).diagonal() << rtwist_cov(0), rtwist_cov(1);
-    twist_cov_map.block<1, 1>(5, 5).diagonal() << rtwist_cov(2);
-
-    // Publish twist
-    if (twist_send && twist_pub) {
-      auto twist_cov_t = geometry_msgs::msg::TwistWithCovarianceStamped();
-      // header
-      twist_cov_t.header.stamp = time;
-      twist_cov_t.header.frame_id = frame_id;
-      // twist
-      twist_cov_t.twist = twist_cov;
-      // publish
-      twist_pub->publish(twist_cov_t);
-    } else if (yaw_initialized) {
-      // Publish odometry (only if we have initial yaw)
-      auto odom = nav_msgs::msg::Odometry();
-      // header
-      odom.header.stamp = time;
-      odom.header.frame_id = frame_id;
-      odom.child_frame_id = child_frame_id;
-      // pose
-      odom.pose.pose.position.x = rpose(0);
-      odom.pose.pose.position.y = rpose(1);
-      odom.pose.pose.position.z = 0.0;
-      odom.pose.pose.orientation = quat;
-      ftf::EigenMapCovariance6d pose_cov_map(odom.pose.covariance.data());
-      pose_cov_map.block<2, 2>(0, 0) << rpose_cov.block<2, 2>(0, 0);
-      pose_cov_map.block<2, 1>(0, 5) << rpose_cov.block<2, 1>(0, 2);
-      pose_cov_map.block<1, 2>(5, 0) << rpose_cov.block<1, 2>(2, 0);
-      pose_cov_map.block<1, 1>(5, 5) << rpose_cov.block<1, 1>(2, 2);
-      // twist
-      odom.twist = twist_cov;
-      // publish
-      odom_pub->publish(odom);
-    }
-
-    // Publish TF (only if we have initial yaw)
-    if (tf_send && yaw_initialized) {
-      geometry_msgs::msg::TransformStamped transform;
-      // header
-      transform.header.stamp = time;
-      transform.header.frame_id = tf_frame_id;
-      transform.child_frame_id = tf_child_frame_id;
-      // translation
-      transform.transform.translation.x = rpose(0);
-      transform.transform.translation.y = rpose(1);
-      transform.transform.translation.z = 0.0;
-      // rotation
-      transform.transform.rotation = quat;
-      // publish
-      uas->tf2_broadcaster.sendTransform(transform);
-    }
-  }
-
-  /**
-   * @brief Update odometry for differential drive robot.
-   * Odometry is computed for robot's origin (IMU).
-   * The wheels are assumed to be parallel to the robot's x-direction (forward) and with the same x-offset.
-   * No slip is assumed (Instantaneous Center of Curvature (ICC) along the axis connecting the wheels).
-   * All computations are performed for ROS frame conventions.
-   * The approach is the extended and more accurate version of standard one described in the book
-   * https://github.com/correll/Introduction-to-Autonomous-Robots
-   * and at the page (with some typos fixed)
-   * http://correll.cs.colorado.edu/?p=1307
-   * The extension is that exact pose update is used instead of approximate,
-   * and that the robot's origin can be specified anywhere instead of the middle-point between the wheels.
-   * @param distance	distance traveled by each wheel since last odometry update
-   * @param dt		time elapse since last odometry update (s)
-   */
-  void update_odometry_diffdrive(std::vector<double> distance, double dt)
-  {
-    double y0 = wheel_offset[0](1);
-    double y1 = wheel_offset[1](1);
-    double a = -wheel_offset[0](0);
-    double dy_inv = 1.0 / (y1 - y0);
-    double dt_inv = 1.0 / dt;
-
-    // Rotation angle
-    double theta = (distance[1] - distance[0]) * dy_inv;
-    // Distance traveled by the projection of origin onto the axis connecting the wheels (Op)
-    double L = (y1 * distance[0] - y0 * distance[1]) * dy_inv;
-
-    // Instantenous pose update in local (robot) coordinate system (vel*dt)
-    Eigen::Vector3d v(L, a * theta, theta);
-    // Instantenous local twist
-    rtwist = v * dt_inv;
-
-    // Compute local pose update (approximate).
-    // In the book a=0 and |y0|=|y1|, additionally.
-    // dx = L*cos(theta/2) - a*theta*sin(theta/2)
-    // dy = L*sin(theta/2) + a*theta*cos(theta/2)
-    // Compute local pose update (exact)
-    // dx = a*(cos(theta)-1) + R*sin(theta)
-    // dy = a*sin(theta) - R*(cos(theta)-1)
-    // where R - rotation radius of Op around ICC (R = L/theta).
-    double cos_theta = std::cos(theta);
-    double sin_theta = std::sin(theta);
-    double p;             // sin(theta)/theta
-    double q;             // (1-cos(theta))/theta
-    if (std::abs(theta) > 1.e-5) {
-      p = sin_theta / theta;
-      q = (1.0 - cos_theta) / theta;
-    } else {
-      // Limits for theta -> 0
-      p = 1.0;
-      q = 0.0;
-    }
-
-    // Local pose update matrix
-    Eigen::Matrix3d M;
-    M << p, -q, 0,
-      q, p, 0,
-      0, 0, 1;
-
-    // Local pose update
-    Eigen::Vector3d dpose = M * v;
-
-    // Rotation by yaw
-    double cy = std::cos(rpose(2));
-    double sy = std::sin(rpose(2));
-    Eigen::Matrix3d R;
-    R << cy, -sy, 0,
-      sy, cy, 0,
-      0, 0, 1;
-
-    // World pose
-    rpose += R * dpose;
-    rpose(2) = fmod(rpose(2), 2.0 * M_PI);  // Clamp to (-2*PI, 2*PI)
-
-    // Twist errors (constant in time)
-    if (rtwist_cov(0) == 0.0) {
-      // vx_cov
-      rtwist_cov(0) = vel_cov * (y0 * y0 + y1 * y1) * dy_inv * dy_inv;
-      // vy_cov (add extra error, otherwise vy_cov=0 if a=0)
-      rtwist_cov(1) = vel_cov * a * a * 2.0 * dy_inv * dy_inv + 0.001;
-      // vyaw_cov
-      rtwist_cov(2) = vel_cov * 2.0 * dy_inv * dy_inv;
-    }
-
-    // Pose errors (accumulated in time).
-    // Exact formulations respecting kinematic equations.
-    // dR/dYaw
-    Eigen::Matrix3d R_yaw;
-    R_yaw << -sy, -cy, 0,
-      cy, -sy, 0,
-      0, 0, 0;
-    // dYaw/dPose
-    Eigen::Vector3d yaw_pose(0, 0, 1);
-    // Jacobian by previous pose
-    Eigen::Matrix3d J_pose = Eigen::Matrix3d::Identity() + R_yaw * dpose * yaw_pose.transpose();
-
-    // dL,dTheta / dL0,dL1
-    double L_L0 = y1 * dy_inv;
-    double L_L1 = -y0 * dy_inv;
-    double theta_L0 = -dy_inv;
-    double theta_L1 = dy_inv;
-    // dv/dMeasurement
-    Eigen::Matrix<double, 3, 2> v_meas;
-    v_meas << L_L0, L_L1,
-      a * theta_L0, a * theta_L1,
-      theta_L0, theta_L1;
-    // dTheta/dMeasurement
-    Eigen::Vector2d theta_meas(theta_L0, theta_L1);
-    // dM/dTheta
-    double px;             // dP/dTheta
-    double qx;             // dQ/dTheta
-    if (std::abs(theta) > 1.e-5) {
-      px = (theta * cos_theta - sin_theta) / (theta * theta);
-      qx = (theta * sin_theta - (1 - cos_theta)) / (theta * theta);
-    } else {
-      // Limits for theta -> 0
-      px = 0;
-      qx = 0.5;
-    }
-    // dM/dTheta
-    Eigen::Matrix3d M_theta;
-    M_theta << px, -qx, 0,
-      qx, px, 0,
-      0, 0, 0;
-    // Jacobian by measurement
-    Eigen::Matrix<double, 3, 2> J_meas = R * (M * v_meas + M_theta * v * theta_meas.transpose());
-
-    // Measurement cov
-    double L0_cov = vel_cov * dt * dt;
-    double L1_cov = vel_cov * dt * dt;
-    Eigen::Matrix2d meas_cov;
-    meas_cov << L0_cov, 0,
-      0, L1_cov;
-
-    // Update pose cov
-    rpose_cov = J_pose * rpose_cov * J_pose.transpose() + J_meas * meas_cov * J_meas.transpose();
-  }
-
-  /**
-   * @brief Update odometry (currently, only 2-wheels differential configuration implemented).
-   * Odometry is computed for robot's origin (IMU).
-   * @param distance	distance traveled by each wheel since last odometry update
-   * @param dt		time elapse since last odometry update (s)
-   */
-  void update_odometry(std::vector<double> distance, double dt)
-  {
-    // Currently, only 2-wheels configuration implemented
-    int nwheels = std::min(2, static_cast<int>(distance.size()));
-    switch (nwheels) {
-      // Differential drive robot.
-      case 2:
-        update_odometry_diffdrive(distance, dt);
-        break;
-    }
-  }
-
-  /**
-   * @brief Process wheel measurement.
-   * @param measurement	measurement
-   * @param rpm		whether measurement contains RPM-s or cumulative wheel distances
-   * @param time		measurement's internal time stamp (for accurate dt computations)
-   * @param time_pub	measurement's time stamp for publish
-   */
-  void process_measurement(
-    std::vector<double> measurement, bool rpm, rclcpp::Time time,
-    rclcpp::Time time_pub)
-  {
-    // Initial measurement
-    if (time_prev == rclcpp::Time(0)) {
-      count_meas = measurement.size();
-      measurement_prev.resize(count_meas);
-      count = std::min(count, count_meas);  // don't try to use more wheels than we have
-    } else if (time == time_prev) {
-      // Same time stamp (messages are generated by FCU more often than the wheel state updated)
-      return;
-    } else if (measurement.size() != static_cast<size_t>(count_meas)) {
-      // # of wheels differs from the initial value
-      RCLCPP_WARN_THROTTLE(
-        get_logger(), *get_clock(), 10,
-        "WO: Number of wheels in measurement (%lu) differs from the initial value (%i).",
-        measurement.size(), count_meas);
-      return;
-    } else {
-      // Compute odometry
-      double dt = (time - time_prev).seconds();     // Time since previous measurement (s)
-
-      // Distance traveled by each wheel since last measurement.
-      // Reserve for at least 2 wheels.
-      std::vector<double> distance(std::max(2, count));
-      // Compute using RPM-s
-      if (rpm) {
-        for (int i = 0; i < count; i++) {
-          // RPM -> speed (m/s)
-          double RPM_2_SPEED = wheel_radius[i] * 2.0 * M_PI / 60.0;
-          // Mean RPM during last dt seconds
-          double rpm = 0.5 * (measurement[i] + measurement_prev[i]);
-          distance[i] = rpm * RPM_2_SPEED * dt;
-        }
-      } else {
-        // Compute using cumulative distances
-        for (int i = 0; i < count; i++) {
-          distance[i] = measurement[i] - measurement_prev[i];
-        }
-      }
-
-      // Make distance of the 2nd wheel equal to that of the 1st one
-      // if requested or only one is available.
-      // This generalizes odometry computations for 1- and 2-wheels configurations.
-      if (count == 1) {
-        distance[1] = distance[0];
-      }
-
-      // Update odometry
-      update_odometry(distance, dt);
-
-      // Publish odometry
-      publish_odometry(time_pub);
-    }
-
-    // Time step
-    time_prev = time;
-    std::copy_n(measurement.begin(), measurement.size(), measurement_prev.begin());
-  }
-
-  /* -*- message handlers -*- */
-
-  /**
-   * @brief Handle Ardupilot RPM MAVlink message.
-   * Message specification: http://mavlink.io/en/messages/ardupilotmega.html#RPM
-   * @param msg	Received Mavlink msg
-   * @param rpm	RPM msg
-   */
-  void handle_rpm(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::ardupilotmega::msg::RPM & rpm,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // Get ROS timestamp of the message
-    auto timestamp = node->now();
-
-    // Publish RPM-s
-    if (raw_send) {
-      auto rpm_msg = mavros_msgs::msg::WheelOdomStamped();
-
-      rpm_msg.header.stamp = timestamp;
-      rpm_msg.data.resize(2);
-      rpm_msg.data[0] = rpm.rpm1;
-      rpm_msg.data[1] = rpm.rpm2;
-
-      rpm_pub->publish(rpm_msg);
-    }
-
-    // Process measurement
-    if (odom_mode == OM::RPM) {
-      std::vector<double> measurement{rpm.rpm1, rpm.rpm2};
-      process_measurement(measurement, true, timestamp, timestamp);
-    }
-  }
-
-  /**
-   * @brief Handle WHEEL_DISTANCE MAVlink message.
-   * Message specification: https://mavlink.io/en/messages/common.html#WHEEL_DISTANCE
-   * @param msg	Received Mavlink msg
-   * @param dist	WHEEL_DISTANCE msg
-   */
-  void handle_wheel_distance(
-    const mavlink::mavlink_message_t * msg [[maybe_unused]],
-    mavlink::common::msg::WHEEL_DISTANCE & wheel_dist,
-    plugin::filter::SystemAndOk filter [[maybe_unused]])
-  {
-    // Check for bad wheels count
-    if (wheel_dist.count == 0) {
-      return;
-    }
-
-    // Get ROS timestamp of the message
-    auto timestamp = uas->synchronise_stamp(wheel_dist.time_usec);
-    // Get internal timestamp of the message
-    rclcpp::Time timestamp_int(wheel_dist.time_usec / 1000000UL,
-      1000UL * (wheel_dist.time_usec % 1000000UL));
-
-    // Publish distances
-    if (raw_send) {
-      auto wheel_dist_msg = mavros_msgs::msg::WheelOdomStamped();
-
-      wheel_dist_msg.header.stamp = timestamp;
-      wheel_dist_msg.data.resize(wheel_dist.count);
-      std::copy_n(wheel_dist.distance.begin(), wheel_dist.count, wheel_dist_msg.data.begin());
-
-      dist_pub->publish(wheel_dist_msg);
-    }
-
-    // Process measurement
-    if (odom_mode == OM::DIST) {
-      std::vector<double> measurement(wheel_dist.count);
-      std::copy_n(wheel_dist.distance.begin(), wheel_dist.count, measurement.begin());
-      process_measurement(measurement, false, timestamp_int, timestamp);
-    }
-  }
-};
-}       // namespace extra_plugins
-}       // namespace mavros
-
-#include <mavros/mavros_plugin_register_macro.hpp>  // NOLINT
-MAVROS_PLUGIN_REGISTER(mavros::extra_plugins::WheelOdometryPlugin)
diff --git a/test_mavros/CMakeLists.txt b/test_mavros/CMakeLists.txt
index 63cfe3a4..64e8ad08 100644
--- a/test_mavros/CMakeLists.txt
+++ b/test_mavros/CMakeLists.txt
@@ -10,7 +10,6 @@ find_package(catkin REQUIRED COMPONENTS
   eigen_conversions
   geometry_msgs
   mavros
-  mavros_extras
   roscpp
   std_msgs
   tf2_ros
@@ -56,7 +55,7 @@ endif()
 catkin_package(
   #INCLUDE_DIRS include
   #LIBRARIES sitl_test
-  CATKIN_DEPENDS control_toolbox eigen_conversions geometry_msgs mavros mavros_extras roscpp std_msgs tf2_ros
+  CATKIN_DEPENDS control_toolbox eigen_conversions geometry_msgs mavros roscpp std_msgs tf2_ros
   DEPENDS Boost
 )
 
diff --git a/test_mavros/package.xml b/test_mavros/package.xml
index df4ba9c7..7e0e8ef6 100644
--- a/test_mavros/package.xml
+++ b/test_mavros/package.xml
@@ -25,7 +25,6 @@
   <depend>geometry_msgs</depend>
   <depend>tf2_ros</depend>
   <depend>mavros</depend>
-  <depend>mavros_extras</depend>
   <depend>eigen</depend>
   <depend>eigen_conversions</depend>
   <depend>control_toolbox</depend>
